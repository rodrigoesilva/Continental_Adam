<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hbm.Api.SensorDB</name>
    </assembly>
    <members>
        <member name="T:Hbm.Api.SensorDB.Dal.CanImportDataManager">
            <summary>
            Encapsulates the CAN import of CAN sensors and categories from CAN database files
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Dal.CanImportDataManager.CANSigValType">
            <summary>
            Data of SIGVAL tag
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Dal.CanImportDataManager.CANMessageData">
            <summary>
            Can message data
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Dal.CanImportDataManager.CANSignalModeDependentData">
            <summary>
            Mode dependent signal data
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CanImportDataManager.#ctor(Hbm.Api.SensorDB.Dal.ConnectionInfo,System.String)">
            <summary>
            Creates a new instance initializes data manager and 
            sets the connection info using the base class
            </summary>
            <param name="connectionInfo">Instance of connection data</param>
            <param name="logDbBaseCategory">Log context category for quicker parsing log files.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CanImportDataManager.ImportCANDatabase(System.String,Hbm.Api.SensorDB.Entities.Category,System.Boolean)">
            <summary>
            Import the categories and sensors from the given can database file into the database.
            </summary>
            <param name="filename">Path and filename of the can database file</param>
            <param name="rootCategory">Category under which the imported categories and sensors are appended</param>
            <param name="useCompoundNames">If <c>true</c> then the sensor descriptions are generated by concatenating the message name and the signal name, 
            if <c>false</c> only the signal names are used.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CanImportDataManager.IsValidCANFileFormat(System.String)">
            <summary>
            Checks the content of a file for a valid CAN file format.
            </summary>
            <param name="filename">Path and filename of the CAN database file</param>
            <returns>Returns <c>true</c>, if the file contains a valid CAN structure, else <c>false</c>.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CanImportDataManager.ReadCANSigValTypes(System.String)">
            <summary>
            Reads SIG_VALTYPE tags in CAN data.
            </summary>
            <param name="filename">Path and filename of the CAN database file</param>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Dal.CanImportDataManager.CANSigValType"/> with imported SIG_VALTYPE values.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CanImportDataManager.ReadCANMessagesAndSignals(System.String,System.Collections.Generic.List{Hbm.Api.SensorDB.Dal.CanImportDataManager.CANSigValType},Hbm.Api.SensorDB.Entities.Category,System.Boolean,System.Collections.Generic.List{Hbm.Api.SensorDB.Entities.Category}@,System.Collections.Generic.List{Hbm.Api.SensorDB.Entities.Sensor}@)">
            <summary>
            Read all CAN messages and signals of the CAN database file and retrieve the lists of the imported categories and sensors.
            </summary>
            <param name="filename">Path and filename of the CAN database file</param>
            <param name="sigValTypes">List of <see cref="T:Hbm.Api.SensorDB.Dal.CanImportDataManager.CANSigValType"/> containing the imported SIG_VALTYPE values</param>
            <param name="canDatabaseCategory">Parent category of the current CAN import</param>
            <param name="useCompoundNames">If <c>true</c> then the sensor descriptions are generated by concatenating the message name and the signal name, 
            if <c>false</c> only the signal names are used.</param>
            <param name="importedCategories">New list of <see cref="T:Hbm.Api.SensorDB.Entities.Category"/>, containing the imported categories</param>
            <param name="importedSensors">New list of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/>, containing the imported sensors</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CanImportDataManager.FillModeDepenentValuesInSensors(Hbm.Api.SensorDB.Dal.CanImportDataManager.CANSignalModeDependentData,System.Collections.Generic.List{Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor})">
            <summary>
            Fills the mode data of the last mode signal (given by currentSignalModeData) into mode dependent sensors 
            of the given sensor list.
            </summary>
            <param name="lastSignalsModeData">Mode data of the last mode signal</param>
            <param name="sensors">List of <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor"/> containing the sensors according to the current message</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CanImportDataManager.ComputeRawValueFormat(System.String,System.String,System.Collections.Generic.List{Hbm.Api.SensorDB.Dal.CanImportDataManager.CANSigValType},Hbm.Api.SensorDB.Dal.CanImportDataManager.CANMessageData)">
            <summary>
            Computes the raw value format of the CAN signal
            </summary>
            <param name="signalName">Name of the signal</param>
            <param name="rawValueSubToken">Token containing the raw value</param>
            <param name="sigValTypes">List of entries with data of all SIG_VALTYPE tags</param>
            <param name="messageData">Data of the current CAN message</param>
            <returns>Computed raw value format of type <see cref="T:Hbm.Api.SensorDB.Enums.RawValueFormat"/></returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CanImportDataManager.ReadMessageData(System.String[])">
            <summary>
            Creates a new <see cref="T:Hbm.Api.SensorDB.Dal.CanImportDataManager.CANMessageData"/> instance
            and maps the data of a single CAN message line (given by the token list).  
            </summary>
            <param name="mainTokens">CAN Message line, separated into indivdual tokens</param>
            <returns>Instance of <see cref="T:Hbm.Api.SensorDB.Dal.CanImportDataManager.CANMessageData"/>, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CanImportDataManager.ConvertUnit(System.String)">
            <summary>
            Converts the unit of a CAN signal into a readable sign (in case of ASCII encoding)
            </summary>
            <param name="input">Input string</param>
            <returns>Converted unit as <see cref="T:System.String"/></returns>
            <remarks>
            This conversion was taken from the QuantumX CAN import. 
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CanImportDataManager.CreateCANDatabaseParentCategory(System.String,Hbm.Api.SensorDB.Entities.Category)">
            <summary>
            Creates a new category for the can database (using the filename part as description)
            as a child of the given root category.
            </summary>
            <param name="filename">Path and filename of the CAN database file</param>
            <param name="rootCategory">Category used as root for the CAN category</param>
            <returns>New instance of <see cref="T:Hbm.Api.SensorDB.Entities.Category"/> as a child of the given root category.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CanImportDataManager.CreateCANCategory(Hbm.Api.SensorDB.Dal.CanImportDataManager.CANMessageData,Hbm.Api.SensorDB.Entities.Category,System.Int32)">
            <summary>
            Creates a <see cref="T:Hbm.Api.SensorDB.Entities.Category"/> instance 
            and maps the data of the current CAN signal and the parent CAN database category of the import.
            </summary>
            <param name="messageData">Data of the current CAN message</param>
            <param name="canDatabaseCategory">Parent category of the CAN import</param>
            <param name="categoryPositionNo">Number of the category related to the CAN import file</param>
            <returns>New instance of <see cref="T:Hbm.Api.SensorDB.Entities.Category"/> filled with mapped data of the current CAN signal</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CanImportDataManager.CreateCANSensor(System.String[],System.Collections.Generic.List{Hbm.Api.SensorDB.Dal.CanImportDataManager.CANSigValType},Hbm.Api.SensorDB.Dal.CanImportDataManager.CANMessageData,System.Int32,Hbm.Api.SensorDB.Entities.Category,System.Boolean)">
            <summary>
            Creates a <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor"/> instance 
            and maps the data of the current CAN signal.
            </summary>
            <param name="mainTokens">Array of tokens for the current CAN signal</param>
            <param name="sigValTypes">List of entries with data of all SIG_VALTYPE tags of the file </param>
            <param name="messageData">Data of the current CAN message</param>
            <param name="sensorPositionNoInMessage">Number of the sensor in the CAN message</param>
            <param name="category">Category instance to which the new sensor belongs</param>
            <param name="useCompoundNames">If <c>true</c> then the sensor descriptions are generated by concatenating the message name and the signal name, 
            if <c>false</c> only the signal names are used.</param>
            <returns>New instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor"/> filled with mapped data of the current CAN signal</returns>
        </member>
        <member name="T:Hbm.Api.SensorDB.Dal.CategoryDataManager">
            <summary>
            Database access for categories 
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CategoryDataManager.#ctor(Hbm.Api.SensorDB.Dal.ConnectionInfo,System.String)">
            <summary>
            Creates a new instance and initializes connection info using the base class
            </summary>
            <param name="connectionInfo">Instance of connection data</param>
            <param name="logDbBaseCategory">Log context category for quicker parsing log files.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CategoryDataManager.CategoryExist(System.Int32)">
            <summary>
            Checks if the category by the given category Id exist in database.
            </summary>
            <param name="categoryId">Id of the category to check.</param>
            <returns>True if sensor exist, otherwise false.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CategoryDataManager.CategoryExist(System.Data.Common.DbConnection,System.Int32)">
            <summary>
            Checks if the category by the given category Id exist in database.
            </summary>
            <param name="conn">Open database connection.</param>
            <param name="categoryId">Id of the category to check.</param>
            <returns>True if sensor exist, otherwise false.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CategoryDataManager.GetCategory(System.Int32)">
            <summary>
            Reads the category with the specified category id from the database.
            </summary>
            <param name="categoryID">ID of the category</param>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Category"/>, or <c>null</c> if not found</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CategoryDataManager.GetCategory(System.Data.Common.DbConnection,System.Int32)">
            <summary>
            Reads the category with the specified category id from the database.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="categoryID">ID of the category</param>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Category"/>, or <c>null</c> if not found</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CategoryDataManager.GetCategoryByInternalID(System.Int32)">
            <summary>
            Reads the category with the specified internal id from the database.
            </summary>
            <param name="internalID">Internal ID of the category</param>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Category"/>, or <c>null</c> if not found</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CategoryDataManager.GetCategories">
            <summary>
            Reads all categories from the database.
            </summary>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Category"/> instances.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CategoryDataManager.GetCategories(System.Data.Common.DbConnection)">
            <summary>
            Reads all categories from the database.
            </summary>
            <param name="conn">Open database connection</param>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Category"/> instances.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CategoryDataManager.GetTranslationID(System.Int32)">
            <summary>
            Reads the translation id belonging to the given category id.
            </summary>
            <param name="categoryID">ID of the category</param>
            <returns>Translation id belonging to the category</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CategoryDataManager.InsertCategory(Hbm.Api.SensorDB.Entities.Category)">
            <summary>
            Inserts the given category into the database.
            </summary>
            <param name="category">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Category"/> to be inserted</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CategoryDataManager.UpdateCategory(Hbm.Api.SensorDB.Entities.Category)">
            <summary>
            Updates the given category in the database.
            </summary>
            <remarks>
            The properties CategoryID and TranslationID won't be changed in the database.
            </remarks>
            <param name="category">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Category"/> to be updated</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CategoryDataManager.UpdatePositionNumberOfSiblingsOnDemand(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Category,Hbm.Api.SensorDB.Entities.Category)">
            <summary>
            Updates the position of sibling categoris (only if needed).
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="beforeCategory">Instance of the sensor causing the position update for the siblings.</param>
            <param name="currentCategoryInDb">Current instance of the sensor in database.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CategoryDataManager.UpdatePositionNumber(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Category)">
            <summary>
            Updates only the position number of the given sensor in the database.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="category">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Category"/> to be updated</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CategoryDataManager.BulkInsertCategory(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Int32,System.Collections.Generic.List{Hbm.Api.SensorDB.Entities.Language},Hbm.Api.SensorDB.Entities.Category)">
            <summary>
            Insert a given category into the database for bulk imports.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="translationID">ID for inserting the category description as translation for all languages</param>
            <param name="languages">List of all available languages</param>
            <param name="category">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Category"/> to be inserted</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CategoryDataManager.DeleteCategory(System.Int32)">
            <summary>
            Deletes a category from the repository. 
            Deleting will only succeed if the given category:
            1. is not assigned as parent of other categories and
            2. has no sensors assigned
            Otherwise an exception will be raised.
            </summary>
            <param name="categoryID">ID of the category to be deleted</param>
            <remarks>
            The database model does not delete data cascading from the table translation (because of side-effects using triggers in VistaDB) 
            Therefore the translation data of the category is deleted before deleting the category.
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CategoryDataManager.DeleteCategories(System.Collections.Generic.SortedDictionary{System.Int32,System.Collections.Generic.List{System.Int32}})">
            <summary>
            Deletes categories from the repository.
            </summary>
            <param name="orderedListOfDeleteCategories">Sorted dictionary by hierarchical level of IDs of the categories to be deleted</param>
            <remarks>
            The database model does not delete data cascading from the table translation (because of side-effects using triggers in VistaDB) 
            Therefore the translation data of the category is deleted before deleting the category.
            </remarks>
            <returns>Number of categories that have been deleted.</returns>
            <exception cref="T:System.Data.DataException">Thrown if a database error occurs. For example when deleting categories which are referenced by other categories.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CategoryDataManager.GetCategory(System.Data.Common.DbConnection,System.Int32,System.Boolean)">
            <summary>
            Reads the category with the specified category id from the database.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="id">ID of the category. If <paramref name="isCategoryID"/> is <c>true</c> then this parameter contains a CategoryID, else it contains a InternalID</param>
            <param name="isCategoryID"></param>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Category"/>, or <c>null</c> if not found</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CategoryDataManager.MapDbToCategory(System.Data.Common.DbDataReader)">
            <summary>
            Maps the the current row of the data reader into a category instance.
            </summary>
            <param name="dr">Instance of the data reader</param>
            <returns>New instance of a category, filled with data from the data reader</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CategoryDataManager.InsertCategoryData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Category,System.Int32)">
            <summary>
            Insert the category data into the database table Category.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="category">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Category"/> to be inserted</param>
            <param name="translationID">ID of the translation for the category</param>
            <returns>New generated category id of the inserted category</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CategoryDataManager.DeleteCategory(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Int32)">
            <summary>
            Deletes a category from the repository. 
            Deleting will only succeed if the given category:
            1. is not assigned as parent of other categories and
            2. has no sensors assigned
            Otherwise an exception will be raised.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="categoryID">ID of the category to be deleted</param>
            <remarks>
            The database model does not delete data cascading from the table translation (because of side-effects using triggers in VistaDB) 
            Therefore the translation data of the category is deleted before deleting the category.
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.CategoryDataManager.DeleteCategories(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Collections.Generic.List{System.Int32})">
            <summary>
            Deletes categories from the database.
            </summary>
            <param name="conn">Database connection</param>
            <param name="transaction">Database transaction</param>
            <param name="categoryIds">IDs of the categories to be deleted</param>
            <remarks>
            The database model does not delete data cascading from the table translation (because of side-effects using triggers in VistaDB) 
            Therefore the translation data of the category is deleted before deleting the category.
            </remarks>
            <returns>Number of categories that have been deleted.</returns>
            <exception cref="T:System.Data.DataException">Thrown if a database error occurs. For example when deleting categories which are referenced by other categories.</exception>
        </member>
        <member name="T:Hbm.Api.SensorDB.Dal.ConnectionInfo">
            <summary>
            Encapsulates the information required for the database connection 
            and the the currently set language used for translations.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Dal.ConnectionInfo.ConnectionString">
            <summary>
            Connection string for connecting to the database. 
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Dal.ConnectionInfo.ProviderInvariantName">
            <summary>
            Provider invariant name of the database provider.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Dal.ConnectionInfo.TwoLetterISOLanguageName">
            <summary>
            Iso language name (two letter) of the current language (used for getting translations)
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Dal.Converter.TedsConverter">
            <summary>
            The class for dealing/converting with TEDS
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.HandleHbmTedsDllLoadedState">
            <summary>
            Handles the state of the HBM TEDS DLL loaded.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetParametersFromSensor(System.String,System.String,Hbm.Api.SensorDB.Entities.Sensor,System.Boolean,System.String)">
            <summary>
            Gets the TEDS parameters from sensor.
            </summary>
            <param name="chipTID">The chip tid.</param>
            <param name="sensorID">The sensor identifier.</param>
            <param name="sensor">The sensor.</param>
            <param name="isWithUserDefinedId">if set to <c>true</c> [is with user defined identifier].</param>
            <param name="channelName">Name of the channel.</param>
            <returns></returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetIdentificationSpecifics(HBM.TEDS.Data_Types.SensorParameters,System.String,System.String,Hbm.Api.SensorDB.Entities.Sensor,System.Boolean,System.String)">
            <summary>
            Gets the identification specifics.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="chipTID">The chip tid.</param>
            <param name="sensorID">The sensor identifier.</param>
            <param name="sensor">The sensor.</param>
            <param name="isWithUserDefinedId">if set to <c>true</c> [is with user defined identifier].</param>
            <param name="channelName">Name of the channel.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.ParseSerialNumber(System.String,System.String@,System.String@,System.String@)">
            <summary>
            Parses the serial number.
            </summary>
            <param name="fullSerialNumber">The full serial number.</param>
            <param name="versionLetter">The version letter.</param>
            <param name="versionNumber">The version number.</param>
            <param name="serialNumber">The serial number.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetSensorSpecifics(HBM.TEDS.Data_Types.SensorParameters,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Gets the sensor specifics.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="sensor">The sensor.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetBridgeSensorSpecifics(HBM.TEDS.Data_Types.SensorParameters,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Gets the bridge sensor specifics.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="sensor">The sensor.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetCounterSensorSpecifics(HBM.TEDS.Data_Types.SensorParameters,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Gets the counter sensor specifics.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="sensor">The sensor.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetCurrentSensorSpecifics(HBM.TEDS.Data_Types.SensorParameters,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Gets the current sensor specifics.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="sensor">The sensor.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetFrequencySensorSpecifics(HBM.TEDS.Data_Types.SensorParameters,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Gets the frequency sensor specifics.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="sensor">The sensor.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetIepeSensorSpecifics(HBM.TEDS.Data_Types.SensorParameters,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Gets the IEPE sensor specifics.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="sensor">The sensor.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetIndBridgeSensorSpecifics(HBM.TEDS.Data_Types.SensorParameters,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Gets the ind bridge sensor specifics.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="sensor">The sensor.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetIndCounterSensorSpecifics(HBM.TEDS.Data_Types.SensorParameters,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Gets the ind counter sensor specifics.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="sensor">The sensor.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetIndFrequencySensorSpecifics(HBM.TEDS.Data_Types.SensorParameters,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Gets the ind frequency sensor specifics.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="sensor">The sensor.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetIrigSensorSpecifics(HBM.TEDS.Data_Types.SensorParameters,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Gets the irig sensor specifics.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="sensor">The sensor.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetLvdtSensorSpecifics(HBM.TEDS.Data_Types.SensorParameters,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Gets the LVDT sensor specifics.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="sensor">The sensor.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetPotentiometerSensorSpecifics(HBM.TEDS.Data_Types.SensorParameters,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Gets the potentiometer sensor specifics.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="sensor">The sensor.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetPressureSensorSpecifics(HBM.TEDS.Data_Types.SensorParameters,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Gets the pressure sensor specifics.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="sensor">The sensor.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetPtSensorSpecifics(HBM.TEDS.Data_Types.SensorParameters,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Gets the pt sensor specifics.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="sensor">The sensor.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetPwmSensorSpecifics(HBM.TEDS.Data_Types.SensorParameters,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Gets the PWM sensor specifics.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="sensor">The sensor.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetResistorSensorSpecifics(HBM.TEDS.Data_Types.SensorParameters,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Gets the resistor sensor specifics.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="sensor">The sensor.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetSsiSensorSpecifics(HBM.TEDS.Data_Types.SensorParameters,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Gets the ssi sensor specifics.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="sensor">The sensor.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetThermocoupleSensorSpecifics(HBM.TEDS.Data_Types.SensorParameters,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Gets the thermocouple sensor specifics.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="sensor">The sensor.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetVoltageSensorSpecifics(HBM.TEDS.Data_Types.SensorParameters,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Gets the voltage sensor specifics.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="sensor">The sensor.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetScalingSpecifics(HBM.TEDS.Data_Types.SensorParameters,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Gets the scaling specifics.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="sensor">The sensor.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetLinTableScalingSpecifics(HBM.TEDS.Data_Types.SensorParameters,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Gets the lin table scaling specifics.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="sensor">The sensor.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetTwoPointScalingSpecifics(HBM.TEDS.Data_Types.SensorParameters,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Gets the lin table scaling specifics.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="sensor">The sensor.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetPolynomialScalingSpecifics(HBM.TEDS.Data_Types.SensorParameters,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Gets the polynomial scaling specifics.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="sensor">The sensor.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetStraingageScalingSpecifics(HBM.TEDS.Data_Types.SensorParameters,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Gets the straingage scaling specifics.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="sensor">The sensor.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetZeroSpanScalingSpecifics(HBM.TEDS.Data_Types.SensorParameters,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Gets the zero span scaling specifics.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="sensor">The sensor.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetSensorFromParameters(HBM.TEDS.Data_Types.SensorParameters)">
            <summary>
            Gets the sensor from parameters.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The converted sensor object.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.CreateNewSensor(System.String)">
            <summary>
            Creates the new sensor.
            </summary>
            <param name="sensorType">Type of the sensor.</param>
            <returns>The new sensor object.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetIdentificationSpecifics(Hbm.Api.SensorDB.Entities.Sensor,HBM.TEDS.Data_Types.SensorParameters)">
            <summary>
            Gets the identification specifics.
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.ParseSerialNumber(System.String,System.String,System.String)">
            <summary>
            Parses the serial number.
            </summary>
            <param name="versionLetter">The version letter.</param>
            <param name="versionNumber">The version number.</param>
            <param name="serialNumber">The serial number.</param>
            <returns></returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetSensorSpecifics(Hbm.Api.SensorDB.Entities.Sensor,HBM.TEDS.Data_Types.SensorParameters)">
            <summary>
            Gets the sensor specifics.
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetBridgeSensorSpecifics(Hbm.Api.SensorDB.Entities.Sensor,HBM.TEDS.Data_Types.SensorParameters)">
            <summary>
            Gets the bridge sensor specifics.
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetCounterSensorSpecifics(Hbm.Api.SensorDB.Entities.Sensor,HBM.TEDS.Data_Types.SensorParameters)">
            <summary>
            Gets the counter sensor specifics.
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetCurrentSensorSpecifics(Hbm.Api.SensorDB.Entities.Sensor,HBM.TEDS.Data_Types.SensorParameters)">
            <summary>
            Gets the current sensor specifics.
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetFrequencySensorSpecifics(Hbm.Api.SensorDB.Entities.Sensor,HBM.TEDS.Data_Types.SensorParameters)">
            <summary>
            Gets the frequency sensor specifics.
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetIepeSensorSpecifics(Hbm.Api.SensorDB.Entities.Sensor,HBM.TEDS.Data_Types.SensorParameters)">
            <summary>
            Gets the IEPE sensor specifics.
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetIndBridgeSensorSpecifics(Hbm.Api.SensorDB.Entities.Sensor,HBM.TEDS.Data_Types.SensorParameters)">
            <summary>
            Gets the ind bridge sensor specifics.
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetIndCounterSensorSpecifics(Hbm.Api.SensorDB.Entities.Sensor,HBM.TEDS.Data_Types.SensorParameters)">
            <summary>
            Gets the ind counter sensor specifics.
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetIndFrequencySensorSpecifics(Hbm.Api.SensorDB.Entities.Sensor,HBM.TEDS.Data_Types.SensorParameters)">
            <summary>
            Gets the ind frequency sensor specifics.
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetIrigSensorSpecifics(Hbm.Api.SensorDB.Entities.Sensor,HBM.TEDS.Data_Types.SensorParameters)">
            <summary>
            Gets the IRIG sensor specifics.
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetLvdtSensorSpecifics(Hbm.Api.SensorDB.Entities.Sensor,HBM.TEDS.Data_Types.SensorParameters)">
            <summary>
            Gets the LVDT sensor specifics.
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetPotentiometerSensorSpecifics(Hbm.Api.SensorDB.Entities.Sensor,HBM.TEDS.Data_Types.SensorParameters)">
            <summary>
            Gets the potentiometer sensor specifics.
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetPressureSensorSpecifics(Hbm.Api.SensorDB.Entities.Sensor,HBM.TEDS.Data_Types.SensorParameters)">
            <summary>
            Gets the pressure sensor specifics.
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetPtSensorSpecifics(Hbm.Api.SensorDB.Entities.Sensor,HBM.TEDS.Data_Types.SensorParameters)">
            <summary>
            Gets the pt sensor specifics.
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetPwmSensorSpecifics(Hbm.Api.SensorDB.Entities.Sensor,HBM.TEDS.Data_Types.SensorParameters)">
            <summary>
            Gets the PWM sensor specifics.
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetResistorSensorSpecifics(Hbm.Api.SensorDB.Entities.Sensor,HBM.TEDS.Data_Types.SensorParameters)">
            <summary>
            Gets the resistor sensor specifics.
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetSsiSensorSpecifics(Hbm.Api.SensorDB.Entities.Sensor,HBM.TEDS.Data_Types.SensorParameters)">
            <summary>
            Gets the ssi sensor specifics.
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetThermocoupleSensorSpecifics(Hbm.Api.SensorDB.Entities.Sensor,HBM.TEDS.Data_Types.SensorParameters)">
            <summary>
            Gets the thermocouple sensor specifics.
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetVoltageSensorSpecifics(Hbm.Api.SensorDB.Entities.Sensor,HBM.TEDS.Data_Types.SensorParameters)">
            <summary>
            Gets the voltage sensor specifics.
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetScalingSpecifics(Hbm.Api.SensorDB.Entities.Sensor,HBM.TEDS.Data_Types.SensorParameters)">
            <summary>
            Gets the scaling specifics.
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetLinTableScalingSpecifics(Hbm.Api.SensorDB.Entities.Sensor,HBM.TEDS.Data_Types.SensorParameters)">
            <summary>
            Gets the lin table scaling specifics.
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetPolynomialScalingSpecifics(Hbm.Api.SensorDB.Entities.Sensor,HBM.TEDS.Data_Types.SensorParameters)">
            <summary>
            Gets the polynomial scaling specifics.
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetStraingageScalingSpecifics(Hbm.Api.SensorDB.Entities.Sensor,HBM.TEDS.Data_Types.SensorParameters)">
            <summary>
            Gets the straingage scaling specifics.
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetZeroSpanScalingSpecifics(Hbm.Api.SensorDB.Entities.Sensor,HBM.TEDS.Data_Types.SensorParameters)">
            <summary>
            Gets the zero span scaling specifics.
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetBinaryTedsImage(System.String,System.String,Hbm.Api.SensorDB.Entities.Sensor,System.Boolean,System.String)">
            <summary>
            Gets the binary TEDS image.
            </summary>
            <param name="chipTID">The chip TID.</param>
            <param name="sensorID">The sensor ID.</param>
            <param name="sensor">The sensor.</param>
            <param name="isWithUserDefinedId">If set to <c>true</c> set with user defined ID.</param>
            <param name="channelName">Name of the channel (channel-name template).<para />
                                      Set to '\0' to produce an empty channel-name template.<para />
                                      Set to <c>null</c> to have no channel-name template.</param>
            <returns>The binary TEDS image.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.UpdateBinaryTedsImage(System.String,System.Byte[],System.String,System.String,System.String,System.Double,System.Double)">
            <summary>
            Updates the binary TEDS image with more information.
            </summary>
            <param name="chipTID">The chip TID.</param>
            <param name="binTeds">The binary TEDS image to be updated.</param>
            <param name="channelName">Name of the channel (channel-name template).<para />
                                      Set to <c>'\0'</c> to produce an empty channel-name template.</param>
            <param name="outputUnit">The output unit.</param>
            <param name="filterCharacteristics">The filter characteristics (set to <c>"UNKNOWN"</c> for no template).</param>
            <param name="signalBandwidth">The signal bandwidth (set to <c>0</c> to turn filter off in amplifier).</param>
            <param name="zeroCompensation">The zero compensation value (set to <c>double.NaN</c> for no template).</param>
            <returns>The binary TEDS image.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.UpdateBinaryTedsImage(System.String,System.Byte[],System.String,System.Double,System.Double)">
            <summary>
            Updates the binary TEDS image with more information.
            </summary>
            <param name="chipTID">The chip TID.</param>
            <param name="binTeds">The binary TEDS image to be updated.</param>
            <param name="filterCharacteristics">The filter characteristics (set to <c>"UNKNOWN"</c> for no template).</param>
            <param name="signalBandwidth">The signal bandwidth (set to <c>0</c> to turn filter off in amplifier).</param>
            <param name="zeroCompensation">The zero compensation value (set to <c>double.NaN</c> for no template).</param>
            <returns>The binary TEDS image.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetSensor(System.Byte[],System.String)">
            <summary>
            Gets the sensor converted from given binary TEDS data.
            </summary>
            <param name="binTeds">The binary TEDS image.</param>
            <param name="tid">The TID.</param>
            <returns>The sensor or <c>null</c> if the sensor type is empty (no sensor template) or unknown.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetCompatibleUnits(System.Int32)">
            <summary>
            Gets the compatible units for the given ID.
            </summary>
            <param name="unitId">The unit ID.</param>
            <returns>The compatible units.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetUnitConversionParameters(System.Int32,System.Int32,System.Double@,System.Double@)">
            <summary>
            Gets the unit conversion parameters.
            </summary>
            <param name="unitIdFrom">The source unit IDS code.</param>
            <param name="unitIdTo">The destination unit IDS code.</param>
            <param name="offset">The resulting offset for the conversion.</param>
            <param name="factor">The resulting factor for the conversion.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.IsManufacturerDefined(System.String)">
            <summary>
            Determines whether the specified manufacturer name is defined.
            </summary>
            <param name="manufacturerName">Name of the manufacturer.</param>
            <returns><c>true</c> when the manufacturer is defined.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.IsModelDefined(System.String)">
            <summary>
            Determines whether the specified model name is defined.
            </summary>
            <param name="modelName">Name of the model.</param>
            <returns><c>true</c> when the model is defined.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.LoadBinTeds(System.String,System.Byte[])">
            <summary>
            Loads the bin TEDS.
            </summary>
            <param name="sensorID">The sensor identifier.</param>
            <param name="binTeds">The bin TEDS.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.LoadBinTeds(System.String)">
            <summary>
            Loads the bin TEDS.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>The binary TEDS image.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.SaveBinTeds(System.String)">
            <summary>
            Saves the bin TEDS.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetManufacturerList">
            <summary>
            Gets the TEDS consortium manufacturer list
            </summary>
            <returns>List of manufacturers</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Converter.TedsConverter.GetModelList(System.String)">
            <summary>
            Gets the TEDS consortium model list for a specified manufacturer
            </summary>
            <param name="manufacturer">The manufacturer from TEDS manufacturer list.</param>
            <returns>List of models</returns>
        </member>
        <member name="T:Hbm.Api.SensorDB.Dal.DataManagerBase">
            <summary>
            Base class for data managers of the data access layer.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.DataManagerBase.#ctor(Hbm.Api.SensorDB.Dal.ConnectionInfo,System.String)">
            <summary>
            Creates a new instance and initializes data.
            </summary>
            <param name="connectionInfo">Instance of connection data</param>
            <param name="logDbBaseCategory">Log context category for quicker parsing log files.</param>
        </member>
        <member name="P:Hbm.Api.SensorDB.Dal.DataManagerBase.TwoLetterISOLanguageName">
            <summary>
            Iso language name (two letter) of the current language (used for getting translations)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Dal.DataManagerBase.IsVistaDBProviderUsed">
            <summary>
            Checks if the VistaDB database provider is used.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.DataManagerBase.ConvertToEnum``1(System.Int32)">
            <summary>
            Converts an int value into an enumeration item with the same value.
            </summary>
            <typeparam name="T">Enumeration to be converted to</typeparam>
            <param name="enumValue">Value to convert</param>
            <returns>Enumeration item according to the value</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.DataManagerBase.CreateDbConnection">
            <summary>
            Creates a vendor independant database connection instance.
            </summary>
            <returns>Vendor independant database connection</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.DataManagerBase.CreateDbConnection(System.String,System.String)">
            <summary>
            Creates a vendor independant database connection instance using the database factory provider
            and sets the connection string
            </summary>
            <returns>Vendor independant database connection</returns>
        </member>
        <member name="T:Hbm.Api.SensorDB.Dal.SensorDBDataManager">
            <summary>
            Central facade of the data access layer of the sensor db api.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.#ctor(Hbm.Api.SensorDB.Dal.ConnectionInfo,System.String)">
            <summary>
            Creates a new instance and initializes data.
            </summary>
            <param name="connectionInfo">Instance of connection data</param>
            <param name="logDbBaseCategory">Log context category for the this db instance.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.CategoryExist(System.Int32)">
            <summary>
            Checks if the category by the given category Id exist in database.
            </summary>
            <param name="categoryId">Id of the category to check.</param>
            <returns>True if sensor exist, otherwise false.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.GetCategory(System.Int32)">
            <summary>
            Reads the category with the specified category id from the database.
            </summary>
            <param name="categoryID">ID of the category</param>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Category"/>, or <c>null</c> if not found</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.GetCategoryByInternalID(System.Int32)">
            <summary>
            Reads the category with the specified internal id from the database.
            </summary>
            <param name="internalID">Internal ID of the category</param>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Category"/>, or <c>null</c> if not found</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.GetCategories">
            <summary>
            Reads all categories from the database.
            </summary>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Category"/> instances.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.InsertCategory(Hbm.Api.SensorDB.Entities.Category)">
            <summary>
            Inserts the given category into the database.
            </summary>
            <param name="category">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Category"/> to be inserted</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.UpdateCategory(Hbm.Api.SensorDB.Entities.Category)">
            <summary>
            Updates the given category in the database.
            </summary>
            <param name="category">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Category"/> to be updated</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.DeleteCategory(System.Int32)">
            <summary>
            Deletes the category with the given category id from the database.
            This can only succeed for categories without child categories und child sensors.
            </summary>
            <param name="categoryID">ID of the category to be deleted</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.DeleteCategories(System.Collections.Generic.SortedDictionary{System.Int32,System.Collections.Generic.List{System.Int32}})">
            <summary>
            Deletes the categories with the given categories id from the database.
            This can only succeed for categories without child categories and child sensors.
            </summary>
            <param name="orderedListOfDeleteCategories">Sorted dictionary by hierarchical level of IDs of the categories to be deleted</param>
            <returns>Number of categories that have been deleted.</returns>
            <exception cref="T:System.Data.DataException">Thrown if a database error occurs. For example when deleting categories which are referenced by other categories.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.SensorExist(System.Int32)">
            <summary>
            Checks if the sensor by the given sensor Id exist in database.
            </summary>
            <param name="sensorId">Id of the sensor to check.</param>
            <returns>True if sensor exist, otherwise false.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.GetSensor(System.Int32)">
            <summary>
            Reads the sensor with the specified sensor id from the database.
            </summary>
            <param name="sensorID">ID of the sensor</param>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/>, or <c>null</c> if not found</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.GetSensor(System.String)">
            <summary>
            Reads the sensor with the specified unique name from the database.
            </summary>
            <param name="uniqueName">UniqueName of the sensor</param>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/>, or <c>null</c> if not found</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.GetSensors">
            <summary>
            Reads all sensors from the database.
            </summary>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> instances.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.GetSensors(Hbm.Api.SensorDB.Entities.Category)">
            <summary>
            Reads all sensors of a given category from the database.
            </summary>
            <param name="category">Target category of the sensor read.</param>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> instances where the <paramref name="category"/> is the parent.</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.GetSensorsBase">
            <summary>
            Returns a list of all sensors with their id, name and description from the database.
            If you want to get a list of all sensors with all sensordata (specific sensor data, etc.)
            use <see cref="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.GetSensors"/> instead.
            </summary>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> instances.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.HasChangedInDB(Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Checks, if the given sensor instance is different to the sensor with the same SensorID in the database.
            The sensor has changes if the <c>LastModifiedDate</c> property is different.
            </summary>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> to be compared to the database</param>
            <returns>Returns <c>true</c> if the sensor has changes, else <c>false</c>. 
            Returns <c>false</c> if no sensor instance is given. 
            Returns <c>true</c> if the sensor instance was not found in the database (new sensor)</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.InsertSensor(Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Inserts the given sensor into the database.
            </summary>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> to be inserted</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.UpdateSensor(Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Updates an existing sensor in the database.
            </summary>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> to be updated</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.UpdateCategoryOfSensors(System.Collections.Generic.List{Hbm.Api.SensorDB.Entities.Sensor})">
            <summary>
            Updates the parent category for the given sensors.
            Note: Only the category property is applied in database. If you want to update the whole sensor properties refer to <see cref="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.UpdateSensor(Hbm.Api.SensorDB.Entities.Sensor)"/>.
            </summary>
            <param name="sensors">List of sensors to apply category updates.</param>
            <exception cref="T:System.Data.DataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.DeleteSensor(System.Int32)">
            <summary>
            Deletes the sensor with the given sensor id from the database.
            </summary>
            <param name="sensorID">ID of the sensor to be deleted</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.DeleteSensors(System.Collections.Generic.List{System.Int32})">
            <summary>
            Delete the sensors with the given sensor ids from the database.
            </summary>
            <param name="sensorIds">ID of the sensor to be deleted</param>
            <returns>Number of affected rows.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.GetDescriptor(System.Int32)">
            <summary>
            Reads the descriptor with the specified descriptor id from the database.
            </summary>
            <param name="descriptorID">ID of the descriptor</param>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Descriptor"/>, or <c>null</c> if not found</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.GetAttachment(System.Int32)">
            <summary>
            Reads the attachment according to the specified descriptor id from the database.
            </summary>
            <param name="descriptorID">ID of the descriptor</param>
            <returns>Attachment as <c>byte[]</c>, or <c>null</c> if not found</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.GetDescriptors">
            <summary>
            Reads all descriptors from the database.
            </summary>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Descriptor"/> instances.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.GetDescriptors(Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Reads the descriptors for the specified sensor from the database.
            </summary>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> for which the descriptors are searched.</param>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Descriptor"/> instances for the sensor.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.InsertDescriptor(Hbm.Api.SensorDB.Entities.Descriptor,System.Byte[])">
            <summary>
            Inserts the given descriptor with the given attachment (if available) into the database.
            </summary>
            <param name="descriptor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Descriptor"/> to be inserted.</param>
            <param name="attachment">Attachment as <c>byte[]</c> to be inserted with the descriptor</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.UpdateDescriptor(Hbm.Api.SensorDB.Entities.Descriptor,System.Byte[])">
            <summary>
            Updates the given descriptor with the given attachment (if available) into the database.
            </summary>
            <param name="descriptor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Descriptor"/> to be updated.</param>
            <param name="attachment">Attachment as <c>byte[]</c> to be updated with the descriptor</param>
            <remarks>
            If the given attachment is <c>null</c> then the existing attachment is not changed.
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.DeleteDescriptor(System.Int32)">
            <summary>
            Deletes the descriptor (including the attachment) with the given descriptor id from the database.
            </summary>
            <param name="descriptorID">ID of the descriptor to be deleted</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.GetThermoCoupleTypes">
            <summary>
            Reads all thermocouple types from the database.
            </summary>
            <returns>List of strings with all thermocouple types.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.InsertThermoCoupleType(System.String)">
            <summary>
            Inserts the given thermocouple type in the database. 
            Instead of updating an existing thermocouple types, a delete of the existing type 
            and an insert of a new one is required.
            </summary>
            <param name="thermoCoupleType">New thermo couple type to be inserted.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.DeleteThermoCoupleType(System.String)">
            <summary>
            Deletes the given thermocouple type from the database.
            </summary>
            <param name="thermoCoupleType">Thermocouple type to be deleted.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.GetLanguages">
            <summary>
            Reads all languages from the database.
            </summary>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Language"/> instances.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.GetFallbackLanguage">
            <summary>
            Reads the fallback language from the database.
            </summary>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Language"/>, or <c>null</c> if not found</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.SetFallbackLanguage(Hbm.Api.SensorDB.Entities.Language)">
            <summary>
            Sets the given language as the fallback language and removes the flag from other languages in the database.
            </summary>
            <param name="fallbackLanguage">Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Language"/> to be set as fallback language</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.InsertLanguage(Hbm.Api.SensorDB.Entities.Language)">
            <summary>
            Inserts the given language into the database. 
            All translations of the fallback language are copied and inserted for this new language.
            </summary>
            <param name="language">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Language"/> to be inserted.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.UpdateLanguage(Hbm.Api.SensorDB.Entities.Language)">
            <summary>
            Updates the description of the given language.
            </summary>
            <param name="language">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Language"/> to be updated.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.DeleteLanguage(System.String)">
            <summary>
            Deletes the language with the given iso language name (two letter) from the database.
            </summary>
            <param name="twoLetterISOLanguageName">Iso language name (two letter) of the language to be deleted.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.GetTranslations(Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Reads the translations for the specified sensor from the database.
            </summary>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> for which the translations are searched.</param>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Translation"/> instances for the sensor.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.GetTranslations(Hbm.Api.SensorDB.Entities.Category)">
            <summary>
            Reads the translations for the specified category from the database.
            </summary>
            <param name="category">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Category"/> for which the translations are searched.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.UpdateTranslation(Hbm.Api.SensorDB.Entities.Translation)">
            <summary>
            Updates the given translation in the database.
            </summary>
            <param name="translation">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Translation"/> to be updated.</param>
            <remarks>
            This method only updates translations. 
            Inserts of translations are indirectly done by inserting a new sensor or a new category. 
            Therefore there is no need for a method to explicitly insert a new translation.
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.DeleteOrphanTranslations">
            <summary>
            Deletes all orphan entries from the table "Translation".
            Orphans may occur if database records (cateogories or sensors) are manually deleted from the database.
            Because of restrictions in VistaDB no triggers are used to preserve automatic data integrity between 
            categories and their translations and sensors and their translations.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.GetVersionInfo">
            <summary>
            Reads the version info of the sensor db from the database.
            </summary>
            <returns>Version info</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.SaveVersion(Hbm.Api.SensorDB.Entities.VersionInfo)">
            <summary>
            Saves the version info of the sensor db to the database.
            </summary>
            <param name="versionInfo">Version info to be stored.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDBDataManager.ImportCANDatabase(System.String,Hbm.Api.SensorDB.Entities.Category,System.Boolean)">
            <summary>
            Imports a CAN database from the given file name.
            </summary>
            <param name="filename">Path and filename of the CAN database</param>
            <param name="rootCategory">Root category of the imported data</param>
            <param name="useCompoundNames">Flag, if compound names should be generated for sensor descriptions</param>
        </member>
        <member name="T:Hbm.Api.SensorDB.Dal.Utils.DbCommandExtension">
            <summary>
            Extension class for extending the DbCommand class
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Utils.DbCommandExtension.AddParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Object)">
            <summary>
            Adds a new parameter toe the database provider independent command instance (DbCommand)
            </summary>
            <param name="cmd">Instance of <see cref="T:System.Data.Common.DbCommand"/></param>
            <param name="name">Name of the parameter</param>
            <param name="dbType">Type in the database for the parameter</param>
            <param name="value">Value of the parameter</param>
            <returns>value of type <c>int</c> which indicates if the parameter was added correctly (>0) or not (=0)</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Utils.DbCommandExtension.GetDebugCommandString(System.Data.Common.DbCommand)">
            <summary>
            Builds an readable command string including parameter translation.
            </summary>
            <param name="cmd">The command to be translated.</param>
            <returns>Readable command string</returns>
        </member>
        <member name="T:Hbm.Api.SensorDB.Dal.Utils.ObjectExtension">
            <summary>
            Extension class for extending the Object class for simplifying database access
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Utils.ObjectExtension.ToNullIfDBNull(System.Object)">
            <summary>
            Converts <c>System.DBNull.Value</c> to <c>null</c>, otherwise retrieves the unchanged object 
            </summary>
            <param name="obj">Object to be converted</param>
            <returns>Unchanged object, or <c>null</c></returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Utils.ObjectExtension.ToDBNullIfNull(System.Object)">
            <summary>
            Converts <c>null</c> to <c>System.DBNull.Value</c>, otherwise retrieves the unchanged object 
            </summary>
            <param name="obj">Object to be converted</param>
            <returns>Unchanged object, or <c>DBNull.Value</c></returns>
        </member>
        <member name="T:Hbm.Api.SensorDB.Dal.Utils.StringExtension">
            <summary>
            Extension class for extending the String class
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Utils.StringExtension.FullTrim(System.String)">
            <summary>
            Removes multiple spaces from the current string 
            by replacing them with a single space 
            and removes all spaces at the beginning an the end of the string.
            </summary>
            <param name="inputStr">Current string to be trimmed</param>
            <returns>Trimmed string</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.Utils.StringExtension.Val(System.String)">
            <summary>
            Emulation of the VB6 Val function.
            Converts a string into a double value, ignoring spaces and following nonnumeric characters.
            All numeric literals (including '.', '+', '-', 'e' and 'E') are used for converion until the first
            nonnumerical character is reached.
            </summary>
            <param name="inputStr">Input string to be converted</param>
            <returns>Converted value. An Exception is thrown, if the conversion is not possible</returns>
        </member>
        <member name="T:Hbm.Api.SensorDB.Dal.DalConstants">
            <summary>
            Constants for the data access layer
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Dal.DalConstants.VISTADB_PROVIDER_INVARIANT_NAME">
            <summary>
            Invariant provider name for VistaDB
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Dal.DalConstants.NOT_TRANSLATED">
            <summary>
            Standard output for descriptions without available translation
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Dal.TranslationDataManager">
            <summary>
            Database access for languages and translations.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.TranslationDataManager.#ctor(Hbm.Api.SensorDB.Dal.ConnectionInfo,System.String)">
            <summary>
            Creates a new instance and initializes connection info using the base class
            </summary>
            <param name="connectionInfo">Instance of connection data</param>
            <param name="logDbBaseCategory">Log context category for quicker parsing log files.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.TranslationDataManager.GetLanguages">
            <summary>
            Reads all languages from the database.
            </summary>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Language"/> instances.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.TranslationDataManager.GetLanguages(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Reads all languages from the database, using an existing connection.
            </summary>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Language"/> instances.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.TranslationDataManager.GetFallbackLanguage">
            <summary>
            Reads the fallback language from the database.
            </summary>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Language"/>, or <c>null</c> if not found</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.TranslationDataManager.SetFallbackLanguage(Hbm.Api.SensorDB.Entities.Language)">
            <summary>
            Sets the given language as the fallback language and removes the flag from other languages in the database.
            </summary>
            <param name="fallbackLanguage">Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Language"/> to be set as fallback language</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.TranslationDataManager.InsertLanguage(Hbm.Api.SensorDB.Entities.Language)">
            <summary>
            Inserts the given language into the database. 
            All translations of the fallback language are copied and inserted for this new language.
            </summary>
            <param name="language">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Language"/> to be inserted.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.TranslationDataManager.UpdateLanguage(Hbm.Api.SensorDB.Entities.Language)">
            <summary>
            Updates the description of the given language.
            </summary>
            <param name="language">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Language"/> to be updated.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.TranslationDataManager.DeleteLanguage(System.String)">
            <summary>
            Deletes the language with the given iso language name (two letter) from the database.
            </summary>
            <param name="twoLetterISOLanguageName">Iso language name (two letter) of the language to be deleted.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.TranslationDataManager.GetTranslations(System.Int32)">
            <summary>
            Reads translations for the specified translation id from the database.
            </summary>
            <param name="translationID">TranslationID for which the translations are searched.</param>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Translation"/> instances.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.TranslationDataManager.GetTranslations(Hbm.Api.SensorDB.Entities.Language)">
            <summary>
            Reads all translations for the specified language from the database.
            </summary>
            <param name="language">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Language"/> for which the translations are searched.</param>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Translation"/> instances.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.TranslationDataManager.InsertTranslations(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.String)">
            <summary>
            Inserts the given description for all languages in the translation table.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="description">Description, stored for all languages</param>
            <returns>Translation id of the inserted translation records</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.TranslationDataManager.InsertTranslations(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Int32,System.Collections.Generic.List{Hbm.Api.SensorDB.Entities.Language},System.String)">
            <summary>
            Inserts the given description for the given translation id and languages in the translation table.
            </summary>
            <param name="conn"></param>
            <param name="transaction"></param>
            <param name="translationID"></param>
            <param name="languages"></param>
            <param name="description"></param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.TranslationDataManager.UpdateTranslation(Hbm.Api.SensorDB.Entities.Translation)">
            <summary>
            Updates the given translation in the database.
            </summary>
            <param name="translation">Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Translation"/> to be updated</param>
            <remarks>
            This method only updates translations. 
            Inserts of translations are indirectly done by inserting a new sensor or a new category. 
            Therefore there is no need for a method to explicitly insert a new translation.
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.TranslationDataManager.UpdateTranslation(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Translation)">
            <summary>
            Updates the given translation in the database, using the current database transaction.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="translation">Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Translation"/> to be updated</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.TranslationDataManager.DeleteOrphanTranslations">
            <summary>
            Deletes all orphan entries from the table "Translation".
            Orphans may occur if database records (cateogories or sensors) are manually deleted from the database.
            Because of restrictions in VistaDB no triggers are used to preserve automatic data integrity between 
            categories and their translations and sensors and their translations.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.TranslationDataManager.FindNewTranslationID(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Find next new (unused) TranslationID for in the table Tranlation. 
            This is NOT appropriate for inserting in a multi user database environment!
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <returns>Highest unused TranslationID</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.TranslationDataManager.MapDbToLanguage(System.Data.Common.DbConnection,System.Data.Common.DbDataReader)">
            <summary>
            Maps the database fields into a language object
            </summary>
            <param name="conn">Open database connection</param>
            <param name="dr">Current data reader</param>
            <returns>Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Language"/>, filled with data from the data reader</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.TranslationDataManager.MapDbToTranslation(System.Data.Common.DbConnection,System.Data.Common.DbDataReader)">
            <summary>
            Maps the database fields into a translation object
            </summary>
            <param name="conn">Open database connection</param>
            <param name="dr">Current data reader</param>
            <returns>Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Translation"/>, filled with data from the data reader</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.TranslationDataManager.CopyTranslations(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Language,System.Collections.Generic.List{Hbm.Api.SensorDB.Entities.Translation})">
            <summary>
            Copies all existing translations of the given translations list to the given targetlanguage 
            and inserts them into the database. 
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="targetLanguage">Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Language"/> as target language</param>
            <param name="translations">List of all translations to be copied to the target language and inserted to the database</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.TranslationDataManager.InsertTranslationData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Translation)">
            <summary>
            Inserts the given translation into the database.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="translation">Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Translation"/> to be inserted</param>
        </member>
        <member name="T:Hbm.Api.SensorDB.Dal.ScalingDataManager">
            <summary>
            Database access for scaling information
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.#ctor(Hbm.Api.SensorDB.Dal.ConnectionInfo,System.String)">
            <summary>
            Creates a new instance and initializes connection info using the base class
            </summary>
            <param name="connectionInfo">Instance of connection data</param>
            <param name="logDbBaseCategory">Log context category for quicker parsing log files.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.GetScaling(System.Data.Common.DbConnection,System.Int32)">
            <summary>
            Read a scaling from the repository for a specified sensor
            </summary>
            <param name="conn">Open database connection</param>
            <param name="sensorID">Id of the sensor</param>
            <returns>Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Scaling"/> which includes all scaling data for the sensor</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.GetScalings(System.Data.Common.DbConnection)">
            <summary>
            Reads all scalings (common and concrete scaling data) from the database into a dictionary.
            </summary>
            <param name="conn">Open database connection</param>
            <returns>Dictionary with the scaling id as key and the scaling instance as value</returns>
            <remarks>
            This method is implemented because of performance issues with VistaDB
            and is used for reading all sensors from the database.
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.InsertScalingData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Int32,Hbm.Api.SensorDB.Entities.Scaling)">
            <summary>
            Inserts all scaling data for a sensor into the repository 
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current transaction</param>
            <param name="sensorID">Id of the sensor</param>
            <param name="scaling">Scaling data of the sensor</param>
            <returns>Scaling id of the inserted database row</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.UpdateScalingData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Int32,Hbm.Api.SensorDB.Entities.Scaling)">
            <summary>
            Updates all scaling data for a sensor in the repository 
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current transaction</param>
            <param name="sensorID">Id of the sensor</param>
            <param name="scaling">Scaling data of the sensor</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.FillConcreteScalingData(System.Data.Common.DbConnection,Hbm.Api.SensorDB.Entities.Scaling)">
            <summary>
            Reads and fills concrete scaling data into the given scaling instance.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="scaling">Scaling instance with common scaling data of the sensor</param>
            <returns>Scaling instance, filled with concrete scaling data</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.FillConcreteScalingData(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{Hbm.Api.SensorDB.Entities.Scalings.ScalingPoint}},System.Collections.Generic.Dictionary{System.Int32,Hbm.Api.SensorDB.Entities.Scalings.PolynomialScaling},System.Collections.Generic.Dictionary{System.Int32,Hbm.Api.SensorDB.Entities.Scalings.GageFactorScaling},System.Collections.Generic.Dictionary{System.Int32,Hbm.Api.SensorDB.Entities.Scalings.CanBusScaling},Hbm.Api.SensorDB.Entities.Scaling)">
            <summary>
            Fills concrete scaling data into the given scaling instance.
            The concrete scaling data retrieved from the given dictionaries.
            </summary>
            <param name="pointScalings">Dictionary, containing all point scalings</param>
            <param name="polynomialScalings">Dictionary, containing of all polynomial scalings</param>
            <param name="gageScalings">Dictionary, containing of all gage factor scalings</param>
            <param name="canbusScalings">Dictionary, containing of all canbus scalings</param>
            <param name="scaling">Scaling instance with common scaling data of the sensor</param>
            <returns>Scaling instance, filled with concrete scaling data</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.FillPointScalingData(System.Data.Common.DbConnection,Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase)">
            <summary>
            Reads the data for a point scaling from the repository to the given scaling instance.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="scaling">Instance of PointScalingBase</param>
            <returns>Scaling instance, filled with point scaling data</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.GetPointScalings(System.Data.Common.DbConnection)">
            <summary>
            Read all scaling points for all scalings. 
            </summary>
            <param name="conn">Open database connection</param>
            <returns>Dictionary with the scaling id as key and all scaling points for this scaling id as values.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.FillPolynomialScalingData(System.Data.Common.DbConnection,Hbm.Api.SensorDB.Entities.Scalings.PolynomialScaling)">
            <summary>
            Reads the data for a polynomial scaling from the repository into the given scaling.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="scaling">Instance of PolynomialScaling</param>
            <returns>Scaling instance, filled with polynomial scaling data</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.GetPolynomialScalings(System.Data.Common.DbConnection)">
            <summary>
            Read all polynomial scalings for all scalings. 
            </summary>
            <param name="conn">Open database connection</param>
            <returns>Dictionary with the scaling id as key and the polynomial scaling for this scaling id.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.GetGageFactorScalings(System.Data.Common.DbConnection)">
            <summary>
            Read all gage factor scalings for all scalings. 
            </summary>
            <param name="conn">Open database connection</param>
            <returns>Dictionary with the scaling id as key and the gage factor scaling instance as value</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.GetCanbusScalings(System.Data.Common.DbConnection)">
            <summary>
            Read all canbus scalings for all scalings. 
            </summary>
            <param name="conn">Open database connection</param>
            <returns>Dictionary with the scaling id as key and the canbus scaling instance as value</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.FillGageScalingData(System.Data.Common.DbConnection,Hbm.Api.SensorDB.Entities.Scalings.GageFactorScaling)">
            <summary>
            Reads the data for a gage factor scaling from the repository into the given scaling.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="scaling">Instance of PolynomialScaling</param>
            <returns>Scaling instance, filled with gage factor scaling data</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.FillCanbusScalingData(System.Data.Common.DbConnection,Hbm.Api.SensorDB.Entities.Scalings.CanBusScaling)">
            <summary>
            Reads the data for a canbus scaling from the repository into the given scaling.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="scaling">Instance of CanBusScaling</param>
            <exception cref="T:System.ArgumentNullException">scaling</exception>
            <exception cref="T:System.Data.DataException"></exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.GetScalingID(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Int32)">
            <summary>
            Gets the ScalingID of the scaling according to the given sensor id.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="sensorID">ID of the sensor</param>
            <returns>ID of the scaling according to the sensor</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.MapDbToCommonScaling(System.Data.Common.DbDataReader)">
            <summary>
            Maps the database fields into a scaling object
            </summary>
            <param name="dr">Current data reader</param>
            <returns>Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Scaling"/></returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.MapDbToScalingPoint(System.Data.Common.DbDataReader)">
            <summary>
            Maps the database fields into a scaling point object
            </summary>
            <param name="dr">Current data reader</param>
            <returns>One scaling point, filled with data from the data reader</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.MapDbToGageFactorScalingData(System.Data.Common.DbDataReader,Hbm.Api.SensorDB.Entities.Scalings.GageFactorScaling)">
            <summary>
            Maps the database fields into the given gage factor scaling instance
            </summary>
            <param name="dr">Current data reader</param>
            <param name="scaling">Instance of GageFactorScaling to be filled</param>
            <returns>GageFactorScaling instance, filled with data from the data reader</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.MapDbToCanbusScalingData(System.Data.Common.DbDataReader,Hbm.Api.SensorDB.Entities.Scalings.CanBusScaling)">
            <summary>
            Maps the database fields into the given canbus scaling instance
            </summary>
            <param name="dr">Current data reader</param>
            <param name="scaling">Instance of CanbusScaling to be filled</param>
            <returns>CanbusScaling instance, filled with data from the data reader</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.MapGageFactorScalingData(Hbm.Api.SensorDB.Entities.Scalings.GageFactorScaling,System.Decimal,System.Decimal)">
            <summary>
            Maps gage factor scaling data into the given scaling instance
            </summary>
            <param name="scaling">Instance of GageFactorScaling to be filled</param>
            <param name="kFactor">GageFactor </param>
            <param name="bridgeFactor">BridgeFactor</param>
            <returns>GageFactorScaling instance, filled with data from the given parameters</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.MapCanbusScalingData(Hbm.Api.SensorDB.Entities.Scalings.CanBusScaling,System.Decimal,System.Decimal)">
            <summary>
            Maps CAN Bus scaling data into the given scaling instance
            </summary>
            <param name="scaling">Instance of CanbusScaling to be filled</param>
            <param name="scalingFactor">ScalingFactor</param>
            <param name="offset">Offset</param>
            <returns>GageFactorScaling instance, filled with data from the given parameters</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.MapDbToPolynomialScaling(System.Data.Common.DbDataReader,Hbm.Api.SensorDB.Entities.Scalings.PolynomialScaling,System.Boolean@)">
            <summary>
            Maps the database fields into the given polynomial scaling instance (including its segments with their depending polynomial terms)
            </summary>
            <param name="dr">Current data reader</param>
            <param name="polynomialScaling">Instance of PolynomialScaling to be filled</param>
            <param name="hasMoreData">Indicates if more data (for other polynomial scalings) is present in the data reader result (Out parameter)</param>
            <returns>PolynomialScaling instance, filled with data from the data reader</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.InsertCommonScalingData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Int32,Hbm.Api.SensorDB.Entities.Scaling)">
            <summary>
            Inserts the common scaling data for a sensor into the table Scaling 
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="sensorID">Id of the sensor</param>
            <param name="scaling">Scaling data of the sensor</param>
            <returns>Scaling id of the inserted database row</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.InsertConcreteScalingData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Scaling)">
            <summary>
            Inserts the concrete scaling data into the proper table according to the scaling type of the given scaling.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="scaling">Scaling data of the sensor</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.InsertPointScalingData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase)">
            <summary>
            Inserts the concrete scaling data for a point scaling.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="scaling">Scaling data of the sensor</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.InsertPointScalingPointData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Int32,System.Int32,Hbm.Api.SensorDB.Entities.Scalings.ScalingPoint)">
            <summary>
            Inserts the data for one scaling point for the given scaling id into the table PointScaling.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Active database transaction</param>
            <param name="scalingID">ID of the scaling</param>
            <param name="positionNo">PositionNo to store</param>
            <param name="point">ScalingPoint to store</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.InsertPolynomialScalingData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Scalings.PolynomialScaling)">
            <summary>
            Inserts the concrete scaling data for a polynomial scaling.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="scaling">Polynomial scaling data of the sensor</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.InsertPolynomialScalingSegmentData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Int32,System.Int32,System.Decimal,Hbm.Api.SensorDB.Entities.Scalings.PolynomialSegment)">
            <summary>
            Inserts the concrete scaling data for a polynomial scaling.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="scalingID">ID of the scaling</param>
            <param name="segmentNo">Number of the segment</param>
            <param name="maxElectricalRange">Maximal electrical range of the polynomial scaling (stored in each segment)</param>
            <param name="polynomialSegment">Polynomial segment to store</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.InsertPolynomialScalingTermData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Int32,System.Int32,Hbm.Api.SensorDB.Entities.Scalings.PolynomialTerm)">
            <summary>
            Inserts the data for one polynomial term for the given scaling id into the table PolynomialScaling.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="scalingID">ID of the scaling</param>
            <param name="segmentNo">Number of the segment</param>
            <param name="polynomialTerm">Polynomial term to store</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.InsertGageFactorScalingData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Scalings.GageFactorScaling)">
            <summary>
            Inserts the concrete data for a gage factor scaling.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="scaling">Gage factor scaling data of the sensor</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.InsertCanBusScalingData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Scalings.CanBusScaling)">
            <summary>
            Inserts the can bus scaling data.
            </summary>
            <param name="conn">The connection.</param>
            <param name="transaction">The transaction.</param>
            <param name="scaling">The scaling.</param>
            <exception cref="T:System.Data.DataException"></exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.UpdateCommonScalingData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Int32,Hbm.Api.SensorDB.Entities.Scaling)">
            <summary>
            Updates the common scaling data for a sensor within the table Scaling 
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="sensorID">Id of the sensor</param>
            <param name="scaling">Scaling data of the sensor</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.ScalingDataManager.DeleteSensorDataFromAllConcreteScalingTables(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Int32)">
            <summary>
            Deletes the content of all conrete scaling data tables for the sensor.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="sensorID">Id of the sensor</param>
        </member>
        <member name="T:Hbm.Api.SensorDB.Dal.SensorDataManager">
            <summary>
            Database access for sensors (and their theromocouple types)
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.#ctor(Hbm.Api.SensorDB.Dal.ConnectionInfo,System.String)">
            <summary>
            Creates a new instance initializes data manager and 
            sets the connection info using the base class
            </summary>
            <param name="connectionInfo">Instance of connection data</param>
            <param name="logDbBaseCategory">Log context category for quicker parsing log files.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.SensorExist(System.Int32)">
            <summary>
            Checks if the sensor by the given sensor Id exist in database.
            </summary>
            <param name="sensorId">ID of the sensor to check.</param>
            <returns>True if sensor exist, otherwise false.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.GetSensor(System.Int32)">
            <summary>
            Reads the sensor with the specified sensor id from the database.
            </summary>
            <param name="sensorID">ID of the sensor</param>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/>, or <c>null</c> if not found</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.GetSensor(System.String)">
            <summary>
            Reads the sensor with the specified unique name from the database.
            </summary>
            <param name="uniqueName">UniqueName of the sensor</param>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/>, or <c>null</c> if not found</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.GetSensors">
            <summary>
            Reads all sensors from the database.
            </summary>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> instances.</returns>
            <remarks>
            There is a performance issue using left joins with VistaDB. 
            Therefore all required tables are read without joins into dictionarys and are mapped by code.
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.GetSensors(Hbm.Api.SensorDB.Entities.Category)">
            <summary>
            Reads all sensors of a given category from the database.
            </summary>
            <param name="category">Target category of the sensor read.</param>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> instances where the <paramref name="category"/> is the parent.</returns>
            <remarks>
            There is a performance issue using left joins with VistaDB. 
            Therefore all required tables are read without joins into dictionarys and are mapped by code.
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.GetSensorsBase">
            <summary>
            Returns a list of all sensors with their id, name and description from the database.
            If you want to get a list of all sensors with all sensordata (specific sensor data, etc.)
            use <see cref="M:Hbm.Api.SensorDB.Dal.SensorDataManager.GetSensors"/> instead.
            </summary>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> instances.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.GetTranslationID(System.Int32)">
            <summary>
            Reads the translation id belonging to the given sensor id.
            </summary>
            <param name="sensorID">ID of the sensor</param>
            <returns>Translation id belonging to the sensor</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.HasChangedInDB(Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Checks, if the given sensor instance is different to the sensor with the same SensorID in the database.
            The sensor has changes if the <c>LastModifiedDate</c> property is different.
            </summary>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> to be compared to the database</param>
            <returns>Returns <c>true</c> if the sensor has changes, else <c>false</c>. 
            Returns <c>false</c> if no sensor instance is given. 
            Returns <c>true</c> if the sensor instance was not found in the database (new sensor)</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.InsertSensor(Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Insert a given sensor into the database.
            </summary>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> to be inserted</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.UpdateSensor(Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Updates the given sensor in the database.
            </summary>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> to be updated</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.UpdateCategoryOfSensors(System.Collections.Generic.List{Hbm.Api.SensorDB.Entities.Sensor})">
            <summary>
            Updates the parent category for the given sensors.
            Note: Only the category property is applied to the database. If you want to update the whole sensor properties refer to <see cref="M:Hbm.Api.SensorDB.Dal.SensorDataManager.UpdateSensor(Hbm.Api.SensorDB.Entities.Sensor)"/>.
            </summary>
            <param name="sensors">List of sensors to apply category updates.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sensors"/> is <c>null</c>.</exception>
            <exception cref="T:System.Data.DataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.DeleteSensor(System.Int32)">
            <summary>
            Deletes a sensor from the database
            </summary>
            <param name="sensorID">ID of the sensor to be deleted</param>
            <remarks>
            The database model automatically deletes data cascading from referenced tables containing sensor data.
            The only exception of this rule is the table translation (because of side-effects using triggers in VistaDB) 
            without cascading delete. Therefore the translation data of the sensor is deleted before deleting the sensor.
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.DeleteSensors(System.Collections.Generic.List{System.Int32})">
            <summary>
            Delete sensors from the database
            </summary>
            <param name="sensorIds">IDs of the sensors to be deleted</param>
            <returns>Number of affected rows.</returns>
            <remarks>
            The database model automatically deletes data cascading from referenced tables containing sensor data.
            The only exception of this rule is the table translation (because of side-effects using triggers in VistaDB) 
            without cascading delete. Therefore the translation data of the sensor is deleted before deleting the sensor.
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.GetThermoCoupleTypes">
            <summary>
            Reads all thermocouple types from the database.
            </summary>
            <returns>List of strings with all thermocouple types.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.InsertThermoCoupleType(System.String)">
            <summary>
            Inserts the given thermocouple type into the database. 
            Instead of updating an existing thermocouple types, a delete of the existing type 
            and an insert of a new one is required.
            </summary>
            <param name="thermoCoupleType">New thermo couple type to be inserted.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.DeleteThermoCoupleType(System.String)">
            <summary>
            Deletes the given thermocouple type from the database.
            </summary>
            <param name="thermoCoupleType">Thermocouple type to be deleted.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.BulkInsert(System.Collections.Generic.List{Hbm.Api.SensorDB.Entities.Category},System.Collections.Generic.List{Hbm.Api.SensorDB.Entities.Sensor})">
            <summary>
            Performance optimized insert of multiple categories and / or sensors.
            </summary>
            <remarks>
            This method is anly designed for single user write access.
            </remarks>
            <param name="categoriesToInsert">List of categories to insert</param>
            <param name="sensorsToInsert">List of sensors to insert</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.MapDbToCommonSensor(System.Data.Common.DbDataReader)">
            <summary>
            Maps the database fields into a sensor object
            </summary>
            <param name="dr">Current data reader</param>
            <returns>Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/></returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.MapDbToBridgeSensorData(System.Data.Common.DbDataReader,Hbm.Api.SensorDB.Entities.Sensors.BridgeSensor)">
            <summary>
            Maps the the database fields for a concrete BridgeSensor 
            into an existing sensor instance. 
            </summary>
            <param name="dr">Current data reader</param>
            <param name="sensor">Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.BridgeSensor"/> to be filled</param>
            <returns>Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.BridgeSensor"/>, filled with concrete sensor data</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.MapDbToCounterSensorData(System.Data.Common.DbDataReader,Hbm.Api.SensorDB.Entities.Sensors.CounterSensor)">
            <summary>
            Maps the the database fields for a concrete CounterSensor 
            into an existing sensor instance. 
            </summary>
            <param name="dr">Current data reader</param>
            <param name="sensor">Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CounterSensor"/> to be filled</param>
            <returns>Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CounterSensor"/>, filled with concrete sensor data</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.MapDbToFrequencySensorData(System.Data.Common.DbDataReader,Hbm.Api.SensorDB.Entities.Sensors.FrequencySensor)">
            <summary>
            Maps the the database fields for a concrete FrequencySensor 
            into an existing sensor instance. 
            </summary>
            <param name="dr">Current data reader</param>
            <param name="sensor">Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.FrequencySensor"/> to be filled</param>
            <returns>Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.FrequencySensor"/>, filled with concrete sensor data</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.MapDbToVoltageSensorData(System.Data.Common.DbDataReader,Hbm.Api.SensorDB.Entities.Sensors.VoltageSensor)">
            <summary>
            Maps the the database fields for a concrete VoltageSensor 
            into an existing sensor instance. 
            </summary>
            <param name="dr">Current data reader</param>
            <param name="sensor">Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.VoltageSensor"/> to be filled</param>
            <returns>Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.VoltageSensor"/>, filled with concrete sensor data</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.MapDbToVoltageProbeSensorData(System.Data.Common.DbDataReader,Hbm.Api.SensorDB.Entities.Sensors.VoltageProbeSensor)">
            <summary>
            Maps the the database fields for a concrete VoltageProbeSensor 
            into an existing sensor instance. 
            </summary>
            <param name="dr">Current data reader</param>
            <param name="sensor">Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.VoltageProbeSensor"/> to be filled</param>
            <returns>Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.VoltageProbeSensor"/>, filled with concrete sensor data</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.MapDbToThermoCoupleSensorData(System.Data.Common.DbDataReader,Hbm.Api.SensorDB.Entities.Sensors.ThermoCoupleSensor)">
            <summary>
            Maps the the database fields for a concrete ThermoCoupleSensor 
            into an existing sensor instance. 
            </summary>
            <param name="dr">Current data reader</param>
            <param name="sensor">Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.ThermoCoupleSensor"/> to be filled</param>
            <returns>Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.ThermoCoupleSensor"/>, filled with concrete sensor data</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.MapDbToSsiSensorData(System.Data.Common.DbDataReader,Hbm.Api.SensorDB.Entities.Sensors.SsiSensor)">
            <summary>
            Maps the the database fields for a concrete SsiSensor 
            into an existing sensor instance. 
            </summary>
            <param name="dr">Current data reader</param>
            <param name="sensor">Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.SsiSensor"/> to be filled</param>
            <returns>Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.SsiSensor"/>, filled with concrete sensor data</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.MapDbToResistanceSensorData(System.Data.Common.DbDataReader,Hbm.Api.SensorDB.Entities.Sensors.ResistanceSensor)">
            <summary>
            Maps the the database fields for a concrete ResistanceSensor 
            into an existing sensor instance. 
            </summary>
            <param name="dr">Current data reader</param>
            <param name="sensor">Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.ResistanceSensor"/> to be filled</param>
            <returns>Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.ResistanceSensor"/>, filled with concrete sensor data</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.MapDbToPwmSensorData(System.Data.Common.DbDataReader,Hbm.Api.SensorDB.Entities.Sensors.PwmSensor)">
            <summary>
            Maps the the database fields for a concrete PwmSensor 
            into an existing sensor instance. 
            </summary>
            <param name="dr">Current data reader</param>
            <param name="sensor">Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.PwmSensor"/> to be filled</param>
            <returns>Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.PwmSensor"/>, filled with concrete sensor data</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.MapDbToPtSensorData(System.Data.Common.DbDataReader,Hbm.Api.SensorDB.Entities.Sensors.PtSensor)">
            <summary>
            Maps the the database fields for a concrete PtSensor 
            into an existing sensor instance. 
            </summary>
            <param name="dr">Current data reader</param>
            <param name="sensor">Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.PtSensor"/> to be filled</param>
            <returns>Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.PtSensor"/>, filled with concrete sensor data</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.MapDbToPotentiometerSensorData(System.Data.Common.DbDataReader,Hbm.Api.SensorDB.Entities.Sensors.PotentiometerSensor)">
            <summary>
            Maps the the database fields for a concrete PotentiometerSensor 
            into an existing sensor instance. 
            </summary>
            <param name="dr">Current data reader</param>
            <param name="sensor">Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.PotentiometerSensor"/> to be filled</param>
            <returns>Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.PotentiometerSensor"/>, filled with concrete sensor data</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.MapDbToPiezoPassiveSensorData(System.Data.Common.DbDataReader,Hbm.Api.SensorDB.Entities.Sensors.PiezoPassiveSensor)">
            <summary>
            Maps the the database fields for a concrete PiezoPassiveSensor 
            into an existing sensor instance. 
            </summary>
            <param name="dr">Current data reader</param>
            <param name="sensor">Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.PiezoPassiveSensor"/> to be filled</param>
            <returns>Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.PiezoPassiveSensor"/>, filled with concrete sensor data</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.MapDbToIepeSensorData(System.Data.Common.DbDataReader,Hbm.Api.SensorDB.Entities.Sensors.IepeSensor)">
            <summary>
            Maps the the database fields for a concrete IepeSensor 
            into an existing sensor instance. 
            </summary>
            <param name="dr">Current data reader</param>
            <param name="sensor">Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.IepeSensor"/> to be filled</param>
            <returns>Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.IepeSensor"/>, filled with concrete sensor data</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.MapDbToCanBusSensorData(System.Data.Common.DbDataReader,Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor)">
            <summary>
            Maps the database fields for a concrete CanBusSensor 
            into an existing sensor instance. 
            </summary>
            <param name="dr">Current data reader</param>
            <param name="sensor">Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor"/> to be filled</param>
            <returns>Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor"/>, filled with concrete sensor data</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.MapDbToCurrentSensorData(System.Data.Common.DbDataReader,Hbm.Api.SensorDB.Entities.Sensors.CurrentSensor)">
            <summary>
            Maps the the database fields for a concrete CurrentSensor 
            into an existing sensor instance. 
            </summary>
            <param name="dr">Current data reader</param>
            <param name="sensor">Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CurrentSensor"/> to be filled</param>
            <returns>Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CurrentSensor"/>, filled with concrete sensor data</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.MapDbToCurrentProbeSensorData(System.Data.Common.DbDataReader,Hbm.Api.SensorDB.Entities.Sensors.CurrentProbeSensor)">
            <summary>
            Maps the the database fields for a concrete CurrentProbeSensor 
            into an existing sensor instance. 
            </summary>
            <param name="dr">Current data reader</param>
            <param name="sensor">Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CurrentProbeSensor"/> to be filled</param>
            <returns>Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CurrentProbeSensor"/>, filled with concrete sensor data</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.MapDbToLvdtSensorData(System.Data.Common.DbDataReader,Hbm.Api.SensorDB.Entities.Sensors.LvdtSensor)">
            <summary>
            Maps the the database fields for a concrete LvdtSensor 
            into an existing sensor instance. 
            </summary>
            <param name="dr">Current data reader</param>
            <param name="sensor">Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.LvdtSensor"/> to be filled</param>
            <returns>Instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.LvdtSensor"/>, filled with concrete sensor data</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.GetSensors(System.Data.Common.DbConnection,Hbm.Api.SensorDB.Entities.Category)">
            <summary>
            Reads all sensors of a given category from the database.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="category">Target category of the sensor read. Pass null to read all sensors.</param>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> instances where the <paramref name="category"/> is the parent.</returns>
            <remarks>
            There is a performance issue using left joins with VistaDB. 
            Therefore all required tables are read without joins into dictionarys and are mapped by code.
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.FillAdditionalSensorData(System.Data.Common.DbDataReader,System.Collections.Generic.Dictionary{System.Int32,Hbm.Api.SensorDB.Entities.Category},Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Fills the category data from the given parameters into the given sensor instance.
            </summary>
            <param name="dr">Current data reader</param>
            <param name="categories">Dictionary of all categories for all sensors</param>
            <param name="sensor">Concrete sensor instance to be filled with additional category data</param>
            <returns>Concrete instance of a sensor as <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/></returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.FillAdditionalSensorData(System.Data.Common.DbConnection,System.Nullable{System.Int32},Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Reads additional sensor data (categories, descriptors, scalings) from the database
            and fill the data into the given sensor instance.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="categoryID">The category identifier.</param>
            <param name="sensor">Concrete sensor instance to be filled with additional sensor data</param>
            <returns>Concrete instance of a sensor as <see cref="T:Hbm.Api.SensorDB.Entities.Sensor" /></returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.FillAdditionalSensorData(System.Data.Common.DbDataReader,System.Collections.Generic.Dictionary{System.Int32,Hbm.Api.SensorDB.Entities.Category},System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{Hbm.Api.SensorDB.Entities.Descriptor}},System.Collections.Generic.Dictionary{System.Int32,Hbm.Api.SensorDB.Entities.Scaling},Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Fills the additional sensor data (categories, descriptors, scalings) from the given parameters
            into the given sensor instance.
            </summary>
            <param name="dr">Current data reader</param>
            <param name="categories">Dictionary of all categories for all sensors</param>
            <param name="descriptors">Dictionary with all descriptor lists for all sensors</param>
            <param name="scalings">Dicitonary with all scalings for all sensors</param>
            <param name="sensor">Concrete sensor instance to be filled with additional sensor data</param>
            <returns>Concrete instance of a sensor as <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/></returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.FillConcreteSensorData(System.Data.Common.DbConnection,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Reads the concrete sensor data (without common sensor data) from the database 
            and fills the concrete sensor data according to the sensor type.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="sensor">Concrete sensor instance to be filled with concrete sensor data</param>
            <returns>Concrete instance of a sensor as <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/></returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.FillConcreteSensorData(System.Data.Common.DbDataReader,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Read the concrete sensor data (without common sensor data) from the DbDataReader 
            and fills the concrete sensor data according to the sensor type.
            </summary>
            <param name="dr">Current data reader</param>
            <param name="sensor">Concrete sensor instance to be filled with concrete sensor data</param>
            <returns>Concrete instance of a sensor as <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/></returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.FillBridgeSensorData(System.Data.Common.DbConnection,Hbm.Api.SensorDB.Entities.Sensors.BridgeSensor)">
            <summary>
            Reads the concrete data for a bridge sensor from the database 
            and fills the given <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.BridgeSensor"/> instance (without common sensor data).
            </summary>
            <param name="conn">Open database connection</param>
            <param name="sensor">Sensor instance to be filled with concrete sensor data</param>
            <returns>Concrete <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.BridgeSensor"/> instance</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.FillCounterSensorData(System.Data.Common.DbConnection,Hbm.Api.SensorDB.Entities.Sensors.CounterSensor)">
            <summary>
            Reads the concrete data for a counter sensor from the database 
            and fills the given <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CounterSensor"/> instance (without common sensor data).
            </summary>
            <param name="conn">Open database connection</param>
            <param name="sensor">Sensor instance to be filled with concrete sensor data</param>
            <returns>Concrete <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CounterSensor"/> instance</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.FillFrequencySensorData(System.Data.Common.DbConnection,Hbm.Api.SensorDB.Entities.Sensors.FrequencySensor)">
            <summary>
            Reads the concrete data for a frequency sensor from the database 
            and fills the given <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.FrequencySensor"/> instance (without common sensor data).
            </summary>
            <param name="conn">Open database connection</param>
            <param name="sensor">Sensor instance to be filled with concrete sensor data</param>
            <returns>Concrete <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.FrequencySensor"/> instance</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.FillVoltageSensorData(System.Data.Common.DbConnection,Hbm.Api.SensorDB.Entities.Sensors.VoltageSensor)">
            <summary>
            Reads the concrete data for a voltage sensor from the database 
            and and fills the given <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.VoltageSensor"/> instance (without common sensor data).
            </summary>
            <param name="conn">Open database connection</param>
            <param name="sensor">Sensor instance to be filled with concrete sensor data</param>
            <returns>Concrete <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.VoltageSensor"/> instance</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.FillVoltageProbeSensorData(System.Data.Common.DbConnection,Hbm.Api.SensorDB.Entities.Sensors.VoltageProbeSensor)">
            <summary>
            Reads the concrete data for a voltage sensor from the database 
            and and fills the given <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.VoltageProbeSensor"/> instance (without common sensor data).
            </summary>
            <param name="conn">Open database connection</param>
            <param name="sensor">Sensor instance to be filled with concrete sensor data</param>
            <returns>Concrete <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.VoltageProbeSensor"/> instance</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.FillThermoCoupleSensorData(System.Data.Common.DbConnection,Hbm.Api.SensorDB.Entities.Sensors.ThermoCoupleSensor)">
            <summary>
            Reads the concrete data for a thermocouple sensor from the database 
            and fills the given <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.ThermoCoupleSensor"/> instance (without common sensor data).
            </summary>
            <param name="conn">Open database connection</param>
            <param name="sensor">Sensor instance to be filled with concrete sensor data</param>
            <returns>Concrete <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.ThermoCoupleSensor"/> instance</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.FillSsiSensorData(System.Data.Common.DbConnection,Hbm.Api.SensorDB.Entities.Sensors.SsiSensor)">
            <summary>
            Reads the concrete data for a ssi sensor from the database 
            and fills the given <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.SsiSensor"/> instance (without common sensor data).
            </summary>
            <param name="conn">Open database connection</param>
            <param name="sensor">Sensor instance to be filled with concrete sensor data</param>
            <returns>Concrete <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.SsiSensor"/> instance</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.FillResistanceSensorData(System.Data.Common.DbConnection,Hbm.Api.SensorDB.Entities.Sensors.ResistanceSensor)">
            <summary>
            Reads the concrete data for a resistance sensor from the database 
            and fills the given <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.ResistanceSensor"/> instance (without common sensor data).
            </summary>
            <param name="conn">Open database connection</param>
            <param name="sensor">Sensor instance to be filled with concrete sensor data</param>
            <returns>Concrete <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.ResistanceSensor"/> instance</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.FillPwmSensorData(System.Data.Common.DbConnection,Hbm.Api.SensorDB.Entities.Sensors.PwmSensor)">
            <summary>
            Reads the concrete data for a pwm sensor from the database 
            and fills the given <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.PwmSensor"/> instance (without common sensor data).
            </summary>
            <param name="conn">Open database connection</param>
            <param name="sensor">Sensor instance to be filled with concrete sensor data</param>
            <returns>Concrete <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.PwmSensor"/> instance</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.FillPtSensorData(System.Data.Common.DbConnection,Hbm.Api.SensorDB.Entities.Sensors.PtSensor)">
            <summary>
            Reads the concrete data for a pt sensor from the database 
            and fills the given <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.PtSensor"/> instance (without common sensor data).
            </summary>
            <param name="conn">Open database connection</param>
            <param name="sensor">Sensor instance to be filled with concrete sensor data</param>
            <returns>Concrete <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.PtSensor"/> instance</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.FillPotentiometerSensorData(System.Data.Common.DbConnection,Hbm.Api.SensorDB.Entities.Sensors.PotentiometerSensor)">
            <summary>
            Reads the concrete data for a potentiometer sensor from the database 
            and fills the given <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.PotentiometerSensor"/> instance (without common sensor data).
            </summary>
            <param name="conn">Open database connection</param>
            <param name="sensor">Sensor instance to be filled with concrete sensor data</param>
            <returns>Concrete <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.PotentiometerSensor"/> instance</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.FillPiezoPassiveSensorData(System.Data.Common.DbConnection,Hbm.Api.SensorDB.Entities.Sensors.PiezoPassiveSensor)">
            <summary>
            Reads the concrete data for a piezo passive sensor from the database 
            and fills the given <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.PiezoPassiveSensor"/> instance (without common sensor data).
            </summary>
            <param name="conn">Open database connection</param>
            <param name="sensor">Sensor instance to be filled with concrete sensor data</param>
            <returns>Concrete <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.PiezoPassiveSensor"/> instance</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.FillLvdtSensorData(System.Data.Common.DbConnection,Hbm.Api.SensorDB.Entities.Sensors.LvdtSensor)">
            <summary>
            Returns the <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.LvdtSensor"/> instance.
            For now a LvdtSensor is not different from the common sensor.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="sensor">Sensor instance to be filled with concrete sensor data</param>
            <returns>Concrete <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.LvdtSensor"/> instance</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.FillCurrentSensorData(System.Data.Common.DbConnection,Hbm.Api.SensorDB.Entities.Sensors.CurrentSensor)">
            <summary>
            Reads the concrete data for a current sensor from the database 
            and fills the given <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CurrentSensor"/> instance (without common sensor data).
            </summary>
            <param name="conn">Open database connection</param>
            <param name="sensor">Sensor instance to be filled with concrete sensor data</param>
            <returns>Concrete <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CurrentSensor"/> instance</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.FillCurrentProbeSensorData(System.Data.Common.DbConnection,Hbm.Api.SensorDB.Entities.Sensors.CurrentProbeSensor)">
            <summary>
            Reads the concrete data for a iepe sensor from the database 
            and fills the given <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CurrentProbeSensor"/> instance (without common sensor data).
            </summary>
            <param name="conn">Open database connection</param>
            <param name="sensor">Sensor instance to be filled with concrete sensor data</param>
            <returns>Concrete <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.IepeSensor"/> instance</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.FillIepeSensorData(System.Data.Common.DbConnection,Hbm.Api.SensorDB.Entities.Sensors.IepeSensor)">
            <summary>
            Reads the concrete data for a iepe sensor from the database 
            and fills the given <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.IepeSensor"/> instance (without common sensor data).
            </summary>
            <param name="conn">Open database connection</param>
            <param name="sensor">Sensor instance to be filled with concrete sensor data</param>
            <returns>Concrete <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.IepeSensor"/> instance</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.FillCanBusSensorData(System.Data.Common.DbConnection,Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor)">
            <summary>
            Reads the concrete data for a CanBus sensor from the database 
            and fills the given <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor"/> instance (without common sensor data).
            </summary>
            <param name="conn">Open database connection</param>
            <param name="sensor">Sensor instance to be filled with concrete sensor data</param>
            <returns>Concrete <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor"/> instance</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.UpdateCommonSensorData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Updates the common sensor data of the given sensor in the database.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> to be updated</param>
            <remarks>
            The TranslationID and SensorTypeID are not updated in the database, 
            because they may never change.
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.UpdatePositionNumberOfSiblingsOnDemand(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Sensor,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Updates the position of sibling sensors (only if needed).
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="beforeSensor">Instance of the sensor causing the position update for the siblings.</param>
            <param name="currentSensorInDb">Current instance of the sensor in database.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.UpdatePositionNumber(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Updates only the position number of the given sensor in the database.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> to be updated</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.UpdateConcreteSensorData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Updates the concrete sensor data of the given sensor in the database.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> to be updated</param>
            <remarks>
            To make maintanance easier (no conrete update methods are needed) 
            the concrete sensor data is deleted and then inserted instead of an update.
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.BulkInsertSensor(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Int32,System.Collections.Generic.List{Hbm.Api.SensorDB.Entities.Language},Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Insert a given sensor into the database for bulk imports.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="translationID">ID for inserting the sensor description as translation for all languages</param>
            <param name="languages">List of all available languages</param>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> to be inserted</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.InsertCommonSensorData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Sensor,System.Int32)">
            <summary>
            Insert the common sensor data into the database.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> to be inserted</param>
            <param name="translationID">ID for referencing the translated sensor description</param>
            <returns>New generated sensor id of the inserted sensor</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.InsertConcreteSensorData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Insert the concrete sensor data into the database 
            according to the concrete sensor type.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> to be inserted</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.InsertCounterSensorData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Sensors.CounterSensor)">
            <summary>
            Insert the concrete data for a counter sensor into the database. 
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CounterSensor"/> to be inserted</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.InsertFrequencySensorData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Sensors.FrequencySensor)">
            <summary>
            Insert the concrete data for a frequency sensor into the database. 
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.FrequencySensor"/> to be inserted</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.InsertPwmSensorData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Sensors.PwmSensor)">
            <summary>
            Insert the concrete data for a pwm sensor into the database. 
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.PwmSensor"/> to be inserted</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.InsertIepeSensorData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Sensors.IepeSensor)">
            <summary>
            Insert the concrete data for a iepe sensor into the database. 
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.IepeSensor"/> to be inserted</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.InsertCurrentSensorData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Sensors.CurrentSensor)">
            <summary>
            Insert the concrete data for a current sensor into the database. 
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CurrentSensor"/> to be inserted</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.InsertCurrentProbeSensorData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Sensors.CurrentProbeSensor)">
            <summary>
            Insert the concrete data for a current probe sensor into the database. 
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CurrentProbeSensor"/> to be inserted</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.InsertVoltageSensorData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Sensors.VoltageSensor)">
            <summary>
            Insert the concrete data for a voltage sensor into the database. 
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.VoltageSensor"/> to be inserted</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.InsertVoltageProbeSensorData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Sensors.VoltageProbeSensor)">
            <summary>
            Insert the concrete data for a voltage probe sensor into the database. 
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.VoltageProbeSensor"/> to be inserted</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.InsertPiezoPassiveSensorData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Sensors.PiezoPassiveSensor)">
            <summary>
            Insert the concrete data for a piezo passive sensor into the database. 
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.PiezoPassiveSensor"/> to be inserted</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.InsertThermoCoupleSensorData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Sensors.ThermoCoupleSensor)">
            <summary>
            Insert the concrete data for a thermocouple sensor into the database. 
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.ThermoCoupleSensor"/> to be inserted</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.InsertSsiSensorData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Sensors.SsiSensor)">
            <summary>
            Insert the concrete data for a ssi sensor into the database. 
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.SsiSensor"/> to be inserted</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.InsertPotentiometerSensorData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Sensors.PotentiometerSensor)">
            <summary>
            Insert the concrete data for a potentiomenter sensor into the database. 
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.PotentiometerSensor"/> to be inserted</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.InsertPtSensorData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Sensors.PtSensor)">
            <summary>
            Insert the concrete data for a pt sensor into the database. 
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.PtSensor"/> to be inserted</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.InsertResistanceSensorData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Sensors.ResistanceSensor)">
            <summary>
            Insert the concrete data for a resistance sensor into the database. 
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.ResistanceSensor"/> to be inserted</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.InsertBridgeSensorData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Sensors.BridgeSensor)">
            <summary>
            Insert the concrete data for a bridge sensor into the database. 
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.BridgeSensor"/> to be inserted</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.InsertCanBusSensorData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor)">
            <summary>
            Insert the concrete data for a CanBus sensor into the database. 
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor"/> to be inserted</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.DeleteConcreteSensorData(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Delete the concrete sensor data depending on the sensor type of the sensor.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> to be deleted</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.SensorDataManager.DeleteConcreteSensorDataFromTable(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Int32,System.String)">
            <summary>
            Delete the concrete sensor data from the given database table.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="transaction">Current database transaction</param>
            <param name="sensorID">ID of the sensor, whose concrete data will be deleted</param>
            <param name="tableName">Name of the database table for deleting the sensor data</param>
        </member>
        <member name="T:Hbm.Api.SensorDB.Dal.VersionInfoDataManager">
            <summary>
            Database access for version information 
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.VersionInfoDataManager.#ctor(Hbm.Api.SensorDB.Dal.ConnectionInfo,System.String)">
            <summary>
            Creates a new instance and initializes connection info using the base class
            </summary>
            <param name="connectionInfo">Instance of connection data</param>
            <param name="logCategory">Log context category for quicker parsing log files.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.VersionInfoDataManager.GetVersionInfo">
            <summary>
            Reads the version info of the sensor db from the database.
            </summary>
            <returns>Version info</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.VersionInfoDataManager.SaveVersion(Hbm.Api.SensorDB.Entities.VersionInfo)">
            <summary>
            Saves the version info of the sensor db to the database.
            </summary>
            <param name="versionInfo">Version info to be stored.</param>
        </member>
        <member name="T:Hbm.Api.SensorDB.Dal.DescriptorDataManager">
            <summary>
            Database access for descriptors and their attachments.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.DescriptorDataManager.#ctor(Hbm.Api.SensorDB.Dal.ConnectionInfo,System.String)">
            <summary>
            Creates a new instance and initializes connection info using the base class
            </summary>
            <param name="connectionInfo">Instance of connection data</param>
            <param name="logDbBaseCategory">Log context category for quicker parsing log files.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.DescriptorDataManager.GetDescriptor(System.Int32)">
            <summary>
            Reads the descriptor with the specified descriptor id from the database.
            </summary>
            <param name="descriptorID">ID of the descriptor</param>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Descriptor"/>, or <c>null</c> if not found</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.DescriptorDataManager.GetAttachment(System.Int32)">
            <summary>
            Reads the attachment according to the specified descriptor id from the database.
            </summary>
            <param name="descriptorID">ID of the descriptor</param>
            <returns>Attachment as <c>byte[]</c>, or <c>null</c> if not found</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.DescriptorDataManager.GetDescriptors(Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Reads all descriptors from the database.
            If the sensor instance is <c>null</c> then all descriptors of all sensors are retrieved.
            </summary>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> for which the descriptors are searched.</param>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Descriptor"/> instances.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.DescriptorDataManager.GetDescriptors(System.Data.Common.DbConnection,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Reads the descriptors for the specified sensor from the database. 
            If the sensor instance is <c>null</c> then all descriptors of all sensors are retrieved.
            </summary>
            <param name="conn">Open database connection</param>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> for which the descriptors are searched.</param>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Descriptor"/> instances for the sensor.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.DescriptorDataManager.InsertDescriptor(Hbm.Api.SensorDB.Entities.Descriptor,System.Byte[])">
            <summary>
            Inserts the given descriptor with the given attachment (if available) into the database.
            </summary>
            <param name="descriptor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Descriptor"/> to be inserted.</param>
            <param name="attachment">Attachment as <c>byte[]</c> to be inserted with the descriptor</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.DescriptorDataManager.UpdateDescriptor(Hbm.Api.SensorDB.Entities.Descriptor,System.Byte[])">
            <summary>
            Updates the given descriptor with the given attachment (if available) into the database.
            </summary>
            <param name="descriptor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Descriptor"/> to be updated.</param>
            <param name="attachment">Attachment as <c>byte[]</c> to be updated with the descriptor</param>
            <remarks>
            If the given attachment is <c>null</c> then the existing attachment is not changed.
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.DescriptorDataManager.DeleteDescriptor(System.Int32)">
            <summary>
            Deletes the descriptor (including the attachment) with the given descriptor id from the database.
            </summary>
            <param name="descriptorID">ID of the descriptor to be deleted</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Dal.DescriptorDataManager.MapDbToDescriptor(System.Data.Common.DbDataReader)">
            <summary>
            Maps the the current row of the data reader into a category instance.
            </summary>
            <param name="dr">Instance of the data reader</param>
            <returns>New instance of a descriptor, filled with data from the data reader</returns>
            <remarks>
            The attachment content is not mapped in the descriptor due to memory reasons.
            Use the GetAttachment method to retrieve the attachment.
            </remarks>
        </member>
        <member name="T:Hbm.Api.SensorDB.DbSpecific.ISpecificDbCommand">
            <summary>
            Interface contract for common database operation, which are handled different within diverse database provider.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.DbSpecific.ISpecificDbCommand.LogSuffix">
            <summary>
            Gets the log suffix for the underlying database (for better log parsing).
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.DbSpecific.ISpecificDbCommand.ClearConnectionPool">
            <summary>
            Empties the connection pool associated with the underlying connection.
            </summary>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.DbSpecific.ISpecificDbCommand.ShrinkDatabase">
            <summary>
            Recover free space by reorganizing database pages.
            </summary>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="T:Hbm.Api.SensorDB.DbSpecific.DbSpecificCommandFactory">
            <summary>
            Factory for creating DB specific command handler instances
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.DbSpecific.DbSpecificCommandFactory.CreateSpecificCommandHandler(Hbm.Api.SensorDB.Dal.ConnectionInfo)">
            <summary>
            Creates a concrete DB specific command handler instance according to the provider name in the connectionInfo.
            </summary>
            <param name="connectionInfo">Instance of connection data</param>
            <returns>
            Concrete DB specific command handler instance.
            Null, if no DB specidifc command handler instance couldn't be created.
            </returns>
        </member>
        <member name="T:Hbm.Api.SensorDB.DbSpecific.VistaDbSpecificCommands">
            <summary>
            This class encapsulates Vista DB specific commands, which are not SQL-Standard.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.DbSpecific.VistaDbSpecificCommands.Hbm#Api#SensorDB#DbSpecific#ISpecificDbCommand#LogSuffix">
            <summary>
            Gets the log suffix for the underlying database (for better log parsing).
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.DbSpecific.VistaDbSpecificCommands.VistaDbFilePath">
            <summary>
            Gets the file path to the VistaDB file based on the given ConnectionInfo from <see cref="M:Hbm.Api.SensorDB.DbSpecific.VistaDbSpecificCommands.#ctor(Hbm.Api.SensorDB.Dal.ConnectionInfo)"/>.
            Returns empty string if the file does not exist.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.DbSpecific.VistaDbSpecificCommands.#ctor(Hbm.Api.SensorDB.Dal.ConnectionInfo)">
            <summary>
            Initializes an object of type <see cref="T:Hbm.Api.SensorDB.DbSpecific.VistaDbSpecificCommands"/>.
            </summary>
            <param name="connectionInfo">Instance of connection data</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.DbSpecific.VistaDbSpecificCommands.Hbm#Api#SensorDB#DbSpecific#ISpecificDbCommand#ClearConnectionPool">
            <summary>
            Empties the connection pool associated with the underlying connection.
            </summary>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.DbSpecific.VistaDbSpecificCommands.Hbm#Api#SensorDB#DbSpecific#ISpecificDbCommand#ShrinkDatabase">
            <summary>
            Recover free space by reorganizing database pages.
            This method also creates a backup file.
            The database must not be open in order for it to be packed.
            </summary>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.DbSpecific.VistaDbSpecificCommands.OnPackInfo(VistaDB.DDA.IVistaDBOperationCallbackStatus)">
            <summary>
            Operation Information delegate method giving feedback during long running operations.
            </summary>
            <param name="operationStatus">The information message by the callback.</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.DbSpecific.VistaDbSpecificCommands.SetDbFilePathFromConnectionString(System.String)">
            <summary>
            Parse a connection string for the 'data source' value.
            </summary>
            <param name="connectionString">The connection string:</param>
            <returns>The 'data source' value.</returns>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Category">
            <summary>
            Represents a category of sensors
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Category.CategoryID">
            <summary>
            Primary key of the category in the repository
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Category.ParentCategoryID">
            <summary>
            Id of the parent category to which the category belongs 
            or <c>null</c> if the category is a root category.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Category.PositionNo">
            <summary>
            Position of the category within its parent category
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Category.Description">
            <summary>
            Translated name of the category
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Category.IsLocked">
            <summary>
            Flag to indicate a GUI that the category cannot be modified.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Category.IsDeletable">
            <summary>
            Flag to indicate a GUI if the category cannot be deleted.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Category.InternalID">
            <summary>
            ID for internal use to uniquely identify the category 
            by using a database independent number (e.g. for programmatically identifying the category "My Sensors").
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.FbgCalibration.FbgMultiFactorCalibration">
            <summary>
                Multi factor calibration information for fiber bragg grating related sensors
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.FbgCalibration.FbgMultiFactorCalibration.CalibrationFactorX0">
            <summary>
                Calibration factor X0 ( f(x)= X0 + X1*x + X2*x^2 )
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.FbgCalibration.FbgMultiFactorCalibration.CalibrationFactorX1">
            <summary>
                Calibration factor X1 ( f(x)= X0 + X1*x + X2*x^2 )
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.FbgCalibration.FbgMultiFactorCalibration.CalibrationFactorX2">
            <summary>
                Calibration factor X2 ( f(x)= X0 + X1*x + X2*x^2 )
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.FbgCalibration.FbgSingleFactorCalibration">
            <summary>
                Single factor calibration information for fiber bragg grating related sensors
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.FbgCalibration.FbgSingleFactorCalibration.CalibrationFactor">
            <summary>
                Calibration factor
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.HierarchicalCategory">
            <summary>
            Represents a hierarchical view of an encapsulated category. 
            Extends the encapsulated category to a list of hierarchical child categories and
            a list of child sensors.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.HierarchicalCategory.#ctor">
            <summary>
            Creates a new instance.
            </summary>
            <remarks>
            Required for serialization purposes.
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.HierarchicalCategory.#ctor(Hbm.Api.SensorDB.Entities.Category,System.Int32)">
            <summary>
            Creates a new instance and keeps the given category.
            </summary>
            <param name="category">Category to be encapsulated</param>
            <param name="hierarchicalLevel">The hierarchical level of the category.</param>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.HierarchicalCategory.Category">
            <summary>
            Category to which the hierarchical category belongs to.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.HierarchicalCategory.Level">
            <summary>
            Represents the hierarchical level (starting from root = 0).
            -1, if level is unknown.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.HierarchicalCategory.ParentHierarchicalCategory">
            <summary>
            Parent category of this category.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.HierarchicalCategory.HierarchicalCategoryChilds">
            <summary>
            Hierarchical child categories according to the category
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.HierarchicalCategory.Sensors">
            <summary>
            Child sensors according to the category
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Descriptor">
            <summary>
            Represents a descriptor of the sensor, e.g. the binary documentation
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Descriptor.DescriptorID">
            <summary>
            Primary key of the descriptor in the repository
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Descriptor.SensorID">
            <summary>
            ID of the sensor to which the descriptor belongs
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Descriptor.Description">
            <summary>
            Description of the content
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Descriptor.FileName">
            <summary>
            Filename of the content file including the file extension 
            (without path information)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Descriptor.ContentType">
            <summary>
            Gets the content type of the binary file (file extension in upper case)
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Language">
            <summary>
            Encapsulates a language used for translations.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Language.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Language.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance and initializes the new instance using the given parameters.
            </summary>
            <param name="twoLetterISOLanguageName">Two letter iso language name of the language</param>
            <param name="description">Description of the language</param>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Language.TwoLetterISOLanguageName">
            <summary>
            Two letter iso language name (e.g. "en" for English).
            Primary key of the language in the repository.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Language.Description">
            <summary>
            Description of the language (e.g. "English")
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Language.IsFallbackLanguage">
            <summary>
            Marks a language as the fallback language.
            The fallback language should be used for translations, 
            if the current user's language is not supported.
            It is important that exactly one language is marked as fallback language.
            (For internal use only).
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Scalings.CanBusScaling">
            <summary>
            Represents a canbus scaling
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.CanBusScaling.#ctor">
            <summary>
            Create a new instance 
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.CanBusScaling.#ctor(System.Decimal,System.Decimal,System.String,System.Decimal,System.Decimal,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Scalings.CanBusScaling"/> class.
            </summary>
            <param name="offset">The offset.</param>
            <param name="factor">The factor.</param>
            <param name="engineeringUnit">The engineering unit.</param>
            <param name="minEngineeringRange">The minimum engineering range.</param>
            <param name="maxEngineeringRange">The maximum engineering range.</param>
            <param name="isEngineeringRangeRms">if set to <c>true</c> [is engineering range RMS].</param>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.CanBusScaling.ScalingType">
            <summary>
            Type of the scaling (read only)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.CanBusScaling.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
            <value>
            The scaling offset.
            </value>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.CanBusScaling.Factor">
            <summary>
            Gets or sets the factor.
            </summary>
            <value>
            The scaling factor.
            </value>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Scalings.GageFactorScaling">
            <summary>
            Represents a gage factor scaling
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.GageFactorScaling.ScalingType">
            <summary>
            Type of the scaling (read only)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.GageFactorScaling.GageFactor">
            <summary>
            Gage factor (K factor)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.GageFactorScaling.BridgeFactor">
            <summary>
            Bridge factor
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.GageFactorScaling.MaxElectricalRange">
            <summary>
            Calculated maximum eletrical value (read only)
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.GageFactorScaling.CalculateElectricalValue(System.Decimal)">
            <summary>
            Calculates the electrical value from a given engingeering value, using the bridge factor and the gage factor (k-factor)
            of this scaling
            </summary>
            <param name="engineeringValue">Engingeering value</param>
            <returns>Calculated electrical value</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.GageFactorScaling.CalculateEngineeringValue(System.Decimal)">
            <summary>
            Calculates the engineering value from a given electrical value, using the bridge factor and the gage factor (k-factor)
            of this scaling
            </summary>
            <param name="electricalValue">Electrical value</param>
            <returns>Calculated engineering value</returns>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Scalings.IScalingCalculation">
            <summary>
            Interface of scalings, which use calculations between electrical and engineering values
            </summary>
            <remarks>
            This interface can be used to read MaxElectricalRange from all scalings which implement this interface.
            </remarks>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.IScalingCalculation.MaxElectricalRange">
            <summary>
            Calculated maximal eletrical value (read only)
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.IScalingCalculation.CalculateEngineeringValue(System.Decimal)">
            <summary>
            Calculates the engineering value for the given electrical value 
            using the current scaling data.
            </summary>
            <param name="electricalValue">Electrical value</param>
            <returns>Calculated engineering value</returns>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Scalings.InternalScaling">
            <summary>
            Represents an sensor internal scaling
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.InternalScaling.ScalingType">
            <summary>
            Type of the scaling (read only)
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Scalings.PolynomialSegment">
            <summary>
            Represents one polynomial segment
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.PolynomialSegment.#ctor">
            <summary>
            Create a new instance and initializes list of polynomial terms
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.PolynomialSegment.#ctor(System.Double)">
            <summary>
             Create a new instance and initialize values.
            </summary>
            <param name="startX">Start X value of the segment</param>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.PolynomialSegment.StartX">
            <summary>
            Start X value of the segment
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.PolynomialSegment.PolynomialTerms">
            <summary>
            List of polynomial terms
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Scalings.NotSupportedScaling">
            <summary>
            Represents a not supported scaling
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.NotSupportedScaling.ScalingType">
            <summary>
            Type of the scaling (read only)
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Scalings.OffScaling">
            <summary>
            Represents an disabled scaling (Off)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.OffScaling.ScalingType">
            <summary>
            Type of the scaling (read only)
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase">
            <summary>
            Base class for point scalings
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.FindBy">
            <summary>
            Options for finding an interval within a scaling point list using a given value
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.FindBy.EngineeringValue">
            <summary>
            Find by using the given engineering value (=y) to find the electrical value (=x)
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.FindBy.ElectricalValue">
            <summary>
            Find by using the given electrical value (=x) to find the engineering value (=y)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.ScalingPoints">
            <summary>
            List of scaling points (for internal use only, e.g. by data access layer)
            </summary>
            <remarks>The setter is read only. Use the virtual method SetScalingPoints for assigning the list and initializing the required properties of the derived class</remarks>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.MaxElectricalRange">
            <summary>
            Calculated maximal electrical value (read only)
            </summary>
            <remarks>
            This method is virtual, because is must be overrideable e.g. by ZeroSpan scaling. 
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.#ctor">
            <summary>
            Create a new instance an initialize list of scaling points
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.CalculateEngineeringValue(System.Decimal)">
            <summary>
            Calculates the engineering value for the given electrical value 
            using the scaling points of this scaling.
            </summary>
            <param name="electricalValue">Electrical value</param>
            <returns>Calculated engineering value</returns>
            <remarks>
            This method is virtual, because is must be overrideable e.g. by ZeroSpan scaling. 
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.CalculateElectricalValue(System.Decimal)">
            <summary>
            Calculates the electrical value for the given engineering value 
            using the scaling points of this scaling.
            </summary>
            <param name="engineeringValue">Engineering value</param>
            <returns>Calculated electrical value</returns>
            <remarks>
            This method is virtual, because is must be overrideable e.g. by ZeroSpan scaling. 
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.SetScalingPoints(System.Collections.Generic.List{Hbm.Api.SensorDB.Entities.Scalings.ScalingPoint})">
            <summary>
            Sets the interal scaling point list.
            Override this method to initialize the internal properties in derived classes 
            for mapping their properties to the scaling points (e.g. for TwoPointScaling).
            </summary>
            <param name="scalingPoints">list of <see cref="T:Hbm.Api.SensorDB.Entities.Scalings.ScalingPoint"/></param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.PrepareTwoPointList">
            <summary>
            Prepares the list of scalingpoints to contain a list including exactly two points.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.CalculateXFromLinearEquation(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Calculates the x value for a given y value on a line, defined by the two points (x1,y1) and (x2,y2) 
            using the two-point form.
            </summary>
            <param name="y">y value for which the corresponding x value will be computed</param>
            <param name="x1">x value of first point</param>
            <param name="y1">y value of first point</param>
            <param name="x2">x value of second point</param>
            <param name="y2">y value of second poin</param>
            <returns>x value for the given y value on the line, or <see cref="F:Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.INVALID_VALUE"/> if y2 = y1, which is not allowed</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.CalculateYFromLinearEquation(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Calculates the y value for a given x value on a line, defined by the two points (x1,y1) and (x2,y2) 
            using the two-point form.
            </summary>
            <param name="x">x value for which the corresponding y value will be computed</param>
            <param name="x1">x value of first point</param>
            <param name="y1">y value of first point</param>
            <param name="x2">x value of second point</param>
            <param name="y2">y value of second poin</param>
            <returns>y value for the given x value on the line, or <see cref="F:Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.INVALID_VALUE"/> if x2 = x1, which is not allowed</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.CalculateElectricalValue(System.Decimal,System.Collections.Generic.List{Hbm.Api.SensorDB.Entities.Scalings.ScalingPoint})">
            <summary>
            Calculates the eletrical value (=x) for the given engineering value (y) using the scaling points of the scaling
            </summary>
            <param name="engineeringValue">Engineering value</param>
            <param name="scalingPoints">List of scaling points</param>
            <returns>Computed electrical value or <see cref="F:Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.INVALID_VALUE"/>, if the value could not be computed</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.CalculateEngineeringValue(System.Decimal,System.Collections.Generic.List{Hbm.Api.SensorDB.Entities.Scalings.ScalingPoint})">
            <summary>
            Calculates the engineering value (=y) for the given electrical value (x) using the scaling points of the scaling
            </summary>
            <param name="electricalValue">Electrical value</param>
            <param name="scalingPoints">List of scaling points</param>
            <returns>Computed engineering value or <see cref="F:Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.INVALID_VALUE"/>, if the value could not be computed</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.FindIntervalPoints(System.Decimal,System.Collections.Generic.List{Hbm.Api.SensorDB.Entities.Scalings.ScalingPoint},Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.FindBy)">
            <summary>
            Finds the fitting interval for the given value (an engineering value or an electrical value, depending on the enumeration <paramref name="findBy"/>) in the sorted scaling points.
            It is assumed, that the funcion defined by the scaling points is either strictly increasing or decreasing.
            </summary>
            <param name="givenValue">Engineering value, if <paramref name="findBy"/> is <see cref="F:Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.FindBy.EngineeringValue"/>, else an electrical value</param>
            <param name="scalingPoints">List of scaling points</param>
            <param name="findBy">Option for specifying the kind of the given value</param>
            <returns>List with two points, defining the interval for the given value. 
            Returns <c>null</c>, if the interval could not be found </returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.FindStrictlyIncreasingIntervalPoints(System.Decimal,System.Collections.Generic.List{Hbm.Api.SensorDB.Entities.Scalings.ScalingPoint},Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.FindBy)">
            <summary>
            Finds the fitting interval for the given value within the sorted scaling points.
            It is assumed, that the function defined by the scaling points is strictly increasing.
            </summary>
            <param name="givenValue">Engineering value, if <paramref name="findBy"/> is <see cref="F:Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.FindBy.EngineeringValue"/>, else an electrical value</param>
            <param name="sortedPoints">Sorted list of scaling points</param>
            <param name="findBy">Option for specifying the kind of the given value</param>
            <returns>List with two points, defining the interval for the given value.
            Returns <c>null</c>, if the interval could not be found</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.FindStrictlyDecreasingIntervalPoints(System.Decimal,System.Collections.Generic.List{Hbm.Api.SensorDB.Entities.Scalings.ScalingPoint},Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.FindBy)">
            <summary>
            Finds the fitting interval for the given value within the sorted scaling points.
            It is assumed, that the function defined by the scaling points is strictly decreasing.
            </summary>
            <param name="givenValue">Engineering value, if <paramref name="findBy"/> is <see cref="F:Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.FindBy.EngineeringValue"/>, else an electrical value</param>
            <param name="sortedPoints">Sorted list of scaling points</param>
            <param name="findBy">Option for specifying the kind of the given value</param>
            <returns>List with two points, defining the interval for the given value. 
            Returns <c>null</c>, if the interval could not be found </returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.GetValue(Hbm.Api.SensorDB.Entities.Scalings.ScalingPoint,Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.FindBy)">
            <summary>
            Gets the x or y value of the given scaling point, depending on the given enumeration <paramref name="findBy"/>
            </summary>
            <param name="point">Scalingpoint</param>
            <param name="findBy">if <paramref name="findBy"/> equals to <see cref="F:Hbm.Api.SensorDB.Entities.Scalings.PointScalingBase.FindBy.EngineeringValue"/>, then the y value of the scaling point is retrieved, else the x value</param>
            <returns>x or y value of the given scaling point</returns>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Scalings.PolynomialTerm">
            <summary>
            Represents one polynomial term
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.PolynomialTerm.#ctor">
            <summary>
            Create a new instance 
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.PolynomialTerm.#ctor(System.Decimal,System.Int32)">
            <summary>
             Create a new instance and initialize values.
            </summary>
            <param name="coefficient">Value for coefficient</param>
            <param name="exponent">Value for exponent</param>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.PolynomialTerm.Exponent">
            <summary>
            Exponent of the polynomial term
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.PolynomialTerm.Coefficient">
            <summary>
            Coefficient of the polynomial term
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Scalings.PolynomialScaling">
            <summary>
            Represents a polynomial scaling
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.PolynomialScaling.#ctor">
            <summary>
            Creates a new instance and initializes list of polynomial segments
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.PolynomialScaling.ScalingType">
            <summary>
            Type of the scaling (read only)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.PolynomialScaling.MaxElectricalRange">
            <summary>
            Maximal electrical range of the polynomial scaling
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.PolynomialScaling.PolynomialSegments">
            <summary>
            List of polynomial segments for this polynomial scaling
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.PolynomialScaling.CalculateEngineeringValue(System.Decimal)">
            <summary>
            Calculates the engineering value from a given electrical value, 
            using the polynoms of this scaling
            </summary>
            <param name="electricalValue">Electrical value</param>
            <returns>Calculated engineering value</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.PolynomialScaling.ComputePolynom(System.Double,Hbm.Api.SensorDB.Entities.Scalings.PolynomialSegment)">
            <summary>
            Computes the polynom P(x) for the given x value, using the terms of the given segment
            </summary>
            <param name="x">X value</param>
            <param name="segment">Segment with the polynomial terms</param>
            <returns>Computed value P(x)</returns>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Scalings.ScalingPoint">
            <summary>
            Represents a single scaling point
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.ScalingPoint.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.ScalingPoint.#ctor(System.Decimal,System.Decimal)">
            <summary>
             Create a new instance and initialize values.
            </summary>
            <param name="x">x value</param>
            <param name="y">y value</param>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.ScalingPoint.X">
            <summary>
            X value of the point
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.ScalingPoint.Y">
            <summary>
            Y value of the point
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Scalings.TableScaling">
            <summary>
            Represents a table scaling
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.TableScaling.ScalingType">
            <summary>
            Type of the scaling (read only)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.TableScaling.ScalingPoints">
            <summary>
            List of scaling points representing the scaling table
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Scalings.TwoPointScaling">
            <summary>
            Represents a two point scaling
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.TwoPointScaling.#ctor">
            <summary>
            Create a new instance 
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.TwoPointScaling.#ctor(System.Decimal,System.Decimal,System.String,System.Decimal,System.Decimal,System.Boolean)">
            <summary>
            Create a new instance and initialize data
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.TwoPointScaling.#ctor(System.Decimal,System.Decimal,System.String,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Boolean)">
            <summary>
            Create a new instance and initialize data
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.TwoPointScaling.ScalingType">
            <summary>
            Type of the scaling (read only)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.TwoPointScaling.ElectricalP1">
            <summary>
            Electrical P1
            </summary>
            <remarks>
            Accociated with scalingPoint[0].X in the list of scaling points
            </remarks>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.TwoPointScaling.ElectricalP2">
            <summary>
            Electrical P2
            </summary>
            <remarks>
            Accociated with scalingPoint[1].X in the list of scaling points
            </remarks>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.TwoPointScaling.EngineeringP1">
            <summary>
            Engineering P1
            </summary>
            <remarks>
            Accociated with scalingPoint[0].Y in the list of scaling points
            </remarks>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.TwoPointScaling.EngineeringP2">
            <summary>
            Engineering P2
            </summary>
            <remarks>
            Accociated with scalingPoint[1].Y in the list of scaling points
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.TwoPointScaling.SetScalingPoints(System.Collections.Generic.List{Hbm.Api.SensorDB.Entities.Scalings.ScalingPoint})">
            <summary>
            Sets the interal scaling point list and initializes the two point properties
            </summary>
            <param name="scalingPoints">list of <see cref="T:Hbm.Api.SensorDB.Entities.Scalings.ScalingPoint"/></param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.TwoPointScaling.MapValuesToTwoPointList">
            <summary>
            Maps the field values to the encapsulated scaling point list 
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.TwoPointScaling.MapTwoPointListToValues">
            <summary>
            Maps the encapsulated scaling point list to the field values
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Scalings.ZeroSpanScaling">
            <summary>
            Represents a zero span scaling
            </summary>
            <remarks>
            Encapsulates internally the list of scaling points
            </remarks>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.ZeroSpanScaling.ScalingType">
            <summary>
            Type of the scaling (read only)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.ZeroSpanScaling.MaxElectricalRange">
            <summary>
            Calculated maximal eletrical value (read only)
            </summary>
            <remarks>
            This method is virtual, because is must be overridden e.g. by ZeroSpan scaling, 
            because some of the the ScalingPoint values of the ZeroSpan scaling define a span, not a point.
            </remarks>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.ZeroSpanScaling.ElectricalZero">
            <summary>
            Electrical zero
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.ZeroSpanScaling.ElectricalSensitivity">
            <summary>
            Electrical sensitivity
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scalings.ZeroSpanScaling.EngineeringNominal">
            <summary>
            Engineering nominal
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.ZeroSpanScaling.CalculateEngineeringValue(System.Decimal)">
            <summary>
            Calculates the engineering value from a given electrical value, 
            using the data of this scaling
            </summary>
            <param name="electricalValue">Electrical value</param>
            <returns>Calculated engineering value</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.ZeroSpanScaling.CalculateElectricalValue(System.Decimal)">
            <summary>
            Calculates the electrical value for the given engineering value 
            using the scaling points of this scaling.
            </summary>
            <param name="engineeringValue">Engineering value</param>
            <returns>Calculated electrical value</returns>
            <remarks>
            This method is virtual, because is must be overrideable e.g. by ZeroSpan scaling. 
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.ZeroSpanScaling.SetScalingPoints(System.Collections.Generic.List{Hbm.Api.SensorDB.Entities.Scalings.ScalingPoint})">
            <summary>
            Sets the interal scaling point list and initializes the zero span properties
            </summary>
            <param name="scalingPoints">list of <see cref="T:Hbm.Api.SensorDB.Entities.Scalings.ScalingPoint"/></param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.ZeroSpanScaling.MapValuesToTwoPointList">
            <summary>
            Maps the field values to the encapsulated scaling point list 
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.ZeroSpanScaling.MapTwoPointListToValues">
            <summary>
            Maps the encapsulated scaling point list into the field values 
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.ZeroSpanScaling.GetElectricalZero">
            <summary>
            Get the value of electrical zero 
            from the encapsulated list
            </summary>
            <returns>electrical zero</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.ZeroSpanScaling.GetElectricalSensitivity">
            <summary>
            Get the value of electrical sensitivity 
            from the encapsulated list
            </summary>
            <returns>electrical sensitivity</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scalings.ZeroSpanScaling.GetEngineeringNominal">
            <summary>
            Get the value of engineering nominal
            from the encapsulated list
            </summary>
            <returns>engineering nominal</returns>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Sensors.BridgeSensor">
            <summary>
            Represents a bridge sensor
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensors.BridgeSensor.#ctor">
            <summary>
            Create a new instance and initialize data
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.BridgeSensor.SensorType">
            <summary>
            Type of the sensor (read only)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.BridgeSensor.BridgeType">
            <summary>
            Type of bridge sensor
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.BridgeSensor.Wiring">
            <summary>
            Number of physical wires
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.BridgeSensor.MinExcitationVoltage">
            <summary>
            Minimum allowed excitation
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.BridgeSensor.MaxExcitationVoltage">
            <summary>
            Minimum allowed excitation
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.BridgeSensor.PreferredExcitationVoltage">
            <summary>
            Preferred excitation voltage.
            Must be between <see cref="P:Hbm.Api.SensorDB.Entities.Sensors.BridgeSensor.MinExcitationVoltage"/> and <see cref="P:Hbm.Api.SensorDB.Entities.Sensors.BridgeSensor.MaxExcitationVoltage"/> 
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.BridgeSensor.CarrierFrequencyType">
            <summary>
            Type of the carrier frequency. 
            If this property equals to <see cref="F:Hbm.Api.SensorDB.Enums.CarrierFrequencyType.Value"/>, 
            then <see cref="P:Hbm.Api.SensorDB.Entities.Sensors.BridgeSensor.CarrierFrequencyValue"/> contains the required value.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.BridgeSensor.CarrierFrequencyValue">
            <summary>
            Frequency of the carrier signal (in Hz). 
            This value should be used only, if the property <see cref="P:Hbm.Api.SensorDB.Entities.Sensors.BridgeSensor.CarrierFrequencyType"/> equals to <see cref="F:Hbm.Api.SensorDB.Enums.CarrierFrequencyType.Value"/> .
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.BridgeSensor.Impedance">
            <summary>
            Impedance (in Ohm). 
            </summary>
            <remarks>
            Only used for non inductive bridge sensors.
            </remarks>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.BridgeSensor.IsInductive">
            <summary>
            Marks a sensor as inductive.
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor">
            <summary>
            Represents a sensor connected via CAN (Controller Area Network) bus
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor.#ctor">
            <summary>
            Create a new instance and initialize data
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor.SensorType">
            <summary>
            Type of the sensor (read only)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor.MessageID">
            <summary>
            Identifier of the CAN bus message for the sensor
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor.IsExtendedFrameFormat">
            <summary>
            Indicates if the extended frame format (29 Bit Identifier) is used.
            Otherwise the standard frame format  (11 Bit Identifier) is used.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor.BitSequence">
            <summary>
            Indicates if big endian encoding (Motorola) is used. 
            Otherwise little endian encoding (Intel) is used. 
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor.PayloadByteCount">
            <summary>
            Size of the data part of the message
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor.RawValueFormat">
            <summary>
            Format of the raw value
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor.SignalType">
            <summary>
            Type of the CAN signal
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor.StartBit">
            <summary>
            Position of the start bit within the can bus message 
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor.SignalLength">
            <summary>
            Number of bits of the signal
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor.ModeSignalRawValueFormat">
            <summary>
            Format of the mode signal raw value
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor.ModeSignalBitSequence">
            <summary>
            Indicates if big endian encoding (Motorola) is used for mode signal. 
            Otherwise little endian encoding (Intel) is used. 
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor.ModeSignalModeValue">
            <summary>
            Mode value of the mode signal
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor.ModeSignalStartBit">
            <summary>
            Position of the mode signal start bit within the can bus message 
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor.ModeSignalBitCount">
            <summary>
            Number of bits of the mode signal
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor.Timeout">
            <summary>
            Waiting time between two signals in milliseconds . If <c>Timeout = 0</c>, no timeout is used.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor.IsActiveQueryEnabled">
            <summary>
            Stimulates the sensor to send data
            </summary>
            <remarks> Reserved for future use.</remarks>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor.ActiveQuery">
            <summary>
            Content of the message
            </summary>
            <remarks> Reserved for future use.</remarks>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor.ActiveQueryRate">
            <summary>
            Rate how often the query is transmitted
            </summary>
            <remarks> Reserved for future use.</remarks>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor.ActiveSupplyVoltage">
            <summary>
            Value of the active supply voltage. This property is for information purposes only.
            </summary>
            <remarks>This is the voltage that is necessary to power this sensor.
            Since this can be set only for the whole CanBus (CanConnector), this value has no direct effect but is just for information purposes.
            To set the supply voltage of the CanConnector please use the <see cref="!:Hbm.Api.Common.Entities.Connectors.CanConnector.SupplyVoltage"/> property!</remarks>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Sensors.CounterSensor">
            <summary>
            Represents a counter sensor
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensors.CounterSensor.#ctor">
            <summary>
            Create a new instance and initialize data
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CounterSensor.SensorType">
            <summary>
            Type of the sensor (read only)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CounterSensor.DigitalInputType">
            <summary>
            Type of the digital input of the sensor.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CounterSensor.IsTerminationEnabled">
            <summary>
            Indicates if the termination is enabled.
            This property is only relevant, if <see cref="P:Hbm.Api.SensorDB.Entities.Sensors.CounterSensor.DigitalInputType"/> is set to <see cref="F:Hbm.Api.SensorDB.Enums.DigitalInputType.Differential"/>.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CounterSensor.UseReferencePulse">
            <summary>
            Indicates if a reference pulse should be used to reset the counter value
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CounterSensor.PulsesPerRound">
            <summary>
            The interpretation of this property depends on the value of <see cref="P:Hbm.Api.SensorDB.Entities.Sensors.CounterSensor.UseReferencePulse"/>.
            Resets the counter value after the occurrence of x reference pulses (if <see cref="P:Hbm.Api.SensorDB.Entities.Sensors.CounterSensor.UseReferencePulse"/> is true), 
            otherwise resets the counter value after n counts. 
            Number of pulses within one round
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CounterSensor.ReferencePulseDivisor">
            <summary>
            Reference pulse divisor (Only every n-th index reset is considered)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CounterSensor.Signal2Type">
            <summary>
            Type of Signal2
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CounterSensor.IsQuadFrequencyEnabled">
            <summary>
            Indicates the use of two 90 degree signals and also the interpretation of rising and falling edges
            of the signal (to get a higher resolution)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CounterSensor.Polarity">
            <summary>
            Polarity (TTL logic)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CounterSensor.ActiveSupplyType">
            <summary>
            Type of the active supply value
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CounterSensor.ActiveSupplyValue">
            <summary>
            Value of the active supply. The type of this value is defined by <see cref="P:Hbm.Api.SensorDB.Entities.Sensors.CounterSensor.ActiveSupplyType"/> 
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CounterSensor.GlitchFilter">
            <summary>
            Glitch filter value in ns (0 = off)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CounterSensor.IsInductive">
            <summary>
            Marks a sensor as inductive.
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Sensors.CurrentProbeSensor">
            <summary>
            Represents a current probe sensor
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensors.CurrentProbeSensor.#ctor">
            <summary>
            Create a new instance and initialize data
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CurrentProbeSensor.SensorType">
            <summary>
            Type of the sensor (read only)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CurrentProbeSensor.ActiveSupplyType">
            <summary>
            Type of the active supply value
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CurrentProbeSensor.ActiveSupplyValue">
            <summary>
            Value of the active supply. The type of this value is defined by <see cref="P:Hbm.Api.SensorDB.Entities.Sensors.VoltageSensor.ActiveSupplyType"/> 
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Sensors.CurrentSensor">
            <summary>
            Represents a current sensor
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensors.CurrentSensor.#ctor">
            <summary>
            Create a new instance and initialize data
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CurrentSensor.SensorType">
            <summary>
            Type of the sensor (read only)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CurrentSensor.CurrentType">
            <summary>
            Type of the current
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CurrentSensor.ActiveSupplyType">
            <summary>
            Type of the active supply value
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.CurrentSensor.ActiveSupplyValue">
            <summary>
            Value of the active supply. The type of this value is defined by <see cref="P:Hbm.Api.SensorDB.Entities.Sensors.CurrentSensor.ActiveSupplyType"/> 
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Sensors.FbgAccelerometerSensor">
            <inheritdoc />
            <summary>
                Represents an accelerometer bragg grating sensor
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensors.FbgAccelerometerSensor.#ctor">
            <summary>
                Create a new instance and initialize data
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.FbgAccelerometerSensor.SensorType">
            <inheritdoc />
            <summary>
                Type of the sensor (read only)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.FbgAccelerometerSensor.FbgSingleFactorCalibration">
            <summary>
                Single factor calibration information for fiber bragg grating related sensors
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Sensors.FbgSensor">
            <inheritdoc />
            <summary>
                Represents a fiber bragg grating sensor
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.FbgSensor.ReferenceWavelength">
            <summary>
                Reference wavelength of an FBG sensor
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Sensors.FbgGenericSensor">
            <inheritdoc />
            <summary>
                Represents a generic fiber bragg grating sensor
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensors.FbgGenericSensor.#ctor">
            <summary>
                Create a new instance and initialize data
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.FbgGenericSensor.SensorType">
            <inheritdoc />
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.FbgGenericSensor.FbgGenericType">
            <summary>
                Generic type used to interpret the type specific properties
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.FbgGenericSensor.FbgMultiFactorCalibration">
            <summary>
                Multi factor calibration information for fiber bragg grating related sensors
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Sensors.FbgStrainGageSensor">
            <inheritdoc />
            <summary>
                Represents a fiber bragg grating strain gage sensor
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensors.FbgStrainGageSensor.#ctor">
            <summary>
                Create a new instance and initialize data
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.FbgStrainGageSensor.SensorType">
            <inheritdoc />
            <summary>
                Type of the sensor (read only)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.FbgStrainGageSensor.FbgSingleFactorCalibration">
            <summary>
                Single factor calibration information for fiber bragg grating related sensors
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Sensors.FbgTemperatureSensor">
            <inheritdoc />
            <summary>
                Represents a fiber bragg grating temperature sensor
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensors.FbgTemperatureSensor.#ctor">
            <summary>
                Create a new instance and initialize data
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.FbgTemperatureSensor.SensorType">
            <inheritdoc />
            <summary>
                Type of the sensor (read only)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.FbgTemperatureSensor.FbgMultiFactorCalibration">
            <summary>
                Multi factor calibration information for fiber bragg grating related sensors
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Sensors.FbgWavelengthSensor">
            <inheritdoc />
            <summary>
                Represents a fiber bragg grating wavelength sensor
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.FbgWavelengthSensor.IsAbsolute">
            <summary>
            Marks a sensor as absolute, meaning that the measurement values correspond to absolute measured wavelength in [nm] instead of differences in [nm] to the reference wavelength of the sensor (relative).
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.FbgWavelengthSensor.SensorType">
            <inheritdoc />
            <summary>
                Type of the sensor (read only)
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Sensors.FrequencySensor">
            <summary>
            Represents a frequency sensor
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensors.FrequencySensor.#ctor">
            <summary>
            Create a new instance and initialize data
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.FrequencySensor.SensorType">
            <summary>
            Type of the sensor (read only)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.FrequencySensor.DigitalInputType">
            <summary>
            Type of the digital input of the sensor.
            This property is only relevant for non inductive frequency sensors (if <see cref="P:Hbm.Api.SensorDB.Entities.Sensors.FrequencySensor.IsInductive"/> is set to <c>false</c>).
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.FrequencySensor.IsTerminationEnabled">
            <summary>
            Indicates if the termination is enabled.
            This property is only relevant, if <see cref="P:Hbm.Api.SensorDB.Entities.Sensors.FrequencySensor.DigitalInputType"/> is set to <see cref="F:Hbm.Api.SensorDB.Enums.DigitalInputType.Differential"/>.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.FrequencySensor.Signal2Type">
            <summary>
            Type of Signal2
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.FrequencySensor.IsQuadFrequencyEnabled">
            <summary>
            Indicates the use of two 90 degree signals and also the interpretation of rising and falling edges
            of the signal (to get a higher resolution)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.FrequencySensor.Polarity">
            <summary>
            Polarity (TTL logic)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.FrequencySensor.ActiveSupplyType">
            <summary>
            Type of the active supply value
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.FrequencySensor.ActiveSupplyValue">
            <summary>
            Value of the active supply. The type of this value is defined by <see cref="P:Hbm.Api.SensorDB.Entities.Sensors.FrequencySensor.ActiveSupplyType"/> 
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.FrequencySensor.GlitchFilter">
            <summary>
            Glitch filter value in ns (0 = off)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.FrequencySensor.IsInductive">
            <summary>
            Marks a sensor as inductive.
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Sensors.IepeSensor">
            <summary>
            Represents an integrated electronics piezo-electric sensor
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensors.IepeSensor.#ctor">
            <summary>
            Create a new instance and initialize data
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.IepeSensor.SensorType">
            <summary>
            Type of the sensor (read only)
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Sensors.LvdtSensor">
            <summary>
            Represents a linear variable differential transformer sensor
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensors.LvdtSensor.#ctor">
            <summary>
            Create a new instance and initialize data
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.LvdtSensor.SensorType">
            <summary>
            Type of the sensor (read only)
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Sensors.NotSupportedSensor">
            <summary>
            Represents a sensor that is not supported
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensors.NotSupportedSensor.#ctor">
            <summary>
            Create a new instance and initialize data
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.NotSupportedSensor.SensorType">
            <summary>
            Type of the sensor (read only)
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Sensors.PiezoPassiveSensor">
            <summary>
            Represents a passive piezo sensor
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensors.PiezoPassiveSensor.#ctor">
            <summary>
            Create a new instance and initialize data
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.PiezoPassiveSensor.SensorType">
            <summary>
            Type of the sensor (read only)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.PiezoPassiveSensor.DischargeTimeType">
            <summary>
            Type of the discharge time
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Sensors.PotentiometerSensor">
            <summary>
            Represents a potentiometer sensor
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensors.PotentiometerSensor.#ctor">
            <summary>
            Create a new instance and initialize data
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.PotentiometerSensor.SensorType">
            <summary>
            Type of the sensor (read only)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.PotentiometerSensor.PreferredExcitationVoltage">
            <summary>
            Preferred excitation voltage.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.PotentiometerSensor.NominalResistance">
            <summary>
            Nominal resistance in Ohm
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.PotentiometerSensor.Wiring">
            <summary>
            Number of physical wires
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Sensors.PtSensor">
            <summary>
            Represents a platin temperature sensor
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensors.PtSensor.#ctor">
            <summary>
            Create a new instance and initialize data
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.PtSensor.SensorType">
            <summary>
            Type of the sensor (read only)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.PtSensor.NominalResistance">
            <summary>
            Nominal resistance in Ohm
            </summary>
            <remarks>
            For now only the following valies are allowed: 10, 100, 500 or 1000 Ohm
            
            There is no additional validation in the setter for restricting user input.
            </remarks>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.PtSensor.Wiring">
            <summary>
            Number of physical wires
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensors.PtSensor.GetMinEngineeringOfPt">
            <summary>
            Returns the mininmum engineering range of a pt sensor according to the current engineering unit (only °C, °F, K, °R, °Rank possible)
            </summary>
            <returns>Minimum engineering range of the pt sensor according to current engineering unit</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensors.PtSensor.GetMaxEngineeringOfPt">
            <summary>
            Returns the maximum engineering range of a pt sensor according to current engineering unit (only °C, °F, K, °R, °Rank possible)
            </summary>
            <returns>Maximum engineering range of the pt sensor according to current engineering unit</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensors.PtSensor.ConvertFromDegreeCelsius(System.Decimal,System.String)">
            <summary>
            Converts given value in °C into demanded unit (°C, °F, °Reamur, °Rankine and K are supported)
            </summary>
            <param name="valueInDegreeCelcius">The value in degree celcius.</param>
            <param name="demandedUnit">The demanded unit.</param>
            <returns>Given °celsius value in demanded unit</returns>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Sensors.PwmSensor">
            <summary>
            Represents a pulse-width modulation sensor
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensors.PwmSensor.#ctor">
            <summary>
            Create a new instance and initialize data
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.PwmSensor.SensorType">
            <summary>
            Type of the sensor (read only)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.PwmSensor.DigitalInputType">
            <summary>
            Type of the digital input of the sensor.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.PwmSensor.IsTerminationEnabled">
            <summary>
            Indicates if the termination is enabled.
            This property is only relevant, if <see cref="P:Hbm.Api.SensorDB.Entities.Sensors.PwmSensor.DigitalInputType"/> is set to <see cref="F:Hbm.Api.SensorDB.Enums.DigitalInputType.Differential"/>.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.PwmSensor.Polarity">
            <summary>
            Polarity (TTL logic)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.PwmSensor.PwmType">
            <summary>
            Type of the pwm sensor
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.PwmSensor.ActiveSupplyType">
            <summary>
            Type of the active supply value
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.PwmSensor.ActiveSupplyValue">
            <summary>
            Value of the active supply. The type of this value is defined by <see cref="P:Hbm.Api.SensorDB.Entities.Sensors.PwmSensor.ActiveSupplyType"/> 
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.PwmSensor.GlitchFilter">
            <summary>
            Glitch filter value in ns (0 = off)
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Sensors.ResistanceSensor">
            <summary>
            Represents a resistance sensor
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensors.ResistanceSensor.#ctor">
            <summary>
            Create a new instance and initialize data
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.ResistanceSensor.SensorType">
            <summary>
            Type of the sensor (read only)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.ResistanceSensor.NominalResistance">
            <summary>
            Nominal resistance in Ohm
            </summary>
            <remarks>
            For now only the following values are allowed: 10, 100, 500 or 1000 Ohm
            
            There is no additional validation in the setter for restricting user input.
            </remarks>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.ResistanceSensor.Wiring">
            <summary>
            Number of physical wires
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Sensors.SsiSensor">
            <summary>
            Represents a SSI sensor
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensors.SsiSensor.#ctor">
            <summary>
            Create a new instance and initialize data
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.SsiSensor.SensorType">
            <summary>
            Type of the sensor (read only)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.SsiSensor.DigitalInputType">
            <summary>
            Type of the digital input of the sensor.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.SsiSensor.IsTerminationEnabled">
            <summary>
            Indicates if the termination is enabled.
            This property is only relevant, if <see cref="P:Hbm.Api.SensorDB.Entities.Sensors.SsiSensor.DigitalInputType"/> is set to <see cref="F:Hbm.Api.SensorDB.Enums.DigitalInputType.Differential"/>.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.SsiSensor.ClockFrequency">
            <summary>
            Clock frequency (in kHz)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.SsiSensor.ResolutionBits">
            <summary>
            Resolution (number of bits)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.SsiSensor.CodingType">
            <summary>
            Type of the ssi coding
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.SsiSensor.ActiveSupplyType">
            <summary>
            Type of the active supply value
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.SsiSensor.ActiveSupplyValue">
            <summary>
            Value of the active supply. The type of this value is defined by <see cref="P:Hbm.Api.SensorDB.Entities.Sensors.SsiSensor.ActiveSupplyType"/> 
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Sensors.ThermoCoupleSensor">
            <summary>
            Represents a thermo couple sensor
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensors.ThermoCoupleSensor.#ctor">
            <summary>
            Create a new instance and initialize data
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.ThermoCoupleSensor.SensorType">
            <summary>
            Type of the sensor (read only)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.ThermoCoupleSensor.ThermoCoupleType">
            <summary>
            Type of thermo couple sensor
            </summary>
            <remarks>
            The input is trimmed an converted to upper case.
            There is no enumeration for this property because more 
            types could be added into the repository without changing the API code.
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensors.ThermoCoupleSensor.GetMaxEngineering">
            <summary>
            Returns the maximum engineering range according to the current ThermoCoupleType and the current engineering unit of the scaling
            </summary>
            <returns>Maximum engineering range according to the current ThermoCoupleType and the current engineering unit of the scaling</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensors.ThermoCoupleSensor.GetMinEngineering">
            <summary>
            Returns the minimum engineering range according to the current ThermoCoupleType and the current engineering unit of the scaling
            </summary>
            <returns>Minimum engineering range according to the current ThermoCoupleType and the current engineering unit of the scaling</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensors.ThermoCoupleSensor.ConvertFromDegreeCelsius(System.Decimal,System.String)">
            <summary>
            Converts given value in °C into demanded unit (°C, °F, °Reamur, °Rankine and K are supported)
            </summary>
            <param name="valueInDegreeCelcius">The value in degree celcius.</param>
            <param name="demandedUnit">The demanded unit.</param>
            <returns>Given °celsius value in demanded unit</returns>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Sensors.VoltageProbeSensor">
            <summary>
            Represents a voltage probe sensor
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensors.VoltageProbeSensor.#ctor">
            <summary>
            Create a new instance and initialize data
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.VoltageProbeSensor.SensorType">
            <summary>
            Type of the sensor (read only)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.VoltageProbeSensor.VoltageProbeType">
            <summary>
            Type of the voltage probe sensor
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.VoltageProbeSensor.MinCompensationRange">
            <summary>
            Minimal compensation value in F (Farad)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.VoltageProbeSensor.MaxCompensationRange">
            <summary>
            Maximal compensation value in F (Farad)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.VoltageProbeSensor.ActiveSupplyType">
            <summary>
            Type of the active supply value
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.VoltageProbeSensor.ActiveSupplyValue">
            <summary>
            Value of the active supply. The type of this value is defined by <see cref="P:Hbm.Api.SensorDB.Entities.Sensors.VoltageSensor.ActiveSupplyType"/> 
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Sensors.VoltageSensor">
            <summary>
            Represents a voltage sensor
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensors.VoltageSensor.#ctor">
            <summary>
            Create a new instance and initialize data
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.VoltageSensor.SensorType">
            <summary>
            Type of the sensor (read only)
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.VoltageSensor.CurrentType">
            <summary>
            Type of the current
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.VoltageSensor.ActiveSupplyType">
            <summary>
            Type of the active supply value
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensors.VoltageSensor.ActiveSupplyValue">
            <summary>
            Value of the active supply. The type of this value is defined by <see cref="P:Hbm.Api.SensorDB.Entities.Sensors.VoltageSensor.ActiveSupplyType"/> 
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Translation">
            <summary>
            Encapsulates a translated entity.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Translation.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Translation.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Creates a new instance and initializes the new instance using the given parameters.
            </summary>
            <param name="translationID">ID of the translation</param>
            <param name="twoLetterISOLanguageName">Two letter iso language name of a language in the database table "Language"</param>
            <param name="description">Description (translated item)</param>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Translation.TranslationID">
            <summary>
            Primary key of the translation in the repository
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Translation.TwoLetterISOLanguageName">
            <summary>
            Iso language name (two letter) used for translation.
            Must match to a stored language in the repository.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Translation.Description">
            <summary>
            Description (translated item)
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.VersionInfo">
            <summary>
            Encapsulates the version info of the sensor database
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.VersionInfo.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.VersionInfo.VersionNumber">
            <summary>
            Version number 
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.VersionInfo.Description">
            <summary>
            Description of the version
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.VersionInfo.IsHbmDb">
            <summary>
            Database type: HBM or User
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Scaling">
            <summary>
            Represents the scaling of the sensor values
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scaling.ScalingID">
            <summary>
            Primary key of the scaling in the repository
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scaling.ScalingType">
            <summary>
            Type of the scaling (read only)
            </summary>
            <remarks>
            Must be implemented by derived classes
            </remarks>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scaling.MinEngineeringRange">
            <summary>
            Minimal physical value
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scaling.MaxEngineeringRange">
            <summary>
            Maximal physical value
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scaling.MinHardwareEngineeringRange">
            <summary>
             Minimal physical value that can be measured by the device within its currently set measurement range
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scaling.MaxHardwareEngineeringRange">
            <summary>
             Maximal physical value that can be measured by the device within its currently set measurement range
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scaling.IsEngineeringRangeRms">
            <summary>
            Indicates, if the engineering ranges (<see cref="P:Hbm.Api.SensorDB.Entities.Scaling.MinEngineeringRange"/> and <see cref="P:Hbm.Api.SensorDB.Entities.Scaling.MaxEngineeringRange"/>) 
            are given as root mean square values
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Scaling.EngineeringUnit">
            <summary>
            Physical unit (e.g. "kN" or "mm").
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Scaling.RoundResult(System.Decimal)">
            <summary>
            Rounds the given <paramref name="value"/> to the number of decimal places
            after the decimal point which is specified by <see cref="F:Hbm.Api.SensorDB.Entities.Scaling.NUM_DECIMALS_TO_ROUND"/>.
            </summary>
            <remarks>
            This method is used for rounding results, to round calculation values like 1,99999999999999999999999998 to 2,000000.
            </remarks>
            <param name="value">Value to round</param>
            <returns>Returns the rounded value</returns>
        </member>
        <member name="T:Hbm.Api.SensorDB.Entities.Sensor">
            <summary>
            Represents a physical sensor, e.g. Temperature, Bridge or Voltage
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensor.#ctor">
            <summary>
            Create a new instance and initialize data
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensor.SensorType">
            <summary>
            Type of the sensor (read only)
            </summary>
            <remarks>
            Must be implemented by derived classes
            </remarks>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensor.SensorID">
            <summary>
            Primary key of the sensor in the repository
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensor.UniqueName">
            <summary>
            Unique programmatic identifier of the sensor, e.g. a guid or similar
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensor.Description">
            <summary>
            Translated name of the sensor
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensor.Category">
            <summary>
            Category to which the sensor belongs
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensor.CategoryPositionNo">
            <summary>
            Sort position of the sensor within its category
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensor.ManufacturerName">
            <summary>
            Manufacturer name of the sensor, e.g. HBM
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensor.IsUserDefined">
            <summary>
            Indicates if this sensor is defined by the user, not by HBM. 
            Important: this property is for internal use by HBM only. Do not change the value! 
            This property is internally used for synchronization during database updates.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensor.Scaling">
            <summary>
            Scaling with all needed parameters
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensor.ModelName">
            <summary>
            Name of the sensor model
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensor.CalibrationDate">
            <summary>
            Date of calibration 
            or <c>null</c> if not specified.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensor.CalibrationExpirationDate">
            <summary>
            Expiration date of the calibration
            or <c>null</c> if not specified.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensor.CalibratedBy">
            <summary>
            Name of the person who calibrated the sensor
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensor.StorageLocation">
            <summary>
            Location where to find the sensor
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensor.IsSingleUse">
            <summary>
            Indicates if the sensor can only be assigned to one single channel
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensor.SerialNumber">
            <summary>
            Serial number of a concrete sensor
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensor.Comment">
            <summary>
            Comment for the sensor
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensor.PreferredChannelName">
            <summary>
            Preferred name for the channel to which the sensor belongs. 
            This name should be used as channel name, if the channel wasn't named before. 
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensor.Info">
            <summary>
            Additional information (or data) for the sensor
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensor.ExpectedShuntValue">
            <summary>
            Expected value in the shunt
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensor.NeedsScalingAdaptation">
            <summary>
            Indicates if a sensor should not be used without prior scaling adaptation (if true) 
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensor.LastModifiedDate">
            <summary>
            Date of last modification in the database. 
            This property is for internal use only. Do not change the value.
            </summary>
            <remarks>The setter of this property is public only because of serialization purposes</remarks>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensor.ElectricalUnit">
            <summary>
            Electrical unit of the sensor (read only)
            </summary>
            <remarks>
            Read only properties cannot be serialized to xml, so it is marked as XmlIgnore
            </remarks>
        </member>
        <member name="P:Hbm.Api.SensorDB.Entities.Sensor.Descriptors">
            <summary>
            Read only collection of descriptors for the sensor.
            List items may not added or changed because changes on the list are not saved 
            in the repository. But the instance of the list may be changed.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensor.Copy">
            <summary>
            Creates a new deep copy of the current sensor.
            In the new copy the database dependent ids are reset,  and 
            a new unique name is generated. The sensor is marked as user defined
            and the last modified date is updated.
            </summary>
            <remarks>
            The new sensor does not have any descriptors.
            </remarks>
            <returns>New sensor instance as a copy of the current sensor</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Entities.Sensor.GenerateUniqueName">
            <summary>
            Generates a new unique name for the sensor by generating a new Guid.
            </summary>
            <returns>Newly generated unique name</returns>
        </member>
        <member name="T:Hbm.Api.SensorDB.Enums.SensorType">
            <summary>
            Type of the sensor.
            </summary>
            <remarks>
            ATTENTION:
            The value of the sensor type in this enumeration 
            must match the SensorTypeID in the table SensorType
            </remarks>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.SensorType.NotSupported">
            <summary>
            Not supported sensor
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.SensorType.Bridge">
            <summary>
            Bridge sensor (Initial value if not set)
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.SensorType.CanBus">
            <summary>
            CAN bus sensor
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.SensorType.Counter">
            <summary>
            Counter sensor
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.SensorType.Current">
            <summary>
            Current sensor
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.SensorType.Frequency">
            <summary>
            Frequency sensor
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.SensorType.Iepe">
            <summary>
            IEPE Sensor
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.SensorType.Lvdt">
            <summary>
            Lvdt sensor
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.SensorType.PiezoPassive">
            <summary>
            Piezo passive sensor
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.SensorType.Potentiometer">
            <summary>
            Potentiometer sensor
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.SensorType.Pt">
            <summary>
            Pt sensor
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.SensorType.Pwm">
            <summary>
            Pwm sensor
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.SensorType.Resistance">
            <summary>
            Resistance sensor
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.SensorType.Ssi">
            <summary>
            SSI sensor
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.SensorType.ThermoCouple">
            <summary>
            Thermocouple sensor
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.SensorType.Voltage">
            <summary>
            Voltage sensor
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.SensorType.VoltageProbe">
            <summary>
            Voltage probe sensor
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.SensorType.CurrentProbe">
            <summary>
            Current probe sensor
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.SensorType.FbgGeneric">
            <summary>
            Generic fiber bragg grating sensor
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.SensorType.FbgStrainGage">
            <summary>
            Fiber bragg grating straingage sensor
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.SensorType.FbgTemperature">
            <summary>
            Fiber bragg grating thermocouple sensor
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.SensorType.FbgWavelength">
            <summary>
            Fiber bragg grating wavelength sensor
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.SensorType.FbgAccelerometer">
            <summary>
            Fiber bragg grating accelerometer sensor
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Enums.ScalingType">
            <summary>
            Type of the sensor scaling.
            </summary>
            <remarks>
            ATTENTION:
            The value of the scaling type in this enumeration 
            must match the ScalingTypeID in the table ScalingType
            </remarks>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.ScalingType.NotSupported">
            <summary>
            Not supported scaling
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.ScalingType.TwoPoint">
            <summary>
            Two point scaling (Initial value if not set)
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.ScalingType.ZeroSpan">
            <summary>
            Zero span scaling
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.ScalingType.Table">
            <summary>
            Table scaling
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.ScalingType.Polynomial">
            <summary>
            Polynomial scaling
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.ScalingType.Gage">
            <summary>
            Gage factor scaling
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.ScalingType.Internal">
            <summary>
            Internal scaling
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.ScalingType.CanBus">
            <summary>
            Canbus scaling
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.ScalingType.Off">
            <summary>
            No scaling is used (off)
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Enums.DischargeTimeType">
            <summary>
            Type of the discharge time.
            </summary>
            <remarks>
            ATTENTION:
            The value of the discharge time type in this enumeration 
            must match the DischargeTimeTypeID in the table DischargeTime
            </remarks>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.DischargeTimeType.Slow">
            <summary>
            Slow discharge time (Initial value if not set)
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.DischargeTimeType.Medium">
            <summary>
            Medium discharge time
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.DischargeTimeType.Fast">
            <summary>
            Fast discharge time
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Enums.SsiCodingType">
            <summary>
            Type of the coding.
            </summary>
            <remarks>
            ATTENTION:
            The value of the ssi coding type in this enumeration 
            must match the CodingTypeID in the table CodingType
            </remarks>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.SsiCodingType.Gray">
            <summary>
            Gray SSI coding (Initial value if not set)
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.SsiCodingType.Dual">
            <summary>
            Dual SSI coding
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Enums.PwmType">
            <summary>
            Type of the pwm.
            </summary>
            <remarks>
            ATTENTION:
            The value of the pwm type in this enumeration 
            must match the PwmTypeID in the table PwmType
            </remarks>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.PwmType.DutyCycle">
            <summary>
            Duty cycle (Initial value if not set)
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.PwmType.Duration">
            <summary>
            Duration 
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.PwmType.Period">
            <summary>
            Period 
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Enums.DigitalInputType">
            <summary>
            Type of the digital input.
            </summary>
            <remarks>
            ATTENTION:
            The value of the digital input type in this enumeration 
            must match the DigitalInputTypeID in the table DigitalInputType
            </remarks>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.DigitalInputType.Differential">
            <summary>
            Differential digial input (Initial value if not set)
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.DigitalInputType.SingleEnded">
            <summary>
            Single ended digial signal
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Enums.BridgeType">
            <summary>
            Type of the bridge.
            </summary>
            <remarks>
            ATTENTION:
            The value of the bridge type in this enumeration 
            must match the BridgeTypeID in the table BridgeType
            </remarks>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.BridgeType.FullBridge">
            <summary>
            Full bridge (Initial value if not set)
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.BridgeType.HalfBridge">
            <summary>
            Half bridge
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.BridgeType.QuarterBridge">
            <summary>
            Quarter bridge
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Enums.CarrierFrequencyType">
            <summary>
            Type of the carrier frequency.
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.CarrierFrequencyType.Auto">
            <summary>
            Auto. Either carrier frequency or direct voltage is used for excitation depending on the amplifier. 
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.CarrierFrequencyType.AutoAc">
            <summary>
            Use carrier, but leave frequency to amplifier.
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.CarrierFrequencyType.Dc">
            <summary>
            Use DC.
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.CarrierFrequencyType.Value">
            <summary>
            Use the value of the property <see cref="P:Hbm.Api.SensorDB.Entities.Sensors.BridgeSensor.CarrierFrequencyValue"/> as carrier frequency.
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Enums.CurrentType">
            <summary>
            Type of the current.
            </summary>
            <remarks>
            ATTENTION:
            The value of the current type in this enumeration 
            must match the CurrentTypeID in the table CurrentType
            </remarks>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.CurrentType.DC">
            <summary>
            Direct current (DC). (Initial value if not set)
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.CurrentType.AC">
            <summary>
            Alternating current (AC) 
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Enums.ActiveSupplyType">
            <summary>
            Type of the active supply.
            </summary>
            <remarks>
            ATTENTION:
            The value of the active supply type in this enumeration 
            must match the ActiveSupplyTypeID in the table ActiveSupplyType
            </remarks>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.ActiveSupplyType.Voltage">
            <summary>
            Active supply in voltage
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.ActiveSupplyType.Current">
            <summary>
            Active supply in current
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Enums.RawValueFormat">
            <summary>
            Format of the raw value from a can signal.
            </summary>
            <remarks>
            ATTENTION:
            The value of the can raw value type in this enumeration 
            must match the RawValueFormatID in the table RawValueFormat
            </remarks>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.RawValueFormat.UnsignedInt32">
            <summary>
            Unsigned 32 bit integer (Initial value if not set)
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.RawValueFormat.SignedInt32">
            <summary>
            Signed 32 bit integer
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.RawValueFormat.UnsignedInt64">
            <summary>
            Unsigned 64 bit integer
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.RawValueFormat.SignedInt64">
            <summary>
            Signed 64 bit integer
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.RawValueFormat.Float32">
            <summary>
            32 bit floating point 
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.RawValueFormat.Float64">
            <summary>
            64 bit floating point
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Enums.CanSignalType">
            <summary>
            Type of can signals.
            </summary>
            <remarks>
            ATTENTION:
            The value of the can signal type in this enumeration 
            must match the SignalTypeID in the table SignalType
            </remarks>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.CanSignalType.Standard">
            <summary>
            Standard signal (Initial value if not set)
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.CanSignalType.ModeDependent">
            <summary>
            Mode depenent signal
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.CanSignalType.Mode">
            <summary>
            Mode signal
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Enums.BitSequence">
            <summary>
            Bit sequence type of the CAN data
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.BitSequence.Intel">
            <summary>
            Intel (Little Endian)
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.BitSequence.Motorola">
            <summary>
            Motorola (Big Endian)
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Enums.PolarityType">
            <summary>
            Type of the polarity (ttl logic).
            </summary>
            <remarks>
            ATTENTION:
            The value of the polarity type in this enumeration 
            must match the PolarityTypeID in the table PolarityType
            </remarks>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.PolarityType.NotInverted">
            <summary>
            Not inverted polarity (Initial value if not set)
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.PolarityType.Inverted">
            <summary>
            Inverted polarity
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Enums.Signal2Type">
            <summary>
            Type of the Signal2.
            </summary>
            <remarks>
            ATTENTION:
            The value of the Signal2 type in this enumeration 
            must match the Signal2TypeID in the table Signal2Type
            </remarks>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.Signal2Type.Off">
            <summary>
            F1+F2 signal is evaluated 
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.Signal2Type.Dynamic">
            <summary>
            Direction is determined by 90° phase-delayed F2 signal
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.Signal2Type.Static">
            <summary>
            Direction is determined by the static value (high/low) of F2 signal 
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Enums.VoltageProbeType">
            <summary>
            Type of the VoltageProbe sensor.
            </summary>
            <remarks>
            ATTENTION:
            The value of the VoltageProbe type in this enumeration 
            must match the VoltageProbeTypeID in the table VoltageProbeType
            </remarks>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.VoltageProbeType.PassiveSingleEnded">
            <summary>
            PAS_SE, Passive single ended
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.VoltageProbeType.PassiveSingleEndedWithIsolation">
            <summary>
            PAS_SE_ISO, Passive single ended with isolation
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.VoltageProbeType.PassiveSingleEndedWithIsolationXT">
            <summary>
            PAS_SE_ISO_XT, Passive single ended with isolation for an GHS XT board
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.VoltageProbeType.PassiveDifferential">
            <summary>
            PAS_DIFF, Passive differential
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.VoltageProbeType.ActiveDifferential">
            <summary>
            ACT_DIFF, Active differential
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.VoltageProbeType.CurrentWithVoltageOut">
            <summary>
            Current, Current with voltage out
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Enums.ResistanceSensorWiring">
            <summary>
            Number of the wires for the ResistanceSensor.
            </summary>
            <remarks>
            Only the int value is used for store.
            There is no corresponding table in the repository.
            </remarks>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.ResistanceSensorWiring.NotSet">
            <summary>
            Initial value if not set
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.ResistanceSensorWiring.ThreeWire">
            <summary>
            3 wires
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.ResistanceSensorWiring.FourWire">
            <summary>
            4 wires
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Enums.PtSensorWiring">
            <summary>
            Number of the wires for the PtSensor.
            </summary>
            <remarks>
            Only the int value is used for store.
            There is no corresponding table in the repository.
            </remarks>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.PtSensorWiring.NotSet">
            <summary>
            Initial value if not set
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.PtSensorWiring.ThreeWire">
            <summary>
            3 wires
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.PtSensorWiring.FourWire">
            <summary>
            4 wires
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Enums.PotentiometerSensorWiring">
            <summary>
            Number of the wires for the PotentiometerSensor.
            </summary>
            <remarks>
            Only the int value is used for store.
            There is no corresponding table in the repository.
            </remarks>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.PotentiometerSensorWiring.NotSet">
            <summary>
            Initial value if not set
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.PotentiometerSensorWiring.ThreeWire">
            <summary>
            3 wires
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.PotentiometerSensorWiring.FourWire">
            <summary>
            4 wires
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.PotentiometerSensorWiring.FiveWire">
            <summary>
            5 wires
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.PotentiometerSensorWiring.SixWire">
            <summary>
            6 wires
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Enums.BridgeSensorWiring">
            <summary>
            Number of the wires for the BridgeSensor.
            </summary>
            <remarks>
            Only the int value is used for store.
            There is no corresponding table in the repository.
            </remarks>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.BridgeSensorWiring.NotSet">
            <summary>
            Initial value if not set
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.BridgeSensorWiring.ThreeWire">
            <summary>
            3 wires
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.BridgeSensorWiring.FourWire">
            <summary>
            4 wires
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.BridgeSensorWiring.FiveWire">
            <summary>
            5 wires
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.BridgeSensorWiring.SixWire">
            <summary>
            6 wires
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Enums.FrameFormat">
            <summary>
            Frame formats for the CanSensor.
            </summary>
            <remarks>
            Only the int value is used for store.
            There is no corresponding table in the repository.
            </remarks>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.FrameFormat.Standard">
            <summary>
            Initial value if not set
            </summary>
        </member>
        <member name="F:Hbm.Api.SensorDB.Enums.FrameFormat.Extended">
            <summary>
            3 wires
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.Exceptions.AttachmentToLargeException">
            <summary>
            This exception indicates that an attachment is to large to be inserted into the database.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.AttachmentToLargeException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.AttachmentToLargeException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.AttachmentToLargeException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.SensorDB.Exceptions.CategoryHasChildsException">
            <summary>
            This exception indicates that a category still has child elements.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.CategoryHasChildsException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.CategoryHasChildsException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.CategoryHasChildsException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.SensorDB.Exceptions.FallbackLanguageDeleteException">
            <summary>
            This exception indicates that it was tried to delete the current fallback language.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.FallbackLanguageDeleteException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.FallbackLanguageDeleteException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.FallbackLanguageDeleteException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.SensorDB.Exceptions.InvalidCANFileFormatException">
            <summary>
            This exception indicates that a can file has an invalid file format.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.InvalidCANFileFormatException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.InvalidCANFileFormatException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.InvalidCANFileFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.SensorDB.Exceptions.LanguageNotFoundException">
            <summary>
            This exception indicates that a language was not found in the sensor db.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.LanguageNotFoundException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.LanguageNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.LanguageNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.SensorDB.Exceptions.CategoryNotAssignedException">
            <summary>
            This exception indicates that a sensors has no category instance assigned to.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.CategoryNotAssignedException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.CategoryNotAssignedException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.CategoryNotAssignedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.SensorDB.Exceptions.ScalingNotAssignedException">
            <summary>
            This exception indicates that a sensors has no scaling instance assigned to.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.ScalingNotAssignedException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.ScalingNotAssignedException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.ScalingNotAssignedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.SensorDB.Exceptions.RootCategoryNotFoundException">
            <summary>
            This exception indicates that a required root category does not exist in the database.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.RootCategoryNotFoundException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.RootCategoryNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.RootCategoryNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.SensorDB.Exceptions.ScalingNotSupportedException">
            <summary>
            This exception indicates that a not supported scaling was used with the database opertions.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.ScalingNotSupportedException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.ScalingNotSupportedException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.ScalingNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">
            <summary>
            Data exception for common (non concrete) exceptions of the sensor db api,
            e.g. for encapsulating database errors. 
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.SensorDBDataException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.SensorDBDataException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.SensorDBDataException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.SensorDB.Exceptions.SensorDBException">
            <summary>
            Base class for custom exceptions of the sensor db api
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.SensorDBException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.SensorDBException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.SensorDBException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.SensorDB.Exceptions.SensorNotSupportedException">
            <summary>
            This exception indicates that a not supported sensors was used with the database opertions.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.SensorNotSupportedException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.SensorNotSupportedException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Exceptions.SensorNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.SensorDB.Helper.Extensions">
            <summary>
            Extension helpers for objects in SenorDB.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Helper.Extensions.PeekOrDefault(System.Collections.Generic.Stack{Hbm.Api.SensorDB.Entities.HierarchicalCategory})">
            <summary>
            Implements a peek or default (linq) extension
            </summary>
        </member>
        <member name="T:Hbm.Api.SensorDB.ISensorDB">
            <summary>
            Interface of the sensor db api.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.ISensorDB.ConnectionString">
            <summary>
            Connection string for connecting to the database. 
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.ISensorDB.ProviderInvariantName">
            <summary>
            Provider invariant name of the database provider.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.ISensorDB.MaxAttachmentLength">
            <summary>
            Gets or sets the maximum length of the attachment.
            </summary>
            <value>
            The maximum length of the attachment.
            </value>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.ClearConnectionPool">
            <summary>
            Empties the connection pool associated with the underlying connection.
            </summary>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.ShrinkDatabase">
            <summary>
            Recover free space by reorganizing database pages.
            </summary>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.CategoryExist(System.Int32)">
            <summary>
            Checks if the category by the given category id exist in database.
            </summary>
            <param name="categoryId">Id of the category to check.</param>
            <returns>True if category exist, otherwise false.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.GetCategory(System.Int32)">
            <summary>
            Reads the category with the specified category id from the database.
            </summary>
            <param name="categoryID">ID of the category</param>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Category"/>, or <c>null</c> if not found</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.GetCategoryByInternalID(System.Int32)">
            <summary>
            Reads the category with the specified internal id from the database.
            </summary>
            <param name="internalID">Internal ID of the category</param>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Category"/>, or <c>null</c> if not found</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.GetCategories">
            <summary>
            Reads all categories from the database.
            </summary>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Category"/> instances.</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.GetHierarchicalCategories">
            <summary>
            Reads all hierarchical categories from the database.
            The hierarchical categories can be used to create a tree structure of the sensor database content.
            </summary>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.HierarchicalCategory"/> instances.</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.InsertCategory(Hbm.Api.SensorDB.Entities.Category)">
            <summary>
            Inserts the given category into the database.
            </summary>
            <param name="category">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Category"/> to be inserted</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="category"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.UpdateCategory(Hbm.Api.SensorDB.Entities.Category)">
            <summary>
            Updates the given category in the database.
            </summary>
            <param name="category">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Category"/> to be updated</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="category"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.DeleteCategory(System.Int32)">
            <summary>
            Deletes the category with the given category id from the database.
            This can only succeed for categories without child categories and child sensors, 
            otherwise an <see cref="T:Hbm.Api.SensorDB.Exceptions.CategoryHasChildsException"/> exception will occur.
            </summary>
            <param name="categoryID">ID of the category to be deleted</param>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.CategoryHasChildsException">Thrown if the category has child categories or child sensors.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.DeleteCategories(System.Collections.Generic.List{System.Int32})">
            <summary>
            Deletes the categories with the given category ids from the database.
            This can only succeed for categories without child categories and child sensors.
            otherwise an <see cref="T:Hbm.Api.SensorDB.Exceptions.CategoryHasChildsException"/> exception will occur.
            </summary>
            <param name="categoryIds">IDs of the categories to be deleted.</param>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.CategoryHasChildsException">
            Thrown if a database error occurs. 
            For example when trying to delete a category which is referenced by an other category that is not in list.
            </exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if any other database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.SensorExist(System.Int32)">
            <summary>
            Checks if the sensor by the given sensor id exist in database.
            </summary>
            <param name="sensorId">Id of the sensor to check.</param>
            <returns>True if sensor exist, otherwise false.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.GetSensor(System.Int32)">
            <summary>
            Reads the sensor with the specified sensor id from the database.
            </summary>
            <param name="sensorID">ID of the sensor</param>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/>, or <c>null</c> if not found</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.GetSensor(System.String)">
            <summary>
            Reads the sensor with the specified unique name from the database.
            </summary>
            <param name="uniqueName">UniqueName of the sensor</param>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/>, or <c>null</c> if not found</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.HasChangedInDB(Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Checks, if the given sensor instance is different to the sensor with the same SensorID in the database.
            The sensor has changes if the <c>LastModifiedDate</c> property is different.
            </summary>
            <returns>Returns <c>true</c> if the sensor has changes, else <c>false</c>. 
            Returns <c>false</c> if no sensor instance is given. 
            Returns <c>true</c> if the sensor instance was not found in the database (new sensor)</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.GetSensors">
            <summary>
            Reads all sensors from the database.
            </summary>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> instances.</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.GetSensors(Hbm.Api.SensorDB.Entities.Category)">
            <summary>
            Reads all sensors of a given category from the database.
            </summary>
            <param name="category">Target category of the sensor read.</param>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> instances where the <paramref name="category"/> is the parent.</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.GetSensorsBase">
            <summary>
            Returns a list of all sensors with their id, name, category and description from the database.
            If you want to get a list of all sensors with all sensordata (specific sensor data, category, etc.)
            use <see cref="M:Hbm.Api.SensorDB.ISensorDB.GetSensors"/> instead.
            </summary>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> instances.</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.InsertSensor(Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Inserts the given sensor into the database.
            </summary>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> to be inserted</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sensor"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.CategoryNotAssignedException">Thrown if no category instance is assigned to the sensor.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.ScalingNotAssignedException">Thrown if no scaling instance is assigned to the sensor.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.ScalingNotSupportedException">Thrown if the assigned scaling is of type <see cref="T:Hbm.Api.SensorDB.Entities.Scalings.NotSupportedScaling"/>, which is not supported.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorNotSupportedException">Thrown if the sensor is of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.NotSupportedSensor"/>, which is not supported.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.UpdateSensor(Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Updates an existing sensor in the database.
            </summary>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> to be updated</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sensor"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.CategoryNotAssignedException">Thrown if no category instance is assigned to the sensor.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.ScalingNotAssignedException">Thrown if no scaling instance is assigned to the sensor.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.ScalingNotSupportedException">Thrown if the assigned scaling is of type <see cref="T:Hbm.Api.SensorDB.Entities.Scalings.NotSupportedScaling"/>, which is not supported.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorNotSupportedException">Thrown if the sensor is of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.NotSupportedSensor"/>, which is not supported.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.UpdateCategoryOfSensors(System.Collections.Generic.List{Hbm.Api.SensorDB.Entities.Sensor})">
            <summary>
            Updates the parent category for the given sensor ids.
            Note: Only the category property is applied to the database. If you want to update the whole sensor refer to <see cref="M:Hbm.Api.SensorDB.ISensorDB.UpdateSensor(Hbm.Api.SensorDB.Entities.Sensor)"/>.
            </summary>
            <param name="sensors">List of sensors to apply category updates.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sensors"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.DeleteSensor(System.Int32)">
            <summary>
            Deletes the sensor with the given sensor id from the database.
            </summary>
            <param name="sensorID">ID of the sensor to be deleted</param>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.DeleteSensors(System.Collections.Generic.List{System.Int32})">
            <summary>
            Delete the sensors with the given sensor ids from the database.
            </summary>
            <param name="sensorIds">IDs of the sensors to be deleted</param>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.GetDescriptor(System.Int32)">
            <summary>
            Reads the descriptor with the specified descriptor id from the database.
            </summary>
            <param name="descriptorID">ID of the descriptor</param>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Descriptor"/>, or <c>null</c> if not found</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.GetAttachment(System.Int32)">
            <summary>
            Reads the attachment according to the specified descriptor id from the database.
            </summary>
            <param name="descriptorID">ID of the descriptor</param>
            <returns>Attachment as <c>byte[]</c>, or <c>null</c> if not found</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.GetDescriptors">
            <summary>
            Reads all descriptors from the database.
            </summary>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Descriptor"/> instances.</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.GetDescriptors(Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Reads the descriptors for the specified sensor from the database.
            </summary>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> for which the descriptors are searched.</param>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Descriptor"/> instances for the sensor.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sensor"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.InsertDescriptor(Hbm.Api.SensorDB.Entities.Descriptor)">
            <summary>
            Inserts the given descriptor into the database.
            </summary>
            <param name="descriptor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Descriptor"/> to be inserted.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="descriptor"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.InsertDescriptor(Hbm.Api.SensorDB.Entities.Descriptor,System.Byte[])">
            <summary>
            Inserts the given descriptor into the database.
            </summary>
            <param name="descriptor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Descriptor"/> to be inserted.</param>
            <param name="attachment">Attachment as <c>byte[]</c> to be stored with the descriptor</param>
            <exception cref="T:System.ArgumentNullException">
                <p><paramref name="descriptor"/> is null. </p>
                <p>- or - </p>
                <p><paramref name="attachment"/> is null. </p>
            </exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.AttachmentToLargeException">Thrown if the attachment is too large (> 1 GB).</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.UpdateDescriptor(Hbm.Api.SensorDB.Entities.Descriptor)">
            <summary>
            Updates the given descriptor in the database.
            </summary>
            <param name="descriptor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Descriptor"/> to be updated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="descriptor"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.UpdateDescriptor(Hbm.Api.SensorDB.Entities.Descriptor,System.Byte[])">
            <summary>
            Updates the given descriptor in the database.
            </summary>
            <param name="descriptor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Descriptor"/> to be updated.</param>
            <param name="attachment">Attachment as <c>byte[]</c> to be stored with the descriptor</param>
            <exception cref="T:System.ArgumentNullException">
                <p><paramref name="descriptor"/> is null. </p>
                <p>- or - </p>
                <p><paramref name="attachment"/> is null. </p>
            </exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.AttachmentToLargeException">Thrown if the attachment is too large (> 1 GB).</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.DeleteDescriptor(System.Int32)">
            <summary>
            Deletes the descriptor (including the attachment) with the given descriptor id from the database.
            </summary>
            <param name="descriptorID">ID of the descriptor to be deleted</param>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.GetThermoCoupleTypes">
            <summary>
            Reads all thermocouple types from the database.
            </summary>
            <returns>List of strings with all thermocouple types.</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.InsertThermoCoupleType(System.String)">
            <summary>
            Inserts the given thermocouple type into the database. 
            Instead of updating an existing thermocouple types, a delete of the existing type 
            and an insert of a new one is required.
            </summary>
            <param name="thermoCoupleType">New thermo couple type to be inserted.</param>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.DeleteThermoCoupleType(System.String)">
            <summary>
            Deletes the given thermocouple type from the database.
            </summary>
            <param name="thermoCoupleType">Thermocouple type to be deleted.</param>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.GetLanguage(System.String)">
            <summary>
            Reads the language for the specified iso language name (two letter) from the database.
            </summary>
            <param name="twoLetterISOLanguageName">Iso language name (two letter)</param>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Language"/>, or <c>null</c> if not found</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.GetLanguages">
            <summary>
            Reads all languages from the database.
            </summary>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Language"/> instances.</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.GetFallbackLanguage">
            <summary>
            Reads the fallback language from the database.
            </summary>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Language"/>, or <c>null</c> if not found</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.SetFallbackLanguage(Hbm.Api.SensorDB.Entities.Language)">
            <summary>
            Sets the given language as the fallback language and removes the flag from other languages in the database.
            </summary>
            <param name="fallbackLanguage">Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Language"/> to be set as fallback language</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fallbackLanguage"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.GetActiveLanguage">
            <summary>
            Reads the language instance for the active language (set by SetActiveLanguage) from the database.
            </summary>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Language"/>, or <c>null</c> if not found</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.SetActiveLanguage(System.String)">
            <summary>
            Sets the current active language (not stored in the database).
            </summary>
            <param name="twoLetterISOLanguageName">Iso language name (two letter) of the current language</param>
            <returns><c>true</c>, if the current language exists and was set, otherwise <c>false</c>. 
            If the current language does not exist (and so <c>false</c> is retrieved), then the fallback language is set as active language.</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.InsertLanguage(Hbm.Api.SensorDB.Entities.Language)">
            <summary>
            Inserts the given language into the database. 
            All translations of the fallback language are copied and inserted for this new language.
            </summary>
            <param name="language">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Language"/> to be inserted.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="language"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.UpdateLanguage(Hbm.Api.SensorDB.Entities.Language)">
            <summary>
            Updates the description of the given language.
            </summary>
            <param name="language">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Language"/> to be updated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="language"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.DeleteLanguage(System.String)">
            <summary>
            Deletes the language with the given iso language name (two letter) from the database.
            </summary>
            <param name="twoLetterISOLanguageName">Iso language name (two letter) of the language to be deleted.</param>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.FallbackLanguageDeleteException">Thrown if it was tried to delete the fallback language.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.GetTranslations(Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Reads the translations for the specified sensor from the database.
            </summary>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> for which the translations are searched.</param>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Translation"/> instances for the sensor.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sensor"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.GetTranslations(Hbm.Api.SensorDB.Entities.Category)">
            <summary>
            Reads the translations for the specified category from the database.
            </summary>
            <param name="category">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Category"/> for which the translations are searched.</param>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Translation"/> instances for the category.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="category"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.UpdateTranslation(Hbm.Api.SensorDB.Entities.Translation)">
            <summary>
            Updates the given translation in the database.
            </summary>
            <param name="translation">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Translation"/> to be updated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="translation"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
            <remarks>
            This method only updates translations. 
            Inserts of translations are indirectly done by inserting a new sensor or a new category. 
            Therefore there is no need for a method to explicitly insert a new translation.
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.GetVersionInfo">
            <summary>
            Reads the version info of the sensor db from the database.
            </summary>
            <returns>Version info</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.SaveVersion(Hbm.Api.SensorDB.Entities.VersionInfo)">
            <summary>
            Saves the version info of the sensor db to the database.
            </summary>
            <param name="versionInfo">Version info to be stored.</param>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.ISensorDB.ImportCANDatabase(System.String,Hbm.Api.SensorDB.Entities.Category,System.Boolean)">
            <summary>
            Imports a CAN database from the given file name.
            </summary>
            <param name="filename">Path and filename of the CAN database</param>
            <param name="rootCategory">Root category of the imported data</param>
            <param name="useCompoundNames">Flag, if compound names should be generated for sensor descriptions</param>
        </member>
        <member name="T:Hbm.Api.SensorDB.ScalingFactory">
            <summary>
            Factory for creating scaling instances
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.ScalingFactory.CreateScaling(Hbm.Api.SensorDB.Enums.ScalingType)">
            <summary>
            Creates a concrete scaling instance according to the given scaling type
            and sets the scaling type.
            </summary>
            <param name="scalingType">Scaling type to identify the concrete scaling</param>
            <returns>Concrete scaling instance</returns>
            <exception cref="T:System.NotImplementedException">Thrown for not implemented scaling types.</exception>
        </member>
        <member name="T:Hbm.Api.SensorDB.SensorFactory">
            <summary>
            Factory for creating sensor instances
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorFactory.CreateSensor(Hbm.Api.SensorDB.Enums.SensorType)">
            <summary>
            Creates a concrete sensor instance according to the given sensor type 
            and sets the <see cref="P:Hbm.Api.SensorDB.Entities.Sensor.SensorType"/> and the <see cref="P:Hbm.Api.SensorDB.Entities.Sensor.UniqueName"/>
            </summary>
            <param name="sensorType">Sensor type to identify the concrete sensor</param>
            <returns>Concrete sensor instance</returns>
            <exception cref="T:System.NotImplementedException">Thrown for not implemented sensor types.</exception>
        </member>
        <member name="T:Hbm.Api.SensorDB.SensorDBManager">
            <summary>
            Facade to access the complete functionality of the sensor db api.
            Implements the interface ISensorDB explicitly.
            </summary>
            <example>
            <code>
            <p>ISensorDB sensorDBManager = new SensorDBManager();</p>
            <p>Sensor sensor = sensorDBManager.GetSensor("My unique sensor name");</p>
            </code>
            </example>
            <remarks>
            The interface ISensorDB must be implemented explicitly in this class.
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.#ctor">
            <summary>
            Creates a new instance and sets default values 
            (for the database connection and user language).
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.#ctor(System.String)">
            <summary>
            Creates a new instance and sets the given iso language name as current language.
            Default values are used for the database connection.
            </summary>
            <param name="twoLetterISOLanguageName">Iso language name of the used language (two letter)</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance and sets the given iso language name, connections string and 
            database provider.
            </summary>
            <param name="twoLetterISOLanguageName">Iso language name of the used language (two letter)</param>
            <param name="connectionString">Connection string for connecting to the database</param>
            <param name="providerInvariantName">Provider invariant name of the database provider (e.g. <c>"System.Data.VistaDB5"</c> or <c>"System.Data.SqlClient"</c>)</param>
        </member>
        <member name="P:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#ConnectionString">
            <summary>
            Connection string for connecting to the database. 
            Default value: <c>"Data Source=HBMSensorDatabase.vdb5"</c>
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#ProviderInvariantName">
            <summary>
            Provider invariant name of the database provider.
            Default is the VistaDB invariant provider name.
            </summary>
        </member>
        <member name="P:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#MaxAttachmentLength">
            <summary>
            Gets or sets the maximum length of the attachment.
            </summary>
            <value>
            The maximum length of the attachment.
            </value>
        </member>
        <member name="P:Hbm.Api.SensorDB.SensorDBManager.ThisInterface">
            <summary>
            Encapsulates the casting the current instance (this) to the 
            explicitly implemented interface ISensorDB.
            Using this property, no further casting to the interface is required.
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#ClearConnectionPool">
            <summary>
            Empties the connection pool associated with the underlying connection.
            </summary>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#ShrinkDatabase">
            <summary>
            Recover free space by reorganizing database pages.
            </summary>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#CategoryExist(System.Int32)">
            <summary>
            Checks if the category by the given category id exist in database.
            </summary>
            <param name="categoryId">Id of the category to check.</param>
            <returns>True if category exist, otherwise false.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#GetCategory(System.Int32)">
            <summary>
            Reads the category with the specified category id from the database.
            </summary>
            <param name="categoryID">ID of the category</param>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Category"/>, or <c>null</c> if not found</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#GetCategoryByInternalID(System.Int32)">
            <summary>
            Reads the category with the specified internal id from the database.
            </summary>
            <param name="internalID">Internal ID of the category</param>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Category"/>, or <c>null</c> if not found</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#GetCategories">
            <summary>
            Reads all categories from the database.
            </summary>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Category"/> instances.</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#GetHierarchicalCategories">
            <summary>
            Reads all hierarchical categories from the database.
            The hierarchical categories can be used to create a tree structure of the sensor database content,
            e.g. for later mapping these hierarchical elements to a visual tree control.
            </summary>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.HierarchicalCategory"/> instances.</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#InsertCategory(Hbm.Api.SensorDB.Entities.Category)">
            <summary>
            Inserts the given category into the database.
            </summary>
            <param name="category">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Category"/> to be inserted</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="category"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#UpdateCategory(Hbm.Api.SensorDB.Entities.Category)">
            <summary>
            Updates the given category in the database.
            </summary>
            <param name="category">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Category"/> to be updated</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="category"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#DeleteCategory(System.Int32)">
            <summary>
            Deletes the category with the given category id from the database.
            This can only succeed for categories without child categories and child sensors, 
            otherwise an <see cref="T:Hbm.Api.SensorDB.Exceptions.CategoryHasChildsException"/> exception will occur.
            </summary>
            <param name="categoryID">ID of the category to be deleted</param>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.CategoryHasChildsException">Thrown if the category has child categories or child sensors.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#DeleteCategories(System.Collections.Generic.List{System.Int32})">
            <summary>
            Deletes the categories with the given category ids from the database.
            This can only succeed for categories without child categories and child sensors.
            otherwise an <see cref="T:Hbm.Api.SensorDB.Exceptions.CategoryHasChildsException"/> exception will occur.
            </summary>
            <param name="categoryIds">IDs of the categories to be deleted.</param>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.CategoryHasChildsException">
            Thrown if a database error occurs. 
            For example when trying to delete a category which is referenced by an other category that is not in list.
            </exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if any other database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#SensorExist(System.Int32)">
            <summary>
            Checks if the sensor by the given sensor id exist in database.
            </summary>
            <param name="sensorId">Id of the sensor to check.</param>
            <returns>True if category exist, otherwise false.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#GetSensor(System.Int32)">
            <summary>
            Reads the sensor with the specified sensor id from the database.
            </summary>
            <param name="sensorID">ID of the sensor</param>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/>, or <c>null</c> if not found</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#GetSensor(System.String)">
            <summary>
            Reads the sensor with the specified unique name from the database.
            </summary>
            <param name="uniqueName">UniqueName of the sensor</param>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/>, or <c>null</c> if not found</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#GetSensors">
            <summary>
            Reads all sensors from the database.
            </summary>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> instances.</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#GetSensors(Hbm.Api.SensorDB.Entities.Category)">
            <summary>
            Reads all sensors of a given category from the database.
            </summary>
            <param name="category">Target category of the sensor read.</param>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> instances where the <paramref name="category"/> is the parent.</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#GetSensorsBase">
            <summary>
            Returns a list of all sensors with their id, name and description from the database.
            If you want to get a list of all sensors with all sensordata (specific sensor data, etc.)
            use <see cref="M:Hbm.Api.SensorDB.ISensorDB.GetSensors"/> instead.
            </summary>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> instances.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#HasChangedInDB(Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Checks, if the given sensor instance is different to the sensor with the same SensorID in the database.
            The sensor has changes if the <c>LastModifiedDate</c> property is different.
            </summary>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> to be compared to the database</param>
            <returns>Returns <c>true</c> if the sensor has changes, else <c>false</c>. 
            Returns <c>false</c> if no sensor instance is given. 
            Returns <c>true</c> if the sensor instance was not found in the database (new sensor)</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#InsertSensor(Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Inserts the given sensor into the database.
            </summary>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> to be inserted</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sensor"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.CategoryNotAssignedException">Thrown if no category instance is assigned to the sensor.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.ScalingNotAssignedException">Thrown if no scaling instance is assigned to the sensor.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.ScalingNotSupportedException">Thrown if the assigned scaling is of type <see cref="T:Hbm.Api.SensorDB.Entities.Scalings.NotSupportedScaling"/>, which is not supported.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorNotSupportedException">Thrown if the sensor is of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.NotSupportedSensor"/>, which is not supported.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#UpdateSensor(Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Updates an existing sensor in the database.
            </summary>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> to be updated</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sensor"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.CategoryNotAssignedException">Thrown if no category instance is assigned to the sensor.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.ScalingNotAssignedException">Thrown if no scaling instance is assigned to the sensor.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.ScalingNotSupportedException">Thrown if the assigned scaling is of type <see cref="T:Hbm.Api.SensorDB.Entities.Scalings.NotSupportedScaling"/>, which is not supported.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorNotSupportedException">Thrown if the sensor is of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.NotSupportedSensor"/>, which is not supported.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#UpdateCategoryOfSensors(System.Collections.Generic.List{Hbm.Api.SensorDB.Entities.Sensor})">
            <summary>
            Updates the parent category for the given sensors.
            Note: Only the category property is applied to the database. If you want to update the whole sensor properties refer to <see cref="M:Hbm.Api.SensorDB.ISensorDB.UpdateSensor(Hbm.Api.SensorDB.Entities.Sensor)"/>.
            </summary>
            <param name="sensors">List of sensors to apply category updates.</param>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#DeleteSensor(System.Int32)">
            <summary>
            Deletes the sensor with the given sensor id from the database.
            </summary>
            <param name="sensorID">ID of the sensor to be deleted</param>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#DeleteSensors(System.Collections.Generic.List{System.Int32})">
            <summary>
            Deletes the sensors with the given sensor ids from the database.
            </summary>
            <param name="sensorIds">IDs of the sensors to be deleted</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sensorIds"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#GetDescriptor(System.Int32)">
            <summary>
            Reads the descriptor with the specified descriptor id from the database.
            </summary>
            <param name="descriptorID">ID of the descriptor</param>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Descriptor"/>, or <c>null</c> if not found</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#GetAttachment(System.Int32)">
            <summary>
            Reads the attachment according to the specified descriptor id from the database.
            </summary>
            <param name="descriptorID">ID of the descriptor</param>
            <returns>Attachment as <c>byte[]</c>, or <c>null</c> if not found</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#GetDescriptors">
            <summary>
            Reads all descriptors from the database.
            </summary>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Descriptor"/> instances.</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#GetDescriptors(Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Reads the descriptors for the specified sensor from the database.
            </summary>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> for which the descriptors are searched.</param>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Descriptor"/> instances for the sensor.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sensor"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#InsertDescriptor(Hbm.Api.SensorDB.Entities.Descriptor)">
            <summary>
            Inserts the given descriptor with the given attachment (if available) into the database.
            </summary>
            <param name="descriptor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Descriptor"/> to be inserted.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="descriptor"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#InsertDescriptor(Hbm.Api.SensorDB.Entities.Descriptor,System.Byte[])">
            <summary>
            Inserts the given descriptor with the given attachment (if available) into the database.
            </summary>
            <param name="descriptor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Descriptor"/> to be inserted.</param>
            <param name="attachment">Attachment as <c>byte[]</c> to be inserted with the descriptor</param>
            <exception cref="T:System.ArgumentNullException">
                <p><paramref name="descriptor"/> is null. </p>
                <p>- or - </p>
                <p><paramref name="attachment"/> is null. </p>
            </exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.AttachmentToLargeException">Thrown if the attachment is too large (> 1 GB).</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#UpdateDescriptor(Hbm.Api.SensorDB.Entities.Descriptor)">
            <summary>
            Updates the given descriptor without an attachment into the database.
            </summary>
            <param name="descriptor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Descriptor"/> to be updated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="descriptor"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#UpdateDescriptor(Hbm.Api.SensorDB.Entities.Descriptor,System.Byte[])">
            <summary>
            Updates the given descriptor with the given attachment (if available) into the database.
            </summary>
            <param name="descriptor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Descriptor"/> to be updated.</param>
            <param name="attachment">Attachment as <c>byte[]</c> to be updated with the descriptor</param>
            <exception cref="T:System.ArgumentNullException">
                <p><paramref name="descriptor"/> is null. </p>
                <p>- or - </p>
                <p><paramref name="attachment"/> is null. </p>
            </exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.AttachmentToLargeException">Thrown if the attachment is too large (> 1 GB).</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#DeleteDescriptor(System.Int32)">
            <summary>
            Deletes the descriptor (including the attachment) with the given descriptor id from the database.
            </summary>
            <param name="descriptorID">ID of the descriptor to be deleted</param>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#GetThermoCoupleTypes">
            <summary>
            Reads all thermocouple types from the database.
            </summary>
            <returns>List of strings with all thermocouple types.</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#InsertThermoCoupleType(System.String)">
            <summary>
            Inserts the given thermocouple type into the database. 
            Instead of updating an existing thermocouple types, a delete of the existing type 
            and an insert of a new one is required.
            </summary>
            <param name="thermoCoupleType">New thermo couple type to be inserted.</param>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#DeleteThermoCoupleType(System.String)">
            <summary>
            Deletes the given thermocouple type from the database.
            </summary>
            <param name="thermoCoupleType">Thermocouple type to be deleted.</param>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#GetLanguage(System.String)">
            <summary>
            Reads the language for the specified iso language name (two letter) from the database.
            </summary>
            <param name="twoLetterISOLanguageName">Iso language name (two letter)</param>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Language"/>, or <c>null</c> if not found</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#GetLanguages">
            <summary>
            Reads all languages from the database.
            </summary>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Language"/> instances.</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#GetFallbackLanguage">
            <summary>
            Reads the fallback language from the database.
            </summary>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Language"/>, or <c>null</c> if not found</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#SetFallbackLanguage(Hbm.Api.SensorDB.Entities.Language)">
            <summary>
            Sets the given language as the fallback language and removes the flag from other languages in the database.
            </summary>
            <param name="fallbackLanguage">Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Language"/> to be set as fallback language</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fallbackLanguage"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#GetActiveLanguage">
            <summary>
            Reads the language instance for the active language from the database.
            </summary>
            <returns>Instance of the <see cref="T:Hbm.Api.SensorDB.Entities.Language"/>, or <c>null</c> if not found</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#SetActiveLanguage(System.String)">
            <summary>
            Sets the current active language (not stored in the database).
            </summary>
            <param name="twoLetterISOLanguageName">Iso language name (two letter) of the current language</param>
            <returns><c>true</c>, if the current language exists and was set, otherwise <c>false</c>. 
            If the current language does not exist (and so <c>false</c> is retrieved), then the fallback language is set as active language.</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#InsertLanguage(Hbm.Api.SensorDB.Entities.Language)">
            <summary>
            Inserts the given language into the database. 
            All translations of the fallback language are copied and inserted for this new language.
            </summary>
            <param name="language">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Language"/> to be inserted.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="language"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#UpdateLanguage(Hbm.Api.SensorDB.Entities.Language)">
            <summary>
            Updates the description of the given language.
            </summary>
            <param name="language">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Language"/> to be updated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="language"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#DeleteLanguage(System.String)">
            <summary>
            Deletes the language with the given iso language name (two letter) from the database.
            </summary>
            <param name="twoLetterISOLanguageName">Iso language name (two letter) of the language to be deleted.</param>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.FallbackLanguageDeleteException">Thrown if it was tried to delete the fallback language.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#GetTranslations(Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Reads the translations for the specified sensor from the database.
            </summary>
            <param name="sensor">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> for which the translations are searched.</param>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Translation"/> instances for the sensor.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sensor"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#GetTranslations(Hbm.Api.SensorDB.Entities.Category)">
            <summary>
            Reads the translations for the specified category from the database.
            </summary>
            <param name="category">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Category"/> for which the translations are searched.</param>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Translation"/> instances for the category.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="category"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#UpdateTranslation(Hbm.Api.SensorDB.Entities.Translation)">
            <summary>
            Updates the given translation in the database.
            </summary>
            <param name="translation">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Translation"/> to be updated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="translation"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
            <remarks>
            This method only updates translations. 
            Inserts of translations are indirectly done by inserting a new sensor or a new category. 
            Therefore there is no need for a method to explicitly insert a new translation.
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#GetVersionInfo">
            <summary>
            Reads the version info of the sensor db from the database.
            </summary>
            <returns>Version info</returns>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#SaveVersion(Hbm.Api.SensorDB.Entities.VersionInfo)">
            <summary>
            Saves the version info of the sensor db to the database.
            </summary>
            <param name="versionInfo">Version info to be stored.</param>
            <exception cref="T:Hbm.Api.SensorDB.Exceptions.SensorDBDataException">Thrown if a database error occurs.</exception>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.Hbm#Api#SensorDB#ISensorDB#ImportCANDatabase(System.String,Hbm.Api.SensorDB.Entities.Category,System.Boolean)">
            <summary>
            Imports a CAN database from the given file name.
            </summary>
            <param name="filename">Path and filename of the CAN database</param>
            <param name="rootCategory">Root category of the imported data</param>
            <param name="useCompoundNames">Flag, if compound names should be generated for sensor descriptions</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.XmlSerializeToString``1(``0)">
            <summary>
            Serializes an instance into a string.
            </summary>
            <typeparam name="T">Type of the instance</typeparam>
            <param name="instance">Instance to be serialized to string.</param>
            <remarks>
            This administration method is not part of the ISensorDB interface.
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.XmlSerializeToFile``1(System.String,``0)">
            <summary>
            Serializes an instance to a xml file.
            </summary>
            <typeparam name="T">Type of the instance</typeparam>
            <param name="filename">Path and filename of the xml file.</param>
            <param name="instance">Instance to be stored in the file.</param>
            <remarks>
            This administration method is not part of the ISensorDB interface.
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.XmlDeserializeFromString``1(System.String)">
            <summary>
            Deserializes an instance from a xml string.
            </summary>
            <typeparam name="T">Type of the root instance</typeparam>
            <param name="xmlContent">String with xml content</param>
            <returns>Deserialized object graph</returns>
            <remarks>
            This administration method is not part of the ISensorDB interface.
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.XmlDeserializeFromFile``1(System.String)">
            <summary>
            Deserializes an instance from a xml file.
            </summary>
            <typeparam name="T">Type of the root instance</typeparam>
            <param name="filename">Path and filename of the xml file.</param>
            <returns>Deserialized object graph</returns>
            <remarks>
            This administration method is not part of the ISensorDB interface.
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.DeleteOrphanTranslations">
            <summary>
            Deletes all orphan entries from the table "Translation".
            Orphans may occur if database records (categories or sensors) are manually deleted from the database.
            Because of restrictions in VistaDB no triggers are used to preserve automatic data integrity between 
            categories and their translations and sensors and their translations.
            </summary>
            <remarks>
            This administration method is not part of the ISensorDB interface.
            </remarks>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.CreateHierarchicalCategory(System.Int32,Hbm.Api.SensorDB.Entities.Category,System.Collections.Generic.List{Hbm.Api.SensorDB.Entities.Category},System.Collections.Generic.List{Hbm.Api.SensorDB.Entities.Sensor})">
            <summary>
            Creates a hierarchical category for the given category 
            (and recursively for all of it's child categories). 
            An hierarchical category encapsulates the given category and
            provides lists for child hierarchical categories and child sensors 
            of the category.
            </summary>
            <param name="currentHierarchicalLevel">The current hierarchical level. For example: Pass 0 for root categories.</param>
            <param name="category">category for which the hierarchical category will be created</param>
            <param name="allCategories">List of all categories</param>
            <param name="allSensors">List of all sensors</param>
            <returns>Hierarchical category instance for the given category</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.GetSensorsForCategory(Hbm.Api.SensorDB.Entities.Category,System.Collections.Generic.List{Hbm.Api.SensorDB.Entities.Sensor})">
            <summary>
            Gets all sensors which are childs of the given category
            </summary>
            <param name="category">Instance of <see cref="T:Hbm.Api.SensorDB.Entities.Category"/> used as search criteria.</param>
            <param name="allSensors">List of all sensors.</param>
            <returns>List of <see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> instances.</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.GenerateXmlExtraTypes">
            <summary>
            Generates dynamically a list of all extra types (Sensor and Scaling classes)
            for xml serialization purposes.
            Without the extra types the xml serialization will fail for derived classes when
            using inheritance (e.g. for Sensor and Scaling)
            </summary>
            <returns>Type array of all extra types</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.GenerateXmlKnownSensorTypes">
            <summary>
            Generates dynamically a list of all types of SensorType instances. 
            </summary>
            <returns>List of types for all SensorType instances</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.GenerateXmlKnownScalingTypes">
            <summary>
            Generates dynamically a list of all types of ScalingType instances. 
            </summary>
            <returns>List of types for all ScalingType instances</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.CheckForInvalidChildCategoryDeletion(System.Collections.Generic.List{System.Int32},Hbm.Api.SensorDB.Entities.HierarchicalCategory,Hbm.Api.SensorDB.Entities.Category@)">
            <summary>
            Iterates hierarchical categories to determine if the given deletion list is valid for deletion.
            It checks if the categories given by the <paramref name="deleteCategoryIdsToCheck"/> has sensors and
            checks if sub categories are in the list as well (ensuring that there will be no primary key violation).
            </summary>
            <param name="deleteCategoryIdsToCheck">The deletion list containing the category ids to check against.</param>
            <param name="categoryToCheck">The current hierarchical category to check.</param>
            <param name="invalidDeleteOfCategory">
            This object will be set by the invalid category id in the list, if 
            a) the category has sensors.
            b) at least one child category is not marked for deletion. 
            Pass null for initial state.
            </param>
        </member>
        <member name="M:Hbm.Api.SensorDB.SensorDBManager.BuildOrderedDeleteCategoryIdListInForeignKeyOrder(Hbm.Api.SensorDB.Entities.HierarchicalCategory,System.Collections.Generic.List{System.Int32})">
            <summary>
            This method builds a sorted dictionary by hierarchical level to provides correct deletion order. 
            This will ensures 'no primary key violations' when deleting.
            Call <see cref="M:Hbm.Api.SensorDB.SensorDBManager.CheckForInvalidChildCategoryDeletion(System.Collections.Generic.List{System.Int32},Hbm.Api.SensorDB.Entities.HierarchicalCategory,Hbm.Api.SensorDB.Entities.Category@)"/> before to check for valid category id list!
            </summary>
            <param name="rootCategory">Root category of tree.</param>
            <param name="categoryIdsToPushInDeleteList">List containing the category ids to be deleted. Must be a complete/consistent list!</param>
            <returns>Ordered list of category ids ready for deletion by level.</returns>
            <remarks>
            Tree iteration (bottom to top, no recursion):
                    a
              b     c     d
             e f    g    h i
            => efbgchida
            </remarks>
        </member>
        <member name="T:Hbm.Api.SensorDB.Utils.CloningHelper">
            <summary>
            Helper class for cloning objects
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Utils.CloningHelper.DeepClone``1(``0)">
            <summary>
            Performs a deep clone of the object including clones of all child objects. 
            </summary>
            <remarks>
            This method requires that all entities of the object are marked with the [Serializable] attribute.
            </remarks>
            <typeparam name="T">Type of the object</typeparam>
            <param name="obj">instance to be cloned</param>
            <returns>Cloned instance of the object</returns>
        </member>
        <member name="T:Hbm.Api.SensorDB.Utils.SerializationHelper">
            <summary>
            Helper class for serialization and deserialization
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Utils.SerializationHelper.XmlSerializeToString``1(``0,System.Type[])">
            <summary>
            Serializes an instance to a xml string (including extra types for the xml serialization).
            </summary>
            <typeparam name="T">Type of the instance</typeparam>
            <param name="instance">Instance to be serialized to xml string</param>
            <param name="extraTypes">List of types as extra types to be known by the serialization (e.g. required inherited classes)</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Utils.SerializationHelper.XmlSerializeToFile``1(System.String,``0,System.Type[])">
            <summary>
            Serializes an instance to a xml file (including extra types for the xml serialization).
            </summary>
            <typeparam name="T">Type of the instance</typeparam>
            <param name="filename">Path and filename of the xml file.</param>
            <param name="instance">Instance to be stored in the file.</param>
            <param name="extraTypes">List of types as extra types to be known by the serialization (e.g. required inherited classes)</param>
        </member>
        <member name="M:Hbm.Api.SensorDB.Utils.SerializationHelper.XmlDeserializeFromString``1(System.String,System.Type[])">
            <summary>
            Deserializes an instance from a xml file (including extra types for the xml serialization).
            </summary>
            <typeparam name="T">Type of the root instance</typeparam>
            <param name="xmlContent">String with xml content</param>
            <param name="extraTypes">List of types as extra types to be known by the serialization (e.g. required inherited classes)</param>
            <returns>Deserialized object graph</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Utils.SerializationHelper.XmlDeserializeFromFile``1(System.String,System.Type[])">
            <summary>
            Deserializes an instance from a xml file (including extra types for the xml serialization).
            </summary>
            <typeparam name="T">Type of the root instance</typeparam>
            <param name="filename">Path and filename of the xml file.</param>
            <param name="extraTypes">List of types as extra types to be known by the serialization (e.g. required inherited classes)</param>
            <returns>Deserialized object graph</returns>
        </member>
        <member name="T:Hbm.Api.SensorDB.Utils.ThermoSensorRangesaa">
            <summary>
            Utility functions concerning common properties of ThermoCouple- and Pt-Sensors
            </summary>
        </member>
        <member name="M:Hbm.Api.SensorDB.Utils.ThermoSensorRangesaa.GetMinEngineeringOfThermoCouple(Hbm.Api.SensorDB.Entities.Sensors.ThermoCoupleSensor)">
            <summary>
            Returns the minimum engineering range of the given thermocouple sensor type
            </summary>
            <param name="thermoCoupleType">Type of thermo couple sensor (B,E,J,K etc.)</param>
            <returns>Minimum engineering range of given thermo couple</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Utils.ThermoSensorRangesaa.GetMaxEngineeringOfThermoCouple(Hbm.Api.SensorDB.Entities.Sensors.ThermoCoupleSensor)">
            <summary>
            Returns the minimum engineering range of the given thermocouple sensor type
            </summary>
            <param name="thermoCoupleType">Type of thermo couple sensor (B,E,J,K etc.)</param>
            <returns>Minimum engineering range of given thermo couple</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Utils.ThermoSensorRangesaa.GetTemperatureFromDegreeCelsius(System.Decimal,System.String)">
            <summary>
            Returns the maximum engineering range of a pt sensor according to the given unit (until now only °C, °F or K possible)
            </summary>
            <param name="unit">unit (until now only °C, °F or K possible)</param>
            <returns>Minimum engineering range of the pt sensor according to the given unit</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Utils.ThermoSensorRangesaa.GetMinEngineeringOfPt(System.String)">
            <summary>
            Returns the mininmum engineering range of a pt sensor according to the given unit (only °C, °F or K possible)
            </summary>
            <param name="unit">unit (only °C, °F or K possible)</param>
            <returns>Minimum engineering range of the pt sensor according to the given unit</returns>
        </member>
        <member name="M:Hbm.Api.SensorDB.Utils.ThermoSensorRangesaa.GetMaxEngineeringOfPt(System.String)">
            <summary>
            Returns the maximum engineering range of a pt sensor according to the given unit (only °C, °F or K possible)
            </summary>
            <param name="unit">unit (only °C, °F or K possible)</param>
            <returns>Maximum engineering range of the pt sensor according to the given unit</returns>
        </member>
    </members>
</doc>
