<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hbm.Api.QuantumX</name>
    </assembly>
    <members>
        <member name="T:Hbm.Api.QuantumX.Channels.IQuantumXChannel">
            <summary>
            Interface for all QuantumX channels for accessing properties 
            without casting to specific QuantumX channel types.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.IQuantumXChannel.ConnectorPosition">
            <summary>
            Position of the connector to which the channel belongs.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.IQuantumXChannel.Position">
            <summary>
            Position to which the channel belongs.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.IQuantumXChannel.XmlAddressPosition">
            <summary>
            Position of the channel given by the XML address attribute (e.g. address="1")
            and presently used only by <see cref="T:Hbm.Api.QuantumX.Channels.QuantumXCanInChannel" /> and <see cref="T:Hbm.Api.QuantumX.Channels.QuantumXCanOutChannel" />.
            This position number is not unique for all channels of the connector (only unique within the channel elements of the same type).
            This property is for internal use only!
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Channels.QuantumXAnalogOutChannel">
            <summary>
            Represents an analog out QuantumX channel.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXAnalogOutChannel.ConnectorPosition">
            <summary>
            Position of the connector to which the channel belongs.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXAnalogOutChannel.Position">
            <summary>
            Position to which the channel belongs.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXAnalogOutChannel.XmlAddressPosition">
            <summary>
            Position of the channel given by the XML address attribute (e.g. address="1") and thus
            always <c>1</c> for this type.
            This property is for internal use only!
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXAnalogOutChannel.Indentifier">
            <summary>
            Identifier of the channel.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXAnalogOutChannel.CalibrationDate">
            <summary>
            Date of calibration or <c>null</c> if not specified.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXAnalogOutChannel.CalibrationExpirationDate">
            <summary>
            Expiration date of the calibration or <c>null</c> if not specified.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXAnalogOutChannel.CalibratedBy">
            <summary>
            Name of the person who calibrated the channel.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Channels.QuantumXAnalogOutChannel.GetUniqueID">
            <summary>
            Returns a unique string that identifies the channel among the connector to which the channel belongs.
            </summary>
            <remarks>This information should be retrieved during scan or connect. This method must not throw any Exceptions.</remarks>
            <returns>Unique channel identification on the device or <c>String.Empty</c>, if identifier is not set</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Channels.QuantumXCanInChannel">
            <summary>
            Represents a QuantumX input channel for CAN connectors, configured by a <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor"/>.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXCanInChannel.ConnectorPosition">
            <summary>
            Position of the connector to which the channel belongs.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXCanInChannel.Position">
            <summary>
            Position to which the channel belongs.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXCanInChannel.XmlAddressPosition">
            <summary>
            Position of the channel given by the XML address attribute (e.g. address="1").
            This position number is not unique for all channels of the connector (only unique within the channel elements of the same type).
            This property is for internal use only!
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXCanInChannel.OriginOfName">
            <summary>
            Origin of the channel name (read only)
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Channels.QuantumXCanInChannel.GetUniqueID">
            <summary>
            Returns a unique string that identifies the channel among the connector to which the channel belongs.
            </summary>
            <remarks>This information should be retrieved during scan or connect. This method must not throw any Exceptions.</remarks>
            <returns>Unique channel identification on the device or <c>String.Empty</c>, if identifier is not set</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Channels.QuantumXCanOutChannel">
            <summary>
            Represents a QuantumX output channel for CAN connectors.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXCanOutChannel.ConnectorPosition">
            <summary>
            Position of the connector to which the channel belongs.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXCanOutChannel.Position">
            <summary>
            Position to which the channel belongs.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXCanOutChannel.XmlAddressPosition">
            <summary>
            Position of the channel given by the XML address attribute (e.g. address="1").
            This position number is not unique for all channels of the connector (only unique within the channel elements of the same type).
            This property is for internal use only!
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXCanOutChannel.OriginOfName">
            <summary>
            Origin of the channel name (read only)
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXCanOutChannel.InputModuleReference">
            <summary>
            Unique reference to the module where the input signal's source is, 
            specified by the (12 hex. characters) serial number of the QuantumX device. 
            Use <see cref="P:Hbm.Api.Common.Entities.Device.SerialNo"/> of a connected input device.
            It should be empty, if the no input signal exists or if the input signal source is on the same device.
            </summary>
            <remarks>
            The required prefix 'UUID=' is internally removed when reading this value from the device and added, when assigning a new value to the device.
            </remarks>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXCanOutChannel.InputSignalReference">
            <summary>
            Unique reference to the signal source of the output connector, e.g. <c>AnalogIn_Connector3.Signal1</c>. 
            Use <see cref="M:Hbm.Api.Common.Entities.Signals.Signal.GetUniqueID"/> of the signal of a connected input device.
            If the signal comes from another module, also set the module reference (<see cref="P:Hbm.Api.QuantumX.Channels.QuantumXCanOutChannel.InputModuleReference"/>).
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Channels.QuantumXCanOutChannel.GetUniqueID">
            <summary>
            Returns a unique string that identifies the channel among the connector to which the channel belongs.
            </summary>
            <remarks>This information should be retrieved during scan or connect. This method must not throw any Exceptions.</remarks>
            <returns>Unique channel identification on the device or <c>String.Empty</c>, if identifier is not set</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Channels.QuantumXCanRawChannel">
            <summary>
            Represents a QuantumX CanRaw channel for CAN connectors
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXCanRawChannel.ConnectorPosition">
            <summary>
            Position of the connector to which the channel belongs.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXCanRawChannel.Position">
            <summary>
            Position to which the channel belongs.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXCanRawChannel.XmlAddressPosition">
            <summary>
            Position of the channel given by the XML address attribute (e.g. address="1").
            This position number is not unique for all channels of the connector (only unique within the channel elements of the same type).
            This property is for internal use only!
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Channels.QuantumXCanRawChannel.GetUniqueID">
            <summary>
            Returns a unique string that identifies the channel among the connector to which the channel belongs.
            </summary>
            <remarks>This information should be retrieved during scan or connect. This method must not throw any Exceptions.</remarks>
            <returns>Unique channel identification on the device or <c>String.Empty</c>, if identifier is not set</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Channels.QuantumXDigitalChannel">
            <summary>
            Represents a digital QuantumX channel.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXDigitalChannel.ConnectorPosition">
            <summary>
            Position of the connector to which the channel belongs.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXDigitalChannel.Position">
            <summary>
            Position to which the channel belongs.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXDigitalChannel.XmlAddressPosition">
            <summary>
            Position of the channel given by the XML address attribute (e.g. address="1") and thus
            always <c>1</c> for this type.
            This property is for internal use only!
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXDigitalChannel.IsInverted">
            <summary>
            Indicates if all digital values are inverted.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXDigitalChannel.DefaultValue">
            <summary>
            Default digital value which is used, if no signal is connected or available. 
            This property is only used, if the direction is <see cref="F:Hbm.Api.Common.Enums.DirectionType.Out"/>. 
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXDigitalChannel.InputModuleReference">
            <summary>
            Unique reference to the module where the input signal's source is, 
            specified by the (12 hex. characters) serial number of the QuantumX device. 
            Use <see cref="P:Hbm.Api.Common.Entities.Device.SerialNo"/> of a connected input device.
            It should be empty, if the no input signal exists or if the input signal source is on the same device.
            This property is only used, if the direction is <see cref="F:Hbm.Api.Common.Enums.DirectionType.Out"/>. 
            </summary>
            <remarks>
            The required prefix 'UUID=' is internally removed when reading this value from the device and added, when assigning a new value to the device.
            </remarks>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXDigitalChannel.InputSignalReference">
            <summary>
            Unique reference to the signal source of the output connector, e.g. <c>AnalogIn_Connector3.Signal1</c>. 
            Use <see cref="M:Hbm.Api.Common.Entities.Signals.Signal.GetUniqueID"/> of the signal of a connected input device.
            If the signal comes from another module, also set the module reference (<see cref="P:Hbm.Api.QuantumX.Channels.QuantumXDigitalChannel.InputModuleReference"/>).
            This property is only used, if the direction is <see cref="F:Hbm.Api.Common.Enums.DirectionType.Out"/>. 
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Channels.QuantumXDigitalChannel.GetUniqueID">
            <summary>
            Returns a unique string that identifies the channel among the connector to which the channel belongs.
            </summary>
            <remarks>This information should be retrieved during scan or connect. This method must not throw any Exceptions.</remarks>
            <returns>Unique channel identification on the device or <c>String.Empty</c>, if identifier is not set</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Channels.QuantumXAnalogInChannel">
            <summary>
            Represents a physical QuantumX channel to which a sensor can be connected.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXAnalogInChannel.Position">
            <summary>
            Position to which the channel belongs (always 1 for there is only one channel per connector).
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXAnalogInChannel.ConnectorPosition">
            <summary>
            Position of the connector to which the channel belongs.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXAnalogInChannel.XmlAddressPosition">
            <summary>
            Position of the channel given by the XML address attribute (e.g. address="1") and thus
            always <c>1</c> for this type.
            This property is for internal use only!
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXAnalogInChannel.OriginOfName">
            <summary>
            Origin of the channel name (read only)
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXAnalogInChannel.TedsUsageMode">
            <summary>
            Gets or sets the TEDS usage mode.
            </summary>
            <remarks>
            Does not support <see cref="F:Hbm.Api.Common.Enums.TedsUsageMode.NotSupported"/> and <see cref="F:Hbm.Api.Common.Enums.TedsUsageMode.UseManually"/>
            </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Channels.QuantumXAnalogInChannel.GetUniqueID">
            <summary>
            Returns a unique string that identifies the channel among the connector to which the channel belongs.
            </summary>
            <remarks>This information should be retrieved during scan or connect. This method must not throw any Exceptions.</remarks>
            <returns>Unique channel identification on the device or <c>String.Empty</c>, if identifier is not set</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Channels.QuantumXFbgChannel">
            <summary>
            Represents a physical QuantumX fiber bragg grating channel
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXFbgChannel.Position">
            <summary>
            Position to which the channel belongs (always 1 for there is only one channel per connector).
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXFbgChannel.ConnectorPosition">
            <summary>
            Position of the connector to which the channel belongs.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXFbgChannel.XmlAddressPosition">
            <summary>
            Position of the channel given by the XML address attribute (e.g. address="1") and thus
            always <c>1</c> for this type.
            This property is for internal use only!
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Channels.QuantumXFbgChannel.GetUniqueID">
            <summary>
            Returns a unique string that identifies the channel among the connector to which the channel belongs.
            </summary>
            <remarks>This information should be retrieved during scan or connect. This method must not throw any Exceptions.</remarks>
            <returns>Unique channel identification on the device or <c>String.Empty</c>, if identifier is not set</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Channels.QuantumXVirtualChannel">
            <summary>
            Represents a virtual QuantumX channel
            </summary>
            <remarks>
            This class is for future updates only. Virtual channels are not yet implemented. 
            ATTENTION: Change this class to public access modifier when implementation is complete!
            </remarks>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXVirtualChannel.ConnectorPosition">
            <summary>
            Position of the connector to which the channel belongs.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXVirtualChannel.Position">
            <summary>
            Position to which the channel belongs.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Channels.QuantumXVirtualChannel.XmlAddressPosition">
            <summary>
            Position of the channel given by the XML address attribute (e.g. address="1").
            This position number is not unique for all channels of the connector (only unique within the channel elements of the same type).
            This property is for internal use only!
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Channels.QuantumXVirtualChannel.GetUniqueID">
            <summary>
            Returns a unique string that identifies the channel among the connector to which the channel belongs.
            </summary>
            <remarks>This information should be retrieved during scan or connect. This method must not throw any Exceptions.</remarks>
            <returns>Unique channel identification on the device or <c>String.Empty</c>, if identifier is not set</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Connectors.IQuantumXConnector">
            <summary>
            Interface for all QuantumX connectors for accessing properties 
            without casting to specific QuantumX connectors types.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Connectors.IQuantumXConnector.Position">
            <summary>
            Unique position number of the connector for the device (from 1..n).
            This property is for internal use only!
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Connectors.IQuantumXConnector.XmlView">
            <summary>
            Xml view type where the connector is enclosed.
            This property is for internal use only!
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Connectors.IQuantumXConnector.XmlAddressPosition">
            <summary>
            Position of the connector given by the xml address attribute, e.g. address="1").
            This position number is not unique for the device (only unique within the connector element of the given <see cref="P:Hbm.Api.QuantumX.Connectors.IQuantumXConnector.XmlView"/>).
            This property is for internal use only!
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Connectors.QuantumXAnalogInConnector">
            <summary>
            QuantumX specific implementation of an analog in connector
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Connectors.QuantumXAnalogInConnector.Position">
            <summary>
            Unique position number of the connector for the device (from 1..n)
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Connectors.QuantumXAnalogInConnector.XmlView">
            <summary>
            Xml view where the connector resides.
            This property is for internal use only!
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Connectors.QuantumXAnalogInConnector.XmlAddressPosition">
            <summary>
            Position of the connector given by the xml address attribute, e.g. address="1").
            This position number is not unique for the device (only unique within the connector element of the given <see cref="P:Hbm.Api.QuantumX.Connectors.QuantumXAnalogInConnector.XmlView"/>).
            This property is for internal use only!
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Connectors.QuantumXAnalogInConnector.GetUniqueID">
            <summary>
            Returns a unique string that identifies the connector among the device to which the connector belongs.
            </summary>
            <remarks>This information should be retrieved during scan or connect. This method must not throw any Exceptions.</remarks>
            <returns>Unique connector identification on the device or <c>String.Empty</c>, if identifier is not set</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Connectors.QuantumXAnalogOutConnector">
            <summary>
            QuantumX specific implementation of an analog out connector
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Connectors.QuantumXAnalogOutConnector.Position">
            <summary>
            Unique position number of the connector for the device (from 1..n)
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Connectors.QuantumXAnalogOutConnector.XmlView">
            <summary>
            Xml view where the connector resides.
            This property is for internal use only!
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Connectors.QuantumXAnalogOutConnector.XmlAddressPosition">
            <summary>
            Position of the connector given by the xml address attribute, e.g. address="1").
            This position number is not unique for the device (only unique within the connector element of the given <see cref="P:Hbm.Api.QuantumX.Connectors.QuantumXAnalogOutConnector.XmlView"/>).
            This property is for internal use only!
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Connectors.QuantumXAnalogOutConnector.OutputType">
            <summary>
            Type of the analog output (read only)
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Connectors.QuantumXAnalogOutConnector.GetUniqueID">
            <summary>
            Returns a unique string that identifies the connector among the device to which the connector belongs.
            </summary>
            <remarks>This information should be retrieved during scan or connect. This method must not throw any Exceptions.</remarks>
            <returns>Unique connector identification on the device or <c>String.Empty</c>, if identifier is not set</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Connectors.QuantumXCanConnector">
            <summary>
            QuantumX specific implementation of a CAN bus connector
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Connectors.QuantumXCanConnector.Position">
            <summary>
            Unique position number of the connector for the device (from 1..n)
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Connectors.QuantumXCanConnector.XmlView">
            <summary>
            Xml view where the connector resides.
            This property is for internal use only!
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Connectors.QuantumXCanConnector.XmlAddressPosition">
            <summary>
            Position of the connector given by the xml address attribute, e.g. address="1").
            This position number is not unique for the device (only unique within the connector element of the given <see cref="P:Hbm.Api.QuantumX.Connectors.QuantumXCanConnector.XmlView"/>).
            This property is for internal use only!
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Connectors.QuantumXCanConnector.Ecus">
            <summary>
            Gets or sets the list of ECU defintions.
            </summary>
            <value>
            The list of ECU defintions.
            </value>
        </member>
        <member name="M:Hbm.Api.QuantumX.Connectors.QuantumXCanConnector.GetUniqueID">
            <summary>
            Returns a unique string that identifies the connector among the device to which the connector belongs.
            </summary>
            <remarks>This information should be retrieved during scan or connect. This method must not throw any Exceptions.</remarks>
            <returns>Unique connector identification on the device or <c>String.Empty</c>, if identifier is not set</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Connectors.QuantumXDigitalConnector">
            <summary>
            QuantumX specific implementation of an digital in/out connector
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Connectors.QuantumXDigitalConnector.Position">
            <summary>
            Unique position number of the connector for the device (from 1..n)
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Connectors.QuantumXDigitalConnector.XmlView">
            <summary>
            Xml view where the connector resides.
            This property is for internal use only!
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Connectors.QuantumXDigitalConnector.XmlAddressPosition">
            <summary>
            Position of the connector given by the xml address attribute, e.g. address="1").
            This position number is not unique for the device (only unique within the connector element of the given <see cref="P:Hbm.Api.QuantumX.Connectors.QuantumXDigitalConnector.XmlView"/>).
            This property is for internal use only!
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Connectors.QuantumXDigitalConnector.Pin">
            <summary>
            Pin number of the digital connector
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Connectors.QuantumXDigitalConnector.GetUniqueID">
            <summary>
            Returns a unique string that identifies the connector among the device to which the connector belongs.
            </summary>
            <remarks>This information should be retrieved during scan or connect. This method must not throw any Exceptions.</remarks>
            <returns>Unique connector identification on the device or <c>String.Empty</c>, if identifier is not set</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Connectors.QuantumXFbgConnector">
            <summary>
            QuantumX specific implementation of a FBG connector
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Connectors.QuantumXFbgConnector.Position">
            <summary>
            Unique position number of the connector for the device (from 1..n)
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Connectors.QuantumXFbgConnector.XmlView">
            <summary>
            Xml view where the connector resides.
            This property is for internal use only!
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Connectors.QuantumXFbgConnector.XmlAddressPosition">
            <summary>
            Position of the connector given by the xml address attribute, e.g. address="1").
            This position number is not unique for the device (only unique within the connector element of the given <see cref="P:Hbm.Api.QuantumX.Connectors.QuantumXFbgConnector.XmlView"/>).
            This property is for internal use only!
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Connectors.QuantumXFbgConnector.GetUniqueID">
            <summary>
            Returns a unique string that identifies the connector among the device to which the connector belongs.
            </summary>
            <remarks>This information should be retrieved during scan or connect. This method must not throw any Exceptions.</remarks>
            <returns>Unique connector identification on the device or <c>String.Empty</c>, if identifier is not set</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Connectors.QuantumXOffConnector">
            <summary>
            QuantumX specific implementation of an connector, which is set to off (disabled)
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Connectors.QuantumXOffConnector.Position">
            <summary>
            Unique position number of the connector for the device (from 1..n)
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Connectors.QuantumXOffConnector.XmlView">
            <summary>
            Xml view where the connector resides.
            This property is for internal use only!
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Connectors.QuantumXOffConnector.XmlAddressPosition">
            <summary>
            Position of the connector given by the xml address attribute, e.g. address="1").
            This position number is not unique for the device (only unique within the connector element of the given <see cref="P:Hbm.Api.QuantumX.Connectors.QuantumXOffConnector.XmlView"/>).
            This property is for internal use only!
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Connectors.QuantumXOffConnector.GetUniqueID">
            <summary>
            Returns a unique string that identifies the connector among the device to which the connector belongs.
            </summary>
            <remarks>This information should be retrieved during scan or connect. This method should not throw any Exceptions.</remarks>
            <returns>Unique connector identification on the device or <c>String.Empty</c>, if identifier is not set</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Constants.PropertyName">
            <summary>
            Defines all hard-coded property names 
            (e.g. sensor properties for the generic comparision 
            of the assigned and the newly read instance after an assignment 
            in <see cref="T:Hbm.Api.QuantumX.Core.DataComparer.SensorComparer"/>).
            </summary>
            <remarks>
            ATTENTION: Rename these constant values if one of these property names are changed!!! 
            </remarks>
        </member>
        <member name="T:Hbm.Api.QuantumX.Constants.XmlTag">
            <summary>
            Defines all xml tags (for element and attribute names)
            which are used for xml communication with QuantumX devices.
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Core.CommunicationManager">
            <summary>
            Handles all communications with a certain QuantumX device 
            and encapsulates the access to the
            <see cref="T:Hbm.Api.QuantumX.Core.FrameworkDllWrapper"/> (QuantumX framework dll)
            </summary>
            <remarks>
            All instance methods of this class may only be called by <see cref="T:Hbm.Api.QuantumX.QuantumXDevice"/> because of multi threading.
            All static methods of this class may only be called by <see cref="T:Hbm.Api.QuantumX.QuantumXDeviceFamily"/>, because the may only be called once.
            </remarks>
        </member>
        <member name="T:Hbm.Api.QuantumX.Core.CommunicationManager.ProblemContextType">
            <summary>
            Type of the context for the problem list
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Core.CommunicationManager.ProblemContextType.ConnectorAssignment">
            <summary>
            Problem during connector assignment
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Core.CommunicationManager.ProblemContextType.ChannelAssignment">
            <summary>
            Problem during channel assignment
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Core.CommunicationManager.ProblemContextType.SignalAssignment">
            <summary>
            Problem during signal assignment
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Core.CommunicationManager.ProblemContextType.SensorAssignment">
            <summary>
            Problem during sensor assignment
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Core.CommunicationManager.ProblemContextType.ZeroBalanceAssignment">
            <summary>
            Problem during zero balance assignment
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Core.CommunicationManager.ProblemContextType.AdditionalFeature">
            <summary>
            Problem during assignments for additional features
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.#ctor(Hbm.Api.QuantumX.QuantumXDevice)">
            <summary>
            Creates a new instance, stores the instance of the device
            and initializes the internal xml data buffer.
            </summary>
            <param name="device"><see cref="T:Hbm.Api.QuantumX.QuantumXDevice"/> on which the CommunicationManager instance works</param>
        </member>
        <member name="P:Hbm.Api.QuantumX.Core.CommunicationManager.IsConnected">
            <summary>
            Gets a value indicating whether this device (instance) is connected.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.Initialize">
            <summary>
            Initialization of the static <see cref="T:Hbm.Api.QuantumX.Core.FrameworkDllWrapper"/>.
            This method must be called first (once), before using other methods of this class.
            </summary>
            <exception cref="T:Hbm.Api.QuantumX.Exceptions.FrameworkDllException">Thrown if an error occurs</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.CleanUp">
            <summary>
            Cleans up the the encapsulated unmanaged code (once).
            After calling this method, no other method  of this class can be used sucessfully.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ConnectToDevice(System.Boolean@)">
            <summary>
            Connects to a device on the given ip address an port 
            and returns the UUID of the connected device.
            </summary>
            <param name="wasAlreadyConnected">Returns <c>true</c> when the device was already connected.</param>
            <returns>UUID of the connected device</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the ConnectionInfo instance is null</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.DeviceNotConnectedException">Thrown if device could not be connected.</exception>
            <exception cref="T:Hbm.Api.QuantumX.Exceptions.FrameworkDllException">Thrown if an unexpected error occurs</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WaitUntilTedsHasFinishedParameterization(Hbm.Api.QuantumX.Channels.IQuantumXChannel,System.Int32)">
            <summary>
            Waits the until the channels' TEDS parameterization is no longer busy.
            This should be possible not later than in about 30 seconds (MAX_TIME_IN_MS_UNTIL_DEVICE_IS_READY).
            During this time we check the TEDS status of the given channel and return true if we determine it
            within this time span.
            </summary>
            <param name="channel">Channel for which the TEDS status will be determined.</param>
            <param name="timeoutInMs">The timeout in ms (default is 30000ms, minimum is 5000ms).</param>
            <returns>True, if TEDS parameterization has finished.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.DisconnectFromDevice">
            <summary>
            Disconnects a connected QuantumX device
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.FillDeviceInfo">
            <summary>
            Reads additional information from the hardware device 
            and fills the data into the current device instance
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.GetPossibleDataAcquisitionModes">
            <summary>
            Gets the possible data acquisition modes according to the current synchronization settings of the device.
            When the device detects a hardware synchronization (typically established via a synchronization cable), the returned list will
            will contain the mode <see cref="F:Hbm.Api.Common.Enums.DataAcquisitionMode.HardwareSynchronized"/>.
            If the device uses a time based synchronization (e.g. PTP or NTP), the returned list will contain 
            the mode <see cref="F:Hbm.Api.Common.Enums.DataAcquisitionMode.TimestampSynchronized"/>.
            Since most devices are able to fulfill an unsynchronized measurement, the returned list will most likely contain the mode <see cref="F:Hbm.Api.Common.Enums.DataAcquisitionMode.Unsynchronized"/>.
            If the device is not connected, the list of possible data acquisition modes will be empty.
            </summary>
            <returns>List of possible <see cref="T:Hbm.Api.Common.Enums.DataAcquisitionMode"/> for this device according to its current synchronization settings.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.GetConnectors(Hbm.Api.QuantumX.Enums.XmlViewType)">
            <summary>
            Reads from all or the specified view all connectors and their dependent data (like channels and signals)
            from the hardware device and fills the data into a new list of connector instances.
            Since the additional connector view also contains the spectrum info, the spectrum info will also
            be read by this function!
            </summary>
            <param name="view">The view to read from (optional), default is read from all (possible) views.</param>
            <returns>New list of new <see cref="T:Hbm.Api.Common.Entities.Connectors.Connector" /> instances.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.GetConnector(System.Int32)">
            <summary>
            Reads a single connector at the given <paramref name="connectorPosition"/> including the dependent data (like channels and signals)
            from the hardware device and fills the data into a new connector instance. 
            </summary>
            <remarks>
            <see cref="T:Hbm.Api.QuantumX.Connectors.QuantumXDigitalConnector"/>s are not read, because this is not required.
            </remarks>
            <param name="connectorPosition">Position of the connector on the device</param>
            <returns>A new <see cref="T:Hbm.Api.Common.Entities.Connectors.Connector"/> instance</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.GetAndReplaceStandardConnectors">
            <summary>
            Gets the the standard connectors from the device and replaces them in the object model.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.TransformOffConnectors(System.Collections.Generic.List{Hbm.Api.Common.Entities.Connectors.Connector})">
            <summary>
            Transforms all OffConnectors of the given list into default connector types that are supported by the device.
            E.g.: For MX878, MX879 and MX410 all OffConnectors will be transformed into AnalogOutConnectors.
            </summary>
            <param name="connectors">List that contains OffConnectors to transform into another connector type</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.TransformOffConnectorToAnalogOutConnector(Hbm.Api.QuantumX.Connectors.QuantumXOffConnector,System.String,System.String)">
            <summary>
            Creates an <see cref="T:Hbm.Api.QuantumX.Connectors.QuantumXAnalogOutConnector"/> including a channel and signal according to the given parameters.
            </summary>
            <param name="quantumXOffConnector">QuantumXOffConnector that should be transformed into an QuantumXAnalogOutConnector</param>
            <param name="inputModuleReference">Module reference of the module to use for output</param>
            <param name="inputSignalReference">Signal reference of the signal within the given module to use for output</param>
            <returns>Transformed AnalogOutConnector according to the given parameters</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteConnector(Hbm.Api.QuantumX.Connectors.IQuantumXConnector)">
            <summary>
            Writes a connector to the module.
            </summary>
            <param name="connector">Connector to be assigned to the module.</param>
            <returns><c>List</c> of problems. If no problems have occured, an empty list is returned.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteEnableConnector(Hbm.Api.QuantumX.Enums.XmlViewType,System.Int32,Hbm.Api.QuantumX.Enums.QuantumXEnableConnectorType)">
            <summary>
            Writes data to a connector to enable the connector on the module 
            (as analog in or analog out connector, depending on the xml view of the connector).
            </summary>
            <param name="xmlView">Xml view of the connector to be enabled.</param>
            <param name="xmlAddressPosition">Position number of the connector in xml to enable.</param>
            <param name="connectorType">Type of the connector when enabled.</param>
            <returns><c>List</c> of problems. If no problems have occured, an empty list is returned.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteCanBusParameters(Hbm.Api.Common.Entities.Connectors.CanConnector)">
            <summary>
            Assigns all CAN Bus parameters of the given <see cref="T:Hbm.Api.Common.Entities.Connectors.CanConnector" /> (e.g. <see cref="P:Hbm.Api.Common.Entities.Connectors.CanConnector.BitRate" />,
            <see cref="P:Hbm.Api.Common.Entities.Connectors.CanConnector.IsTerminated" />, <see cref="P:Hbm.Api.Common.Entities.Connectors.CanConnector.SupplyVoltage" />, etc. but NOT its channels.
            </summary>
            <param name="canConnector">The CAN connector object containing the parameters to be written.</param>
            <returns><c>List</c> of problems. If no problems have occured, an empty list is returned.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteRoutingEnabled(System.Boolean)">
            <summary>
            Enable or disable the routing functionality.
            </summary>
            <param name="routingEnabled">Specify if the routing functionality should be enabled or not.</param>
            <returns><c>List</c> of problems. If no problems have occured, an empty list is returned.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ChangeConnectorType(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.QuantumX.Enums.ConnectorType)">
            <summary>
            Switches a Connector <see cref="T:Hbm.Api.Common.Entities.Connectors.CanConnector" /> mode to and from CAN bus.
            </summary>
            <param name="quantumXConnector">The IQuantumXConnector object to perform the mode switch.</param>
            <param name="connectorType">The connector type to switch to.</param>
            <returns>
              <c>List</c> of problems. If no problems have occured, an empty list is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">canConnector</exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ResetCanController(System.Int32)">
            <summary>
            Resets the can controller.
            </summary>
            <param name="connectorPosition">The connector position.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteChannel(Hbm.Api.QuantumX.Channels.IQuantumXChannel)">
            <summary>
            Writes a channel to the module.
            </summary>
            <param name="channel">Channel to be assigned to the module.</param>
            <returns><c>List</c> of problems. If no problems have occured, an empty list is returned.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteCanChannelActivation(System.Collections.Generic.List{Hbm.Api.Common.Entities.Channels.Channel},System.Boolean)">
            <summary>
                Writes the CAN channel activation.
            </summary>
            <param name="canChannels">CAN Channels that should be activated or deactivated.</param>
            <param name="activate"><c>True</c> to activate the provided channels, <c>false</c> otherwise.</param>
            <returns>List of problems. If no problems occured, an empty list is returned.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ChangeIp(System.String,System.String,System.Boolean,System.String,System.UInt32,System.String)">
            <summary>
            Method to change the ipAddress of a device
            </summary>
            <param name="ip">ipAddress to assing</param>
            <param name="subnetMask">subnetmask</param>
            <param name="isDhcp">boolean that indicates if is automatci or manual ip set</param>
            <param name="gateWay">gateway</param>
            <param name="tcpPort">port</param>
            <param name="interfaceName">network interface name</param>
            <returns>List of problems occurred</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteDeviceName(System.String)">
            <summary>
            Writes the given module name to the device and if successful updates the object model property <see cref="P:Hbm.Api.Common.Entities.Device.Name"/>
            </summary>
            <param name="name">Module name to be written to the device</param>
            <returns><c>List</c> of problems. If no problems occured, an empty list is returned.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteChannelName(Hbm.Api.QuantumX.Channels.IQuantumXChannel,System.String)">
            <summary>
                Writes a channel name to the module.
            </summary>
            <param name="channel">Channel to be assigned to the module.</param>
            <param name="channelName">Name of the channel.</param>
            <returns><c>List</c> of problems. If no problems occured, an empty list is returned.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteSignal(Hbm.Api.QuantumX.Signals.IQuantumXSignal)">
            <summary>
            Writes a signal to the module.
            If UseAutoFilter is set, the best fitting autofilter will be set and changes will be added to the list of problems
            </summary>
            <param name="signal">Signal to be assigned to the module.</param>
            <returns><c>List</c> of problems. If no problems have occured, an empty list is returned.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteSignalName(Hbm.Api.QuantumX.Signals.IQuantumXSignal,System.String)">
            <summary>
            Writes a signal name to the module.
            </summary>
            <param name="signal">Signal to be assigned to the module.</param>
            <param name="signalName">Name of the signal.</param>
            <returns><c>List</c> of problems. If no problems have occured, an empty list is returned.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteSensor(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.SensorDB.Entities.Sensor,Hbm.Api.Common.Enums.AutoCalibrationMode,Hbm.Api.Common.Enums.TedsUsageMode)">
            <summary>
                Writes a sensor (at the given connector) to the module.
            </summary>
            <param name="connector">
                Connector to which the sensor belongs. This connector instance must contain the index of the
                connector in its position property
            </param>
            <param name="sensor">
                The <see cref="T:Hbm.Api.SensorDB.Entities.Sensor" /> which is converted to xml and send to the
                module
            </param>
            <param name="autoCalibrationMode">The auto-calibration mode (optional, for CAN and FBG not needed).</param>
            <param name="tedsUsageMode">The TEDS usage mode (optional, for CAN and FBG not needed).</param>
            <returns><c>List</c> of problems. If no problems have occured, an empty list is returned</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteCanBusSensor(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Writes a sensor (at the given connector) to the module.
            </summary>
            <param name="connector">Connector to which the sensor belongs. This connector instance must contain the index of the connector in its position property</param>
            <param name="sensor">The <see cref="T:Hbm.Api.SensorDB.Entities.Sensor" /> which is converted to xml and send to the module</param>
            <returns><c>List</c> of problems. If no problems have occured, an empty list is returned</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteEngineeringUnit(Hbm.Api.QuantumX.Channels.IQuantumXChannel,System.String)">
            <summary>
            Writes a engeineering unit to the module.
            </summary>
            <param name="channel">Channel to be assigned to the module.</param>
            <param name="unit">Unit of the channel.</param>
            <returns><c>List</c> of problems. If no problems have occured, an empty list is returned.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteZeroBalancing(Hbm.Api.QuantumX.Channels.IQuantumXChannel,Hbm.Api.Common.Entities.Zero)">
            <summary>
            Writes the zero balancing (at the given channel) to the module.
            </summary>
            <param name="channel">Channel to which the zero belongs. This channel instance must contain the index of the channel in its position property</param>
            <param name="zero">The common <see cref="T:Hbm.Api.Common.Entities.Zero"/> instance, which is converted to xml and send to the module</param>
            <returns><c>List</c> of problems. If no problems have occured, an empty list is returned</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteDataRateDomain(Hbm.Api.Common.Enums.DataRateDomainType)">
            <summary>
            Writes the given data rate domain to the module.
            </summary>
            <param name="dataRateDomain">Type of the data rate domain to be set</param>
            <returns><c>List</c> of problems. If no problems have occured, an empty list is returned</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteAutoCalibrationMode(Hbm.Api.Common.Entities.Channels.Channel)">
            <summary>
            Writes the auto-calibration mode (of the given channel) to the module.
            </summary>
            <param name="channel">Channel to which the mode belongs.</param>
            <returns><c>List</c> of problems. If no problems have occured, an empty list is returned.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteTimeSource">
            <summary>
            Writes the current <see cref="T:Hbm.Api.Common.Entities.TimeSources.TimeSource"/> to the module.
            </summary>
            <returns><c>List</c> of problems. If no problems have occured, an empty list is returned</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteFbgThreshold(Hbm.Api.Common.Entities.Connectors.FbgConnector,System.Double)">
            <summary>
            Assigns the given detection threshold to the <see cref="P:Hbm.Api.Common.Entities.Connectors.FbgConnector.DetectionThreshold"/> property of the given <see cref="T:Hbm.Api.Common.Entities.Connectors.FbgConnector" /> without
            assigning the whole connector.
            </summary>
            <param name="fbgConnector">The Fbg connector object to which the detection threshold should be written.</param>
            <param name="detectionThreshold">The detection threshold to be written.</param>
            <returns><c>List</c> of problems. If no problems have occured, an empty list will be returned.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteFbgChannelActivation(System.Collections.Generic.List{Hbm.Api.QuantumX.Channels.QuantumXFbgChannel},System.Boolean)">
            <summary>
                Writes the FBG channel activation.
            </summary>
            <param name="quantumXFbgChannels">The FBG channels to be activated or deactivated.</param>
            <param name="activate"><c>True</c> to activate the provided channels, <c>false</c> otherwise.</param>
            <returns>
                List of problems occurred activating/deactivating the provided channels. If no problem occurs, an empty list
                is returned.
            </returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteFbgChannelDetectionRange(Hbm.Api.Common.Entities.Channels.FbgChannel,System.Double,System.Double)">
            <summary>
            Writes the FBG channel detection range.
            </summary>
            <param name="fbgChannel">The FBG channels to which to assign the new range.</param>
            <param name="wavelengthLow">Minimum wavelength for the given channel.</param>
            <param name="wavelengthHigh">Maximum wavelength for the given channel.</param>
            <returns><c>List</c> of problems. If no problems have occurred, an empty list is returned.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ReadSingleMeasurementValues(System.Collections.Generic.List{Hbm.Api.Common.Entities.Signals.Signal})">
            <summary>
            Reads the single measurement values for each given signal in <paramref name="measurementSignals"/>.
            and set them into the signal instances.
            </summary>
            <param name="measurementSignals">Signals for which single measurement values should be read and assigned</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ReadSingleElectricalValue(Hbm.Api.Common.Entities.Signals.Signal)">
            <summary>
            Reads the current electrical value for the given signal
            </summary>
            <param name="signal">Signal for which the current electrical value should be read</param>
            <returns>Current electrical value for given signal</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ReadDeviceStatusList(System.Collections.Generic.Dictionary{Hbm.Api.Common.Enums.StatusType,System.Collections.Generic.List{Hbm.Api.Common.Entities.DeviceStatus}})">
            <summary>
            Reads the list of device statuses.
            </summary>
            <param name="deviceStatuses">The list of device statuses to be filled.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.GetTedsStatus(Hbm.Api.QuantumX.Channels.IQuantumXChannel)">
            <summary>
            Returns the TEDS status.
            </summary>
            <param name="channel">Channel for which the status will be determined</param>
            <returns>DeviceStatus with ChannelTedsStatus</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ReadNtpTimeSourceQuality(System.Double@,System.String@)">
            <summary>
            Returns the offset (timespan between synchronization time source and time of device) in ms and a <see cref="T:Hbm.Api.Common.Entities.TimeSources.TimeSource"/> dependent
            string with further information about the quality of the synchronization.
            </summary>
            <param name="offsetInMs">Offset to time source in milliseconds, <see cref="F:System.Double.MaxValue"/> if offset can not be determined</param>
            <param name="quality">Comma seperated standard NTP qualitiy infos: "remote, refid, st, t, when, poll, reach, delay, offset, jitter"</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ReadPtpTimeSourceQuality(System.Double@,System.String@)">
            <summary>
            Returns the offset (timespan between synchronization time source and time of device) in ms and a <see cref="T:Hbm.Api.Common.Entities.TimeSources.TimeSource"/> dependent
            string with further information about the quality of the synchronization.
            </summary>
            <param name="offsetInMs">Offset to time source in milliseconds, <see cref="F:System.Double.MaxValue"/> if offset can not be determined</param>
            <param name="quality">Comma seperated PTP qualitiy infos: "GrandmasterID, SyncMode, TimeScaleFlags, UtcOffset, UtcOffsetUsed, MasterOffset" </param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ReadSpectrum(Hbm.Api.Common.Enums.FbgSpectrumType,System.Int32)">
            <summary>
            Reads the spectrum according to given spectrum type and connector position from current device.
            </summary>
            <param name="spectrumType">Demanded spectrum type</param>
            <param name="connectorPosition">Connector position (1..n)</param>
            <returns>Spectrum according to demanded type and connector position</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.AutoDetectFbgBands(Hbm.Api.QuantumX.Connectors.QuantumXFbgConnector,System.Double,System.Double)">
            <summary>
            Executes an auto detection for bands at the given connector.
            </summary>
            <param name="fbgConnector">Connector at which to execute the auto detection for bands</param>
            <param name="threshold">Threshold to use for auto detection</param>
            <param name="bandWidth">Width of the bands to detect</param>
            <returns>Result of the auto detection process</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ReadDeviceErrorStatusList(System.Collections.Generic.List{Hbm.Api.Common.Entities.DeviceErrorStatus})">
            <summary>
            Reads the list of device error statuses.
            </summary>
            <param name="deviceErrorStatuses">The list of device error statuses to be filled.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.LoadFactoryDefaults">
            <summary>
            Loads the factory defaults for the connectors, channels and signals.
            </summary>
            <returns><c>List</c> of problems. If no problems have occured, an empty list is returned.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.SetTedsUsageMode(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.Common.Enums.TedsUsageMode)">
            <summary>
            Sets the TEDS usage mode and re-reads the connector settings.
            </summary>
            <param name="quantumXConnector">The QuantumX connector.</param>
            <param name="tedsUsageMode">The TEDS usage mode to be set.</param>
            <returns>The list of problems or empty list if no problem occurred.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ReadTedsBinaryDataBlock(Hbm.Api.QuantumX.Connectors.QuantumXAnalogInConnector,System.String@,System.Byte[]@)">
            <summary>
            Reads the teds binary data block.
            </summary>
            <param name="connector">The connector.</param>
            <param name="tid">The tid string.</param>
            <param name="binaryTeds">The binary teds block.</param>
            <returns><c>true</c> when reading TEDS was successfull, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">connector</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteTedsBinaryDataBlock(Hbm.Api.QuantumX.Connectors.QuantumXAnalogInConnector,System.String,System.Byte[])">
            <summary>
            Writes the teds binary.
            </summary>
            <param name="connector">The connector.</param>
            <param name="tid">The tid.</param>
            <param name="data">The data.</param>
            <returns>A list of problems, when applicable.</returns>
            <exception cref="T:System.ArgumentNullException">connector</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ActivateTeds(Hbm.Api.QuantumX.Connectors.QuantumXAnalogInConnector)">
            <summary>
            Reloads connected TEDS sensor information into the amplifier.
            </summary>
            <param name="connector">Connector where TEDS should be activated</param>
            <returns><c>List</c> of problems. If no problems have occured, an empty list is returned.</returns>
            <remarks>This function returns warnings when the given connector does not support TEDS or there is no TEDS connected.</remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ReadAnalogInChannel(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.QuantumX.Channels.QuantumXAnalogInChannel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Reads the channel of the given connector and puts the parameters into our object structure.
            </summary>
            <param name="connector">The connector.</param>
            <param name="channel">The old channel.</param>
            <param name="problems">The list of problems to add problems to.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.FlashLed(Hbm.Api.Common.Enums.LedFlashMode)">
            <summary>
            Flashes the system LED in the given mode/color.
            </summary>
            <param name="mode">Mode/color to use for flashing.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.FlashLed(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.Common.Enums.LedFlashMode)">
            <summary>
            Flashes the LED of the given connector in the given mode/color.
            </summary>
            <param name="connector">Connector that should be flashing.</param>
            <param name="mode">Mode/color to use for flashing.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.Reboot">
            <summary>
            Reboots the current module.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ReadXmlView(Hbm.Api.QuantumX.Enums.XmlViewType)">
            <summary>
            Reads the given xml view content from the current device.
            Not all views are supported by all modules.
            </summary>
            <param name="view">View to be retrieved as xml.</param>
            <returns>Xml content of the view as <c>string</c> or <c>String.Empty</c> if the device doesn't support the view.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ReadXmlSection(Hbm.Api.QuantumX.Enums.XmlViewType,System.String)">
            <summary>
            Reads the given XML section content from the current device.
            Not all views are supported by all modules.
            </summary>
            <param name="view">View to retrieve the XML section from.</param>
            <param name="xPath">The XPath to the XML section.</param>
            <returns>XML content of the XML section as <c>string</c> or <c>String.Empty</c> if the device doesn't support the view.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteXmlView(System.String,Hbm.Api.QuantumX.Enums.XmlViewType)">
            <summary>
            Writes a view to the module.
            </summary>
            <param name="xmlViewContent">Xml content to be assigned to the module.</param>
            <param name="view">Type of the xml view.</param>
            <returns><c>List</c> of problems. If no problems have occured, an empty list is returned.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteXmlSection(System.String,System.String,Hbm.Api.QuantumX.Enums.XmlViewType)">
            <summary>
            Writes a XML section of the given view to the module.
            </summary>
            <param name="xPath">The XPath to the XML section.</param>
            <param name="xmlViewContent">XML content to be assigned to the module.</param>
            <param name="view">Type of the XML view.</param>
            <returns><c>List</c> of problems. If no problems have occured, an empty list is returned.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ReadXsdView(Hbm.Api.QuantumX.Enums.XmlViewType)">
            <summary>
            Reads the given xsd view content from the current device.
            Not all views are supported by all modules.
            </summary>
            <param name="view">View to be retrieved as xsd.</param>
            <returns>Xsd content of the view as <c>string</c> or <c>String.Empty</c> if the device doesn't support the view.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ExecuteWriteControl(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Executes the QuantumX control <paramref name="controlName"/> (e.g. "SETDIGITALIO") 
            with the given <paramref name="parameters"/> as string list.
            No data is returned by the control. 
            </summary>
            <param name="controlName">Name of the control</param>
            <param name="parameters">List of strings with the required parameters for the control</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ExecuteReadControl(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Executes the QuantumX control <paramref name="controlName"/> (e.g. "GETDIGITALIO") 
            with the given <paramref name="parameters"/> as string list.
            The data from the control is returned as xml string.
            </summary>
            <param name="controlName">Name of the control</param>
            <param name="parameters">List of strings with the required parameters for the control</param>
            <returns>Xml string with the result data from the control</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteExtendedSampleRateModeConnectors(System.Collections.Generic.List{Hbm.Api.QuantumX.Connectors.IQuantumXConnector})">
            <summary>
            Writes the extended sample-rate mode for the given (standard) connectors.
            </summary>
            <param name="connectorsForExtendedSampleRate">The connectors for the extended sample-rate mode.</param>
            <returns><c>List</c> of problems. If no problems have occured, an empty list is returned.</returns>
            <remarks>All standard connectors will be turned off beforehand.</remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteNormalSampleRateModeForAllConnectors">
            <summary>
            Writes the normal sample-rate mode for all (standard) connectors.
            </summary>
            <returns><c>List</c> of problems. If no problems have occured, an empty list is returned.</returns>
            <remarks>All standard connectors will be turned off beforehand.</remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteDigitalIoInputThreshold(Hbm.Api.QuantumX.Enums.DigitalIoInputThreshold)">
            <summary>
            Writes the digital I/O input threshold.
            </summary>
            <param name="inputThreshold">The input threshold.</param>
            <returns><c>List</c> of problems. If no problems have occured, an empty list is returned.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ReadDigitalIoInputThreshold">
            <summary>
            Reads the digital I/O input threshold.
            </summary>
            <returns>The input threshold.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteIsochronousFlag(Hbm.Api.QuantumX.Signals.IQuantumXIsochronousSignal,System.Boolean)">
            <summary>
            Writes the isochronous flag for the given signal.
            </summary>
            <param name="isoSignal">The signal to set the flag for.</param>
            <param name="isIsochronous"><c>true</c> to set the isochronous flag, otherwise <c>false</c>.</param>
            <returns><c>List</c> of problems. If no problems have occured, an empty list is returned.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ReadIsochronousFlag(Hbm.Api.QuantumX.Signals.IQuantumXIsochronousSignal)">
            <summary>
            Reads the isochronous flag of the given signal.
            </summary>
            <param name="isoSignal">The signal to get the flag from.</param>
            <returns><c>true</c> if the isochronous flag is set, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteInputSignalReference(Hbm.Api.Common.Entities.Channels.IInputSignalReference,System.Int32,Hbm.Api.QuantumX.QuantumXDevice,Hbm.Api.QuantumX.Signals.IQuantumXSignal)">
            <summary>
            Writes the input signal reference.
            </summary>
            <param name="channel">The channel.</param>
            <param name="inputPosition">The position of the signal input.</param>
            <param name="inputSignalDevice">The device with the input signal.</param>
            <param name="inputSignal">The input signal.</param>
            <returns><c>List</c> of problems. If no problems have occured, an empty list is returned.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteRemoveInputSignalReference(Hbm.Api.Common.Entities.Channels.IInputSignalReference,System.Int32)">
            <summary>
            Removes the input signal reference.
            </summary>
            <param name="channel">The channel.</param>
            <param name="inputPosition">The position of the signal input.</param>
            <returns><c>List</c> of problems. If no problems have occured, an empty list is returned.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteChannelPrivate(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.QuantumX.Channels.QuantumXAnalogInChannel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Writes the specified standard channel to the module.
            </summary>
            <param name="connector">The connector.</param>
            <param name="qxAnalogInChannel">Channel to be assigned to the module.</param>
            <param name="problems"><c>List</c> of problems. New problems may be appended to this list.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteChannelPrivate(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.QuantumX.Channels.QuantumXFbgChannel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
                Writes the specified FBG channel to the module.
            </summary>
            <param name="connector">The connector.</param>
            <param name="qxFbgChannel">Channel to be assigned to the module.</param>
            <param name="problems"><c>List</c> of problems. New problems may be appended to this list.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteChannelsPrivate(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,System.Collections.Generic.List{Hbm.Api.QuantumX.Channels.QuantumXFbgChannel},System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
                Writes the provided FBG channels to the module.
            </summary>
            <param name="connector">The connector.</param>
            <param name="quantumXFbgChannels">Channels to be assigned to the module.</param>
            <param name="problems"><c>List</c> of problems. New problems may be appended to this list.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteChannelPrivate(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.QuantumX.Channels.QuantumXCanInChannel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Writes the specified CAN input channel to the module.
            </summary>
            <param name="connector">The connector.</param>
            <param name="qxCanInChannel">Channel to be assigned to the module.</param>
            <param name="problems"><c>List</c> of problems. New problems may be appended to this list.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteChannelPrivate(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.QuantumX.Channels.QuantumXCanRawChannel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Writes the specified CAN RAW channel to the module.
            </summary>
            <param name="connector">The connector.</param>
            <param name="qxCanRawChannel">Channel to be assigned to the module.</param>
            <param name="problems"><c>List</c> of problems. New problems may be appended to this list.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteChannelPrivate(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.QuantumX.Channels.QuantumXCanOutChannel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Writes the specified CAN output channel to the module.
            </summary>
            <param name="connector">The connector.</param>
            <param name="qxCanOutChannel">Channel to be assigned to the module.</param>
            <param name="problems"><c>List</c> of problems. New problems may be appended to this list.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.GenerateCanChannelActivationXml(System.Collections.Generic.IEnumerable{Hbm.Api.Common.Entities.Channels.Channel},System.Boolean,System.Collections.Generic.ICollection{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
                Generates the CAN channel activation XML.
            </summary>
            <param name="canChannels">CAN Channels that should be activated or deactivated.</param>
            <param name="activate"><c>True</c> to activate the provided channels, <c>false</c> otherwise.</param>
            <param name="problems">List of problems. If no problems occured, an empty list is returned.</param>
            <returns>The CAN activation XML.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.GenerateFbgChannelActivationXml(System.Collections.Generic.List{Hbm.Api.QuantumX.Channels.QuantumXFbgChannel},System.Boolean,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
                Generates the FBG channel activation XML.
            </summary>
            <param name="quantumXFbgChannels">The FBG channels to be activated or deactivated.</param>
            <param name="activate"><c>True</c> to activate the provided channels, <c>false</c> otherwise.</param>
            <param name="problems">
                List of problems occurred activating/deactivating the provided channels. If no problem occurs,
                an empty list is returned.
            </param>
            <returns>The FBG activation XML.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteSignalPrivate(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.QuantumX.Signals.QuantumXAnalogInSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Writes the specified standard signal to the module.
            </summary>
            <param name="connector">The connector.</param>
            <param name="qxAnalogInSignal">Signal to be assigned to the module.</param>
            <param name="problems"><c>List</c> of problems. New problems may be appended to this list.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteSignalPrivate(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.QuantumX.Signals.QuantumXFbgSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Writes the specified fiber bragg grating signal to the module.
            </summary>
            <param name="connector">The connector.</param>
            <param name="qxFbgSignal">Signal to be assigned to the module.</param>
            <param name="problems"><c>List</c> of problems. New problems may be appended to this list.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteSignalPrivate(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.QuantumX.Signals.QuantumXAnalogOutSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Writes the specified analog out signal to the module.
            </summary>
            <param name="connector">The connector.</param>
            <param name="qxAnalogOutSignal">Signal to be assigned to the module.</param>
            <param name="problems"><c>List</c> of problems. New problems may be appended to this list.</param>
            <remarks>No signal name written, because analog out does not have one. Re-reading provides us with a default name.</remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteSignalPrivate(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.QuantumX.Signals.QuantumXDigitalSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Writes the specified digital signal to the module.
            </summary>
            <param name="connector">The connector.</param>
            <param name="qxDigitalSignal">Signal to be assigned to the module.</param>
            <param name="problems"><c>List</c> of problems. New problems may be appended to this list.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteSignalPrivate(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.QuantumX.Signals.QuantumXCanInSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Writes the specified CAN input signal to the module (actually the whole channel).
            </summary>
            <param name="connector">The connector.</param>
            <param name="qxCanInSignal">Signal to be assigned to the module.</param>
            <param name="problems"><c>List</c> of problems. New problems may be appended to this list.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteSignalPrivate(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.QuantumX.Signals.QuantumXCanRawSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Writes the specified CAN input signal to the module (actually the whole channel).
            </summary>
            <param name="connector">The connector.</param>
            <param name="qxCanInSignal">Signal to be assigned to the module.</param>
            <param name="problems"><c>List</c> of problems. New problems may be appended to this list.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ApplyAutoFilter(Hbm.Api.Common.Entities.Signals.SyncSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Applies the best fitting filter to the given signal.
            </summary>
            <param name="syncSignal">The signal to apply the auto filter on.</param>
            <param name="problems">Problems during assignment.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.AddToProblemList(System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.Collections.Generic.List{Hbm.Api.QuantumX.Core.Entities.ParametrizationProblem},Hbm.Api.QuantumX.Core.CommunicationManager.ProblemContextType,Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.QuantumX.Signals.IQuantumXSignal)">
            <summary>
            Converts the list of <paramref name="lastXmlProblems"/> to common problems and adds them to the given <paramref name="problems"/> list.
            </summary>
            <remarks>
            Not all problems are converted as they are. Some problems are modified or removed from the <paramref name="lastXmlProblems"/> list before.
            </remarks>
            <param name="problems">Common problem list, to which the converted xml problems are added</param>
            <param name="lastXmlProblems">List of QuantumX xml problems</param>
            <param name="problemContext">Context type of the problem condition</param>
            <param name="connector">>Connector to which the problem belongs (optional)</param>
            <param name="signal">Signal to which the problem belongs (optional)</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ModifyXmlProblemList(System.Collections.Generic.List{Hbm.Api.QuantumX.Core.Entities.ParametrizationProblem})">
            <summary>
            Modifies the given list of parametrization problems.
            E.g. some problems are removed from the list, or their problem type is changed
            </summary>
            <param name="lastXmlProblems">Given list of parametrization problems to be modified</param>
            <returns>Modified list of parametrization problems</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.RemoveDuplicatedProblems(System.Collections.Generic.List{Hbm.Api.QuantumX.Core.Entities.ParametrizationProblem})">
            <summary>
            Removes multiple occurrences of problems from the list of parametrization problems. 
            Some modules are retrieving the same xml problem more than once.
            </summary>
            <param name="lastXmlProblems">Given list of parametrization problems to be modified</param>
            <returns>Modified list of parametrization problems</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.RemoveUnwishedProblems(System.Collections.Generic.List{Hbm.Api.QuantumX.Core.Entities.ParametrizationProblem})">
            <summary>
            Removes unwished problems from the list of parametrization problems. 
            E.g. some modules have a special parameter tag for sensors, but other modules don't have this tag.
            In this case the tags are sent for all modules and the resulting warnings are deleted with this method.
            </summary>
            <param name="lastXmlProblems">Given list of parametrization problems to be modified</param>
            <returns>Modified list of parametrization problems</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ChangeProblemType(System.Collections.Generic.List{Hbm.Api.QuantumX.Core.Entities.ParametrizationProblem})">
            <summary>
            Changes the type of specific problem from warning to error
            (e.g the type of a problem is warning from the module's point of view, but we have to handle it as an error).
            </summary>
            <param name="lastXmlProblems">Given list of parametrization problems to be modified</param>
            <returns>Modified list of parametrization problems</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ConvertToProblemList(System.Collections.Generic.List{Hbm.Api.QuantumX.Core.Entities.ParametrizationProblem},Hbm.Api.QuantumX.Core.CommunicationManager.ProblemContextType,Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.QuantumX.Signals.IQuantumXSignal)">
            <summary>
            Converts the list of QuantumX xml problems into a common problem list
            </summary>
            <param name="lastXmlProblems">List of QuantumX xml problems</param>
            <param name="errorType">Type of the error condition</param>
            <param name="connector">Connector to which the problem belongs (optional)</param>
            <param name="signal">Signal to which the problem belongs (optional)</param>
            <returns>Common problem list, which contains all converted xml problems</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.GetConnector(Hbm.Api.QuantumX.Core.Entities.ParametrizationProblem)">
            <summary>
            Gets the connector according to the given <c>ParametrizationProblem</c>
            </summary>
            <param name="xmlProblem">The XML problem.</param>
            <returns>Connector or <c>null</c> if connector can not be found</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.GetChannel(Hbm.Api.Common.Entities.Connectors.Connector,Hbm.Api.QuantumX.Core.Entities.ParametrizationProblem)">
            <summary>
            Gets the channel according to the given connector and <c>ParametrizationProblem</c>
            </summary>
            <param name="connector">The connector.</param>
            <param name="xmlProblem">The XML problem.</param>
            <returns>Channel or <c>null</c> if channel can not be found</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.GetSignal(Hbm.Api.Common.Entities.Channels.Channel,Hbm.Api.QuantumX.Core.Entities.ParametrizationProblem)">
            <summary>
            Gets the signal according to the given channel and <c>ParametrizationProblem</c>
            </summary>
            <param name="channel">The channel.</param>
            <param name="xmlProblem">The XML problem.</param>
            <returns>Signal or <c>null</c> if signal can not be found</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ExtractNumberAfterTag(System.String,System.String,System.Int32@)">
            <summary>
            Extracts the number (integer) within a given string behind a given tag.
            </summary>
            <param name="context">The context.</param>
            <param name="tag">The tag .</param>
            <param name="number">The number.</param>
            <returns><c>True</c> if a number after the given tag could be extracted</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.MapParameterizationProblem(Hbm.Api.QuantumX.Core.Entities.ParametrizationProblem,Hbm.Api.Common.Entities.Connectors.Connector,Hbm.Api.Common.Entities.Channels.Channel,Hbm.Api.SensorDB.Entities.Sensor,Hbm.Api.Common.Entities.Signals.Signal,Hbm.Api.Common.Entities.Zero)">
            <summary>
            Maps the given parameterization problem, which includes XML information about a problem during an assignment, to a <c>Problem</c>.
            </summary>
            <param name="parameterizationProblem">The parameterization problem.</param>
            <param name="connector">The connector.</param>
            <param name="channel">The channel.</param>
            <param name="sensor">The sensor.</param>
            <param name="signal">The signal.</param>
            <param name="zero">The zero.</param>
            <returns><c>Problem</c> according to the given parameterization problem or <c>nUll</c>, if the given parameterization problem could not be mapped.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.GetPropertyFromXmlPath(System.String)">
            <summary>
            Gets the property from XML path.
            E.g.: xmlPath="/Amplifier/Connector1/Mode/AnalogInChannel/Sensor/PhysUnit" => returns "PhysUnit"
            </summary>
            <param name="xmlPath">The XML path (e.g. "/Amplifier/Connector1/Mode/AnalogInChannel/Sensor/PhysUnit").</param>
            <returns>Property from XML path (e.g. "PhysUnit")</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.MapXmlPropertyToCommonProperty(System.String)">
            <summary>
            Maps the XML property to the corresponding common property.
            E.g.: "PhysUnit" => returns "EngineeringUnit" which is the corresponding proptery name within the common api.
            </summary>
            <param name="xmlProperty">The XML property (e.g. "PhysUnit")</param>
            <returns>Corresponding propterty name which is used in common api (e.g. "EngineeringUnit")</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.FillXmlProblemData(Hbm.Api.Common.Entities.Problems.Problem,Hbm.Api.QuantumX.Core.Entities.ParametrizationProblem)">
            <summary>
            Fills the data of the last xml problem from the module into the given problem instance
            </summary>
            <param name="problem">Instance of <see cref="T:Hbm.Api.Common.Entities.Problems.Problem"/> to be filled</param>
            <param name="lastXmlProblem">Data of the last xml problem</param>
            <returns>Filled problem instance</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ReadAndReflectConnectorModuleData(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Reads the data from the device and compares the connector data with the data of the given <paramref name="demandedConnector"/>.
            This method must be called after an connector assignment to get the values, which are silently changed by the module without
            giving a xml warning.
            </summary>
            <param name="demandedConnector">Given connector, which was used for the module assignment.</param>
            <param name="problems">List of problems to add further warnings and errors.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ReadAndReflectChannelModuleData(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.QuantumX.Channels.QuantumXFbgChannel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Reads the data from the device and compares the channel data with the data of the given physical channel <paramref name="demandedFbgChannel"/>.
            This method must be called after an connector assignment to get the values, which are silently changed by the module without
            giving a xml warning.
            </summary>
            <param name="demandedConnector">Given connector, to which the channel <paramref name="demandedFbgChannel"/> belongs.</param>
            <param name="demandedFbgChannel">Given Fbg channel, which was used for the module assignment.</param>
            <param name="problems">List of problems to add further warnings and errors.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ReadAndReflectChannelsModuleData(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,System.Collections.Generic.List{Hbm.Api.QuantumX.Channels.QuantumXFbgChannel},System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Reads the data from the device and compares the channel data with the data of the given physical channel <paramref name="demandedFbgChannel"/>.
            This method must be called after an connector assignment to get the values, which are silently changed by the module without
            giving a xml warning.
            </summary>
            <param name="demandedConnector">Given connector, to which the channel <paramref name="demandedFbgChannel"/> belongs.</param>
            <param name="demandedFbgChannels">Given Fbg channels, which were used for the module assignment.</param>
            <param name="problems">List of problems to add further warnings and errors.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ReadAndReflectChannelModuleData(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.QuantumX.Channels.QuantumXAnalogInChannel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Reads the data from the device and compares the channel data with the data of the given physical channel <paramref name="demandedAnalogInChannel"/>.
            This method must be called after an connector assignment to get the values, which are silently changed by the module without
            giving a xml warning.
            </summary>
            <param name="demandedConnector">Given connector, to which the channel <paramref name="demandedAnalogInChannel"/> belongs.</param>
            <param name="demandedAnalogInChannel">Given analog in channel, which was used for the module assignment.</param>
            <param name="problems">List of problems to add further warnings and errors.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ReadAndReflectSignalModuleData(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.QuantumX.Signals.QuantumXAnalogInSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Reads the data from the device and compares the signal data with the data of the given analog in signal <paramref name="demandedSignal"/>.
            This method must be called after an connector assignment to get the values, which are silently changed by the module without
            giving a xml warning.
            </summary>
            <param name="demandedConnector">Given connector, to which the analog in signal <paramref name="demandedSignal"/> belongs</param>
            <param name="demandedSignal">Given analog in signal, which was used for the module assignment</param>
            <param name="problems">List of problems to add further warnings and errors.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ReadAndReflectSignalModuleData(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.QuantumX.Signals.QuantumXFbgSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Reads the data from the device and compares the signal data with the data of the given FBG signal <paramref name="demandedSignal"/>.
            This method must be called after an connector assignment to get the values, which are silently changed by the module without
            giving a xml warning.
            </summary>
            <param name="demandedConnector">Given connector, to which the analog in signal <paramref name="demandedSignal"/> belongs</param>
            <param name="demandedSignal">Given FBG signal, which was used for the module assignment</param>
            <param name="problems">List of problems to add further warnings and errors.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ReadAndReflectSensorModuleData(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.SensorDB.Entities.Sensor,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Reads the data from the device and compares the sensor data with the data of the given sensor <paramref name="demandedSensor"/>.
            This method must be called after an connector assignment to get the values, which are silently changed by the module without
            giving a xml warning.
            </summary>
            <param name="demandedConnector">Given connector, to which the sensor <paramref name="demandedSensor"/> belongs</param>
            <param name="demandedSensor">Given sensor, which was used for the module assignment</param>
            <param name="problems">List of problems to add further warnings and errors.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.CompareSensorAndFilters(Hbm.Api.QuantumX.Channels.QuantumXAnalogInChannel,Hbm.Api.Common.Entities.Connectors.Connector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Compares the sensor and filter data of the given demanded channel <paramref name="demandedAnalogInChannel"/> 
            and the channel of the same position on the connector <paramref name="realizedConnector"/>, which was newly read from the device after assignment.
            </summary>
            <param name="demandedAnalogInChannel">Given analog in channel</param>
            <param name="realizedConnector">Connector (newly read from the device after assignment), which contains the channel to be compared <paramref name="demandedAnalogInChannel"/>.</param>
            <param name="problems">List of problems to add further warnings and errors.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.CompareSensorAndFilters(Hbm.Api.QuantumX.Channels.QuantumXFbgChannel,Hbm.Api.Common.Entities.Connectors.Connector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
                Compares the sensor and filter data of the given demanded channel <paramref name="demandedFbgChannel" />
                and the channel of the same position on the connector <paramref name="realizedConnector" />, which was newly read
                from the device after assignment.
            </summary>
            <param name="demandedFbgChannel">Given FBG channel</param>
            <param name="realizedConnector">
                Connector (newly read from the device after assignment), which contains the channel to
                be compared <paramref name="demandedFbgChannel" />.
            </param>
            <param name="problems">List of problems to add further warnings and errors.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.CompareDetectionRange(Hbm.Api.QuantumX.Channels.QuantumXFbgChannel,Hbm.Api.Common.Entities.Connectors.Connector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Compares the detection range of the given demanded channel <paramref name="demandedFbgChannel"/> 
            and the channel of the same position on the connector <paramref name="realizedConnector"/>, which was newly read from the device after assignment.
            </summary>
            <param name="demandedFbgChannel">Given FBG channel</param>
            <param name="realizedConnector">Connector (newly read from the device after assignment), which contains the channel to be compared <paramref name="demandedFbgChannel"/>.</param>
            <param name="problems">List of problems to add further warnings and errors.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.CompareFilters(Hbm.Api.QuantumX.Channels.QuantumXAnalogOutChannel,Hbm.Api.Common.Entities.Connectors.Connector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Compares the filter data of the given demanded channel <paramref name="demandedAOutChannel"/> 
            and the channel of the same position on the connector <paramref name="realizedConnector"/>, which was newly read from the device after assignment.
            </summary>
            <param name="demandedAOutChannel">Given analog out channel</param>
            <param name="realizedConnector">Connector (newly read from the device after assignment), which contains the channel to be compared <paramref name="demandedAOutChannel"/>.</param>
            <param name="problems">List of problems to add further warnings and errors.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.WriteAllStandardConnectorsOff">
            <summary>
            Turns all standard connectors off.
            </summary>
            <returns><c>List</c> of problems. If no problems have occured, an empty list is returned.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ReadSnapshotSignalList">
            <summary>
            Reads the signals from the device including their index within in the double array when reading single measurement values.
            This is required to assign the single measurement value data to the correct signal.
            </summary>
            <returns>New dictionary of snapshot signals, filled with the signal references (key) 
            and their index within the single measurement value array (value)</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.RefreshSnapshotSignalData">
            <summary>
            Reads the signal list from the hardware 
            and allocates or increases the buffer for reading single measurement values, if required.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ParseStatusElementAndAddToList(System.Xml.Linq.XElement,System.Collections.Generic.Dictionary{Hbm.Api.Common.Enums.StatusType,System.Collections.Generic.List{Hbm.Api.Common.Entities.DeviceStatus}})">
            <summary>
                Parses the status element.
            </summary>
            <param name="statusElement">The status element.</param>
            <param name="deviceStatusList">The list of device statuses to be filled.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.AddDeviceBusyStateChangeToDeviceStatus(System.Xml.Linq.XElement,System.Collections.Generic.Dictionary{Hbm.Api.Common.Enums.StatusType,System.Collections.Generic.List{Hbm.Api.Common.Entities.DeviceStatus}})">
            <summary>
                Adds a device busy state change to the device status.
            </summary>
            <param name="statusElement">The status element.</param>
            <param name="deviceStatus">The device status list to which the new channel state change will be added to.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ParseStatusBitsAndAddToList(System.Xml.Linq.XElement,System.Collections.Generic.Dictionary{Hbm.Api.Common.Enums.StatusType,System.Collections.Generic.List{Hbm.Api.Common.Entities.DeviceStatus}})">
            <summary>
                Parses the status bits from the value of status-ID <c>STATUS_ID_BITS_CONNECTOR</c>.
            </summary>
            <param name="statusElement">The status element containing the value for <c>STATUS_ID_BITS_CONNECTOR</c> (no ID check).</param>
            <param name="deviceStatus">The list of device statuses to be filled.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.ParseErrorStatusElementAndAddToList(System.Xml.Linq.XElement,System.Collections.Generic.List{Hbm.Api.Common.Entities.DeviceErrorStatus})">
            <summary>
            Parses the error status element.
            </summary>
            <param name="errorStatusElement">The error status element.</param>
            <param name="deviceErrorStatuses">The list of device error statuses to be filled.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.CompareErrorStatuses(Hbm.Api.Common.Entities.DeviceErrorStatus,Hbm.Api.Common.Entities.DeviceErrorStatus)">
            <summary>
            Compares the error status instances.
            </summary>
            <param name="status1">The first error status to be compared.</param>
            <param name="status2">The second error status to be compared.</param>
            <returns>0, -1 or 1 according to the "CompareTo" result (first is equal, less or greater than second).</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.FindConnector(System.Int32,System.Type[])">
            <summary>
            Finds a connector with the given XML position on the current device within any connector view (could be "Connector", "AdditionalConnector", etc. view)
            </summary>
            <param name="connectorXmlPosition">Position of the connector on the module.</param>
            <param name="connectorTypes">Connector types to search for (e.g. <c>QuantumXAnalogInConnector</c> which is within the "Connector" view or <c>QuantumXAnalogOutConnector</c>, which is located in the "AdditionalConnector" view.</param>
            <returns>The connector with the given XML position on the current device.</returns>
            <remarks>The connectorTypes are necessary because the same connectorXmlPosition could occure in different views</remarks> 
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.FindChannel(Hbm.Api.Common.Entities.Connectors.Connector,System.Int32)">
            <summary>
            Finds the channel with the given XML position on the given connector.
            </summary>
            <param name="connector">The connector.</param>
            <param name="channelXmlPosition">Position of the channel.</param>
            <returns>The channel with the given XML position on the given connector.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.CommunicationManager.FindSignal(Hbm.Api.Common.Entities.Channels.Channel,System.Int32)">
            <summary>
            Finds the signal with the given XML position on the given channel.
            </summary>
            <param name="channel">The channel.</param>
            <param name="signalXmlPosition">Position of the signal.</param>
            <returns>The signal with the given XML position on the given channel.</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Core.DataComparer.DetectionRangeComparer">
            <summary>
            Compares detection ranges after the assignment to the device and takes the changes into the current object model.
            </summary>
            <remarks>
            ATTENTION:
            The detection range comparison is hard-coded. Add or change the method <see cref="M:Hbm.Api.QuantumX.Core.DataComparer.DetectionRangeComparer.CompareAndTakeChanges(Hbm.Api.QuantumX.Channels.QuantumXFbgChannel,Hbm.Api.QuantumX.Channels.QuantumXFbgChannel,Hbm.Api.QuantumX.QuantumXDevice,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})"/> if new properties for detection ranges are added or properties are changed !!!
            </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.DataComparer.DetectionRangeComparer.CompareAndTakeChanges(Hbm.Api.QuantumX.Channels.QuantumXFbgChannel,Hbm.Api.QuantumX.Channels.QuantumXFbgChannel,Hbm.Api.QuantumX.QuantumXDevice,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Compares the detection range data of the given demanded channel <paramref name="demandedChannel"/> 
            and the detection range of the same unique id on the channel <paramref name="realizedChannel"/>, which was newly read from the device after assignment.
            This method checks the detection ranges and takes the changes into the detection range of <paramref name="demandedChannel"/>.
            </summary>
            <param name="demandedChannel">Channel with current detection range (current object model)</param>
            <param name="realizedChannel">Channel (newly read from the device after assignment of the demanded detection range), which contains the detection range to be compared with the one of <paramref name="demandedChannel"/></param>
            <param name="deviceForAddingProblems">Device instance, required for adding problems to problem list</param>
            <param name="problems">List of problems to add further warnings and errors.</param>
        </member>
        <member name="T:Hbm.Api.QuantumX.Core.DataComparer.FilterComparer">
            <summary>
            Compares filter changes after the assignment to the device and takes the changes into the current object model.
            </summary>
            <remarks>
            ATTENTION:
            The filter comparison is hard-coded. Add or change the method <see cref="M:Hbm.Api.QuantumX.Core.DataComparer.FilterComparer.CompareAndTakeChanges(Hbm.Api.QuantumX.Signals.QuantumXAnalogInSignal,Hbm.Api.QuantumX.Channels.QuantumXAnalogInChannel,Hbm.Api.QuantumX.QuantumXDevice,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})"/> if new properties for filters are added or properties are changed !!!
            </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.DataComparer.FilterComparer.CompareAndTakeChanges(Hbm.Api.QuantumX.Signals.QuantumXAnalogInSignal,Hbm.Api.QuantumX.Channels.QuantumXAnalogInChannel,Hbm.Api.QuantumX.QuantumXDevice,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Compares the filter data of the given demanded signal <paramref name="demandedSignal"/> 
            and the signal of the same unique id on the channel <paramref name="realizedChannel"/>, which was newly read from the device after assignment.
            This method checks the filter frequency and the filter type and takes the changes into the filter of <paramref name="demandedSignal"/>.
            </summary>
            <remarks>
            If the filter type is different, the filter instance of the <paramref name="demandedSignal"/> will be replaced by the realized filter instance. 
            </remarks>
            <param name="demandedSignal">Given analog in signal (current object model)</param>
            <param name="realizedChannel">Channel (newly read from the device after assignment), which contains the signal to be compared with <paramref name="demandedSignal"/></param>
            <param name="deviceForAddingProblems">Device instance, required for adding problems to problem list</param>
            <param name="problems">List of problems to add further warnings and errors.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.DataComparer.FilterComparer.CompareAndTakeChanges(Hbm.Api.QuantumX.Signals.QuantumXFbgSignal,Hbm.Api.QuantumX.Channels.QuantumXFbgChannel,Hbm.Api.QuantumX.QuantumXDevice,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Compares the filter data of the given demanded signal <paramref name="demandedSignal"/> 
            and the signal of the same unique id on the channel <paramref name="realizedChannel"/>, which was newly read from the device after assignment.
            This method checks the filter frequency and the filter type and takes the changes into the filter of <paramref name="demandedSignal"/>.
            </summary>
            <remarks>
            If the filter type is different, the filter instance of the <paramref name="demandedSignal"/> will be replaced by the realized filter instance. 
            </remarks>
            <param name="demandedSignal">Given analog in signal (current object model)</param>
            <param name="realizedChannel">Channel (newly read from the device after assignment), which contains the signal to be compared with <paramref name="demandedSignal"/></param>
            <param name="deviceForAddingProblems">Device instance, required for adding problems to problem list</param>
            <param name="problems">List of problems to add further warnings and errors.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.DataComparer.FilterComparer.CompareAndTakeChanges(Hbm.Api.QuantumX.Signals.QuantumXAnalogOutSignal,Hbm.Api.QuantumX.Channels.QuantumXAnalogOutChannel,Hbm.Api.QuantumX.QuantumXDevice,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Compares the filter data of the given demanded signal <paramref name="demandedSignal"/> 
            and the signal of the same unique id on the channel <paramref name="realizedChannel"/>, which was newly read from the device after assignment.
            This method checks the filter frequency and the filter type and takes the changes into the filter of <paramref name="demandedSignal"/>.
            </summary>
            <remarks>
            If the filter type is different, the filter instance of the <paramref name="demandedSignal"/> will be replaced by the realized filter instance. 
            </remarks>
            <param name="demandedSignal">Given analog out signal (current object model).</param>
            <param name="realizedChannel">Channel (newly read from the device after assignment), which contains the signal to be compared with <paramref name="demandedSignal"/>.</param>
            <param name="deviceForAddingProblems">Device instance, required for adding problems to problem list.</param>
            <param name="problems">List of problems to add further warnings and errors.</param>
        </member>
        <member name="T:Hbm.Api.QuantumX.Core.DataComparer.ChannelComparer">
            <summary>
            Compare channels according to their connector index, channel type (string) and channel index.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.DataComparer.ChannelComparer.CompareChannels(Hbm.Api.Common.Entities.Channels.Channel,Hbm.Api.Common.Entities.Channels.Channel)">
            <summary>
            Compares two channels (to be used in <c>List&lt;Channel&gt;.Sort(...)</c>).
            </summary>
            <param name="channel1">The first channel.</param>
            <param name="channel2">The second channel.</param>
            <returns><c>&lt;0</c> when first is less than second, <c>0</c> when equal or <c>&gt;0</c> when first is greater than second.</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Core.DataComparer.SensorComparer">
            <summary>
            Compares sensor (and scaling) changes after the assignment to the device and takes the changes to the current object model.
            </summary>
            <remarks>
            ATTENTION:
            The exclude list for sensor and scaling properties are defined as string lists of the property names.
            Add or change the property names in <see cref="F:Hbm.Api.QuantumX.Core.DataComparer.SensorComparer._excludedSensorProperties"/> and <see cref="F:Hbm.Api.QuantumX.Core.DataComparer.SensorComparer._excludedScalingProperties"/>, if new properties are added or property names are changed!!!
            </remarks>
        </member>
        <member name="F:Hbm.Api.QuantumX.Core.DataComparer.SensorComparer._excludedSensorProperties">
            <summary>
             Property names to be excluded from generic sensor comparison
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Core.DataComparer.SensorComparer._excludedScalingProperties">
            <summary>
            Property names to be excluded from generic scaling comparison
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.DataComparer.SensorComparer.CompareAndTakeChanges(Hbm.Api.SensorDB.Entities.Sensor,Hbm.Api.SensorDB.Entities.Sensor,Hbm.Api.QuantumX.QuantumXDevice,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Compares the sensor data between the given sensors <paramref name="demandedSensor"/> and the <paramref name="realizedSensor"/>, which was newly read from the device.
            </summary>
            <param name="demandedSensor">Sensor as demanded and in the current object model</param>
            <param name="realizedSensor">Sensor, newly read from the device after assignment, which contains the sensor to be compared with</param>
            <param name="deviceForAddingProblems">Device instance, required for adding problems to problem list</param>
            <param name="problems">List of problems to add further warnings and errors.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.DataComparer.SensorComparer.CompareAndTakeChanges(Hbm.Api.QuantumX.Channels.QuantumXAnalogInChannel,Hbm.Api.QuantumX.Channels.QuantumXAnalogInChannel,Hbm.Api.QuantumX.QuantumXDevice,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Compares the sensor data between the sensors of the given demanded channel <paramref name="demandedAnalogInChannel"/> and the <paramref name="realizedChannel"/>, which was newly read from the device.
            </summary>
            <param name="demandedAnalogInChannel">Given analog in channel which contains the current sensor (current object model)</param>
            <param name="realizedChannel">Channel (newly read from the device after assignment), which contains the sensor to be compared with <paramref name="demandedAnalogInChannel"/></param>
            <param name="deviceForAddingProblems">Device instance, required for adding problems to problem list</param>
            <param name="problems">List of problems to add further warnings and errors.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.DataComparer.SensorComparer.CompareAndTakeChanges(Hbm.Api.QuantumX.Channels.QuantumXFbgChannel,Hbm.Api.QuantumX.Channels.QuantumXFbgChannel,Hbm.Api.QuantumX.QuantumXDevice,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Compares the sensor data between the sensors of the given demanded channel <paramref name="demandedFbgChannel"/> and the <paramref name="realizedChannel"/>, which was newly read from the device.
            </summary>
            <param name="demandedFbgChannel">Given analog in channel which contains the current sensor (current object model)</param>
            <param name="realizedChannel">Channel (newly read from the device after assignment), which contains the sensor to be compared with <paramref name="demandedFbgChannel"/></param>
            <param name="deviceForAddingProblems">Device instance, required for adding problems to problem list</param>
            <param name="problems">List of problems to add further warnings and errors.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.DataComparer.SensorComparer.GenericCompareAndTakeChanges(System.Object,System.Object,System.Collections.Generic.List{System.String},Hbm.Api.QuantumX.QuantumXDevice,Hbm.Api.SensorDB.Entities.Sensor,Hbm.Api.Common.Enums.SettingType,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generic comparison of the data of the <paramref name="demandedInstance"/> and the <paramref name="realizedInstance"/>.
            The relevant changes are updated in <paramref name="demandedInstance"/> and warnings or errors will be generated in the problem list.
            </summary>
            <param name="demandedInstance">Given instance of the current object model</param>
            <param name="realizedInstance">Instance (newly read from the device after assignment) to be compared with <paramref name="demandedInstance"/></param>
            <param name="excludeProperties">List of property names which will be ignored and excluded from the comparision</param>
            <param name="deviceForAddingProblems">Device instance, required for adding problems to problem list</param>
            <param name="sensorForAddingProblems">Sensor instance, required for adding problems to problem list</param>
            <param name="problemSettingType">Setting type for adding problems</param>
            <param name="problems">List of problems to add further warnings and errors.</param>
            <remarks>
            <ul>
                <li>This is only a flat comparison. Associated instances in properties are not compared (e.g. <see cref="T:Hbm.Api.SensorDB.Entities.Category"/> in sensor).</li>
                <li>The problems defined in this method are only for use with sensor or scaling instances!</li>
            </ul>
            </remarks>
        </member>
        <member name="T:Hbm.Api.QuantumX.Core.Entities.CanConnectorEcu">
            <summary>
            Can Connector ECU property
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Core.Entities.CanConnectorEcu.Address">
            <summary>
            Gets or sets the ECU address.
            </summary>
            <value>
            The ECU address.
            </value>
        </member>
        <member name="P:Hbm.Api.QuantumX.Core.Entities.CanConnectorEcu.Active">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Hbm.Api.QuantumX.Core.Entities.CanConnectorEcu"/> is active.
            </summary>
            <value>
              <c>true</c> if active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hbm.Api.QuantumX.Core.Entities.CanConnectorEcu.Dbc">
            <summary>
            Gets or sets the DBC file definition.
            </summary>
            <value>
            The DBC file definition.
            </value>
        </member>
        <member name="P:Hbm.Api.QuantumX.Core.Entities.CanConnectorEcu.Skb">
            <summary>
            Gets or sets the SKB file definition.
            </summary>
            <value>
            The SKB file definition.
            </value>
        </member>
        <member name="T:Hbm.Api.QuantumX.Core.Entities.CanConnectorEcuSkb">
            <summary>
            Can Connector ECU SKB file definition
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Core.Entities.CanConnectorEcuSkb.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>
            The name of the file.
            </value>
        </member>
        <member name="P:Hbm.Api.QuantumX.Core.Entities.CanConnectorEcuSkb.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>
            The content of the file.
            </value>
        </member>
        <member name="T:Hbm.Api.QuantumX.Core.Entities.CanConnectorEcuDbc">
            <summary>
            Can Connector ECU DBC file definition
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Core.Entities.CanConnectorEcuDbc.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>
            The name of the file.
            </value>
        </member>
        <member name="P:Hbm.Api.QuantumX.Core.Entities.CanConnectorEcuDbc.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>
            The content of the file.
            </value>
        </member>
        <member name="T:Hbm.Api.QuantumX.Core.Entities.ParametrizationProblem">
            <summary>
            Represents a problem during xml parametrization (in the QuantumX specific xml problem format)
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Core.Entities.ParametrizationProblem.ProblemType">
            <summary>
            Type of the problem
            </summary>
            <remarks>
            The <see cref="T:Hbm.Api.Utils.Attributes.AdditionalValueAttribute"/> must match the xml tag of the xml message
            </remarks>
        </member>
        <member name="F:Hbm.Api.QuantumX.Core.Entities.ParametrizationProblem.ProblemType.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Core.Entities.ParametrizationProblem.ProblemType.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Core.Entities.ParametrizationProblem.Type">
            <summary>
            Type of the problem
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Core.Entities.ParametrizationProblem.ErrorCode">
            <summary>
            Error code of the problem
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Core.Entities.ParametrizationProblem.Text">
            <summary>
            Text of the problem
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Core.Entities.ParametrizationProblem.Value">
            <summary>
            Value of the problem 
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Core.Entities.ParametrizationProblem.Context">
            <summary>
            Context of the problem
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Core.FrameworkDllWrapperResultManager">
            <summary>
                Framework Dll Wrapper result manager
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapperResultManager.GetResultCodeDescription(System.Int32)">
            <summary>
                Gets the error code description.
            </summary>
            <param name="resultCode">The result code.</param>
            <returns>The result code description.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapperResultManager.GetDescription(System.Int32,Hbm.Api.QuantumX.Enums.FrameworkDllResultCodes)">
            <summary>
                Gets the description.
            </summary>
            <param name="resultCode">The result code.</param>
            <param name="enumCode">The result enumeration description code.</param>
            <returns>The result code description.</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Core.Scanner">
            <summary>
            Provides Scan functionalities
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Scanner.Scan(System.String)">
            <summary>
            Scans the network for QuantumX devices
            </summary>
            <param name="familyName">Name to scan for</param>
            <returns>List of found QuantumX devices</returns>
            <exception cref="T:Hbm.Api.Scan.Entities.ScanFailedException">Thrown if errors during scan for network adapters occur.</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Scanner.ScanForDevice(System.String,System.String)">
            <summary>
            Scans for one specific QuantumX device
            </summary>
            <param name="familyName">Name of the device family to scan for</param>
            <param name="uuid">Unique id of the device to find</param>
            <returns>Device if found, otherwise <c>null</c></returns>
            <exception cref="T:Hbm.Api.Scan.Entities.ScanFailedException">Thrown if errors during scan for network adapters occur.</exception>
        </member>
        <member name="T:Hbm.Api.QuantumX.Core.Xml.Converter.ControlXmlConverter">
            <summary>
            Converter for all xml conversions required for QuantumX Controls.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.Converter.ControlXmlConverter.ToXmlParameters(System.String[])">
            <summary>
            Converts a string array with parameters for a control into a xml parameters string.
            </summary>
            <param name="parameters">String array with parameters for a control</param>
            <returns>Xml string, containing the parameters</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Core.Xml.Converter.ProblemListConverter">
            <summary>
            Converter for converting xml messages into a QuantumX specific problem list
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.Converter.ProblemListConverter.ToProblemList(System.String)">
            <summary>
            Converts a xml string into a problem list
            </summary>
            <param name="lastProblemsXml">Xml string to be converted</param>
            <returns><c>List</c> of problems from the given xml string</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Core.Xml.Converter.DateTimeConverter">
            <summary>
            <c>DateTime</c> conversions between QuantumX xml strings and DateTime
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Core.Xml.Converter.DateTimeConverter.XML_DATETIME_FORMAT">
            <summary>
            Format for DateTime strings in QuantumX xml
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.Converter.DateTimeConverter.ToDateTime(System.String)">
            <summary>
            Converts a string into a nullable DateTime value
            (using the internal QuantumX xml datetime format).
            </summary>
            <param name="dateTime">DateTime string to be converted, e.g. "2012-2-24"</param>
            <returns>Converted DateTime if conversion is possible, else <c>null</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.Converter.DateTimeConverter.ToString(System.Nullable{System.DateTime})">
            <summary>
            Converts a nullable DateTime value into a string 
            (using the internal QuantumX xml datetime format).
            </summary>
            <param name="dateTime">Nullable DateTime value to be converted</param>
            <returns>Converted string if conversion is possible, else <c>String.Empty</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.Converter.DateTimeConverter.CalculateCalibrationExpirationDate(System.Nullable{System.DateTime},System.Int32)">
            <summary>
            Calulates the expiration date of the calibration
            </summary>
            <param name="calibrationDate">Date of calibration</param>
            <param name="numberOfDaysUntilExpiration">Number of days until expiration of calibration</param>
            <returns>Expiration date of the calibration or <c>null</c>, if the date cannot be computed</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.Converter.DateTimeConverter.CalculateCalibrationExpirationPeriod(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Calulcates the number of days until expiration of the calibration
            </summary>
            <param name="calibrationDate">Date of calibration</param>
            <param name="calibrationExpirationDate">Date of expiration of calibration</param>
            <returns>Number of days until expiration of the calibration or <c>0</c> if the period cannot be computed</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Core.Xml.Converter.TagConverter">
            <summary>
            Converts xml tag names to xml strings (start tags, end tags or complete elements)
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.Converter.TagConverter.ToStartTag(System.String)">
            <summary>
            Creates a xml start tag with the given name
            </summary>
            <param name="elementTagName">Name of the tag</param>
            <returns>Xml string containing the generated start tag</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.Converter.TagConverter.ToStartTag(System.String,System.String,System.String)">
            <summary>
            Creates a xml start tag with the given name, including an xml attribute with its value
            </summary>
            <param name="elementTagName">Name of the tag</param>
            <param name="attributeName">Name of the attribute</param>
            <param name="attributeValue">Value of the attribute</param>
            <returns>Xml string containing the generated start tag</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.Converter.TagConverter.ToEndTag(System.String)">
            <summary>
            Creates a xml end tag with the given name
            </summary>
            <param name="elementTagName">Name of the tag</param>
            <returns>Xml string containing the generated end tag</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.Converter.TagConverter.ToElement(System.String,System.String)">
            <summary>
            Creates a complete xml element with the given name (consists of start tag, value and end tag)
            for the given string value
            </summary>
            <param name="elementTagName">Name of the tag</param>
            <param name="value">Value of the element</param>
            <returns>Xml string containing the generated xml element</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.Converter.TagConverter.ToElement``1(System.String,``0)">
            <summary>
            Creates a complete xml element with the given name (consists of start tag, value and end tag)
            for the given value of type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="elementTagName">Name of the tag</param>
            <param name="value">Value of the element</param>
            <returns>Xml string containing the generated xml element</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.Converter.TagConverter.ToEmptyElement(System.String)">
            <summary>
            Creates an empty xml element with the given name
            </summary>
            <param name="elementTagName">Name of the tag</param>
            <returns>Xml string containing the generated empty xml element</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.Converter.TagConverter.ToElement(System.String,System.String,System.Boolean)">
            <summary>
            Creates a complete XML element with the given name (consists of start tag, value and end tag)
            for the given string value and escapes for XML reserved characters when necessary.
            </summary>
            <param name="elementTagName">Name of the tag.</param>
            <param name="value">Value of the element.</param>
            <param name="isUnconvertedString">If set to <c>true</c> a XML conversion will be done, otherwise the value is an XML compatible string.</param>
            <returns>XML string containing the generated xml element.</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager">
            <summary>
            Data manager for reading and creating channel specific xml data.
            </summary>
            <remarks>
            All methods of this class may only be called by <see cref="T:Hbm.Api.QuantumX.Core.CommunicationManager"/> 
            or from classes, which are derived from <see cref="T:Hbm.Api.QuantumX.Core.Xml.XmlDataManager"/>.
            </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.#ctor(Hbm.Api.QuantumX.QuantumXDevice)">
            <summary>
            Creates a new instance and keeps the instance of the device.
            </summary>
            <param name="device"><see cref="T:Hbm.Api.QuantumX.QuantumXDevice"/> on which the <see cref="T:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager"/> instance works</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.ReadCanInChannel(System.Xml.Linq.XElement,System.Int32,System.Int32)">
            <summary>
                Reads the complete channel data from a CAN input channel XML element and maps it into
                a new <see cref="T:Hbm.Api.QuantumX.Channels.QuantumXCanInChannel" /> instance.
            </summary>
            <param name="channelElement">The XML element of the CAN input channel.</param>
            <param name="connectorPosition">The position of the connector.</param>
            <param name="channelPosition">The position of the channel.</param>
            <returns>
                A new instance of type <see cref="T:Hbm.Api.QuantumX.Channels.QuantumXCanInChannel" />, filled with data from
                XML.
            </returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.FillInputSignalReference(Hbm.Api.Common.Entities.Channels.IInputSignalReference,System.Xml.Linq.XElement)">
            <summary>
            Fills the input signal reference (and possibly the module signal reference) into the given channel instance.
            </summary>
            <param name="channel">Channel instance to be filled with data (realizes interface).</param>
            <param name="channelRootElement">Root xml element of the channel.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GenerateInputSignalReferenceXml(Hbm.Api.Common.Entities.Channels.IInputSignalReference)">
            <summary>
            Generates the xml for given input signal reference.
            </summary>
            <param name="channel">Channel instance to be filled with data (realizes interface).</param>
            <returns>Xml data as <c>string</c> which represents the given input signal reference.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GenerateInputSignalModuleReferenceString(Hbm.Api.QuantumX.QuantumXDevice)">
            <summary>
            Generates the input-signal module-reference string for the given device.
            </summary>
            <param name="inputSignalDevice">The device with the input signal.</param>
            <returns>The formatted input-signal module-reference string or <c>null</c> when it is "this" device or <c>null</c> if no device provided</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.ReadAnalogInChannel(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Reads the complete analog in channel data from a channel xml root element and maps it into an new <see cref="T:Hbm.Api.QuantumX.Channels.QuantumXAnalogInChannel"/> instance.
            </summary>
            <param name="channelRootElement">Root xml element of the channel</param>
            <param name="connectorPosition">Position number of the connector</param>
            <returns>New instance of type <see cref="T:Hbm.Api.QuantumX.Channels.QuantumXAnalogInChannel"/>, filled with data from xml</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GenerateAnalogInChannelXml(Hbm.Api.QuantumX.Channels.QuantumXAnalogInChannel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the xml for the given analog in channel.
            </summary>
            <param name="channel">Channel to map to xml.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>Xml data as <c>string</c> which represents the given channel.</returns>
            <exception cref="T:System.InvalidOperationException">If one signal is null or not of type <c>QuantumXAnalogInSignal</c>.</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GetAnalogInChannelXPath(Hbm.Api.QuantumX.Connectors.IQuantumXConnector)">
            <summary>
            Gets the XPath for the analog in channel with the given connector 
            </summary>
            <param name="connector">Connector of type <see cref="T:Hbm.Api.QuantumX.Connectors.IQuantumXConnector"/></param>
            <returns>XPath for the channel</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GenerateAnalogInChannelNameXml(System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given analog in channel name.
            </summary>
            <param name="channelName">Name of the channel.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>XML data as <c>string</c> which represents the given channel name.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GenerateOutputUnitXml(Hbm.Api.SensorDB.Entities.Sensor,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the OutputUnit XML for the sensor.
            </summary>
            <param name="unit">Unit of the channel.</param>        
            <returns>XML data as <c>string</c> which represents the given unit.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.ReadAnalogOutChannel(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Reads the complete analog out channel data from a channel xml root element and maps it into an new <see cref="T:Hbm.Api.QuantumX.Channels.QuantumXAnalogOutChannel" /> instance.
            </summary>
            <param name="channelRootElement">Root xml element of the channel.</param>
            <param name="connectorPosition">Position number of the connector.</param>
            <returns>New instance of type <see cref="T:Hbm.Api.QuantumX.Channels.QuantumXAnalogOutChannel" />, filled with data from xml.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GenerateAnalogOutChannelXml(Hbm.Api.QuantumX.Channels.QuantumXAnalogOutChannel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the xml for the given analog out channel (contains the complete AnalogOut branch).
            </summary>
            <param name="channel">Channel to map to xml.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>Xml data as <c>string</c> which represents the given channel.</returns>
            <exception cref="T:System.InvalidOperationException">Invalid number of signals for QuantumXDigitalSignal
            or
            QuantumXAnalogOutSignal has no signal available</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GetAnalogOutChannelXPath(Hbm.Api.QuantumX.Connectors.IQuantumXConnector)">
            <summary>
            Gets the XPath for the analog out channel with the given connector.
            </summary>
            <param name="connector">Connector of type <see cref="T:Hbm.Api.QuantumX.Connectors.IQuantumXConnector"/>.</param>
            <returns>XPath for the channel.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GenerateAnalogOutChannelNameXml(System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given analog out channel name.
            </summary>
            <param name="channelName">Name of the channel.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>XML data as <c>string</c> which represents the given channel name.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.ReadDigitalChannel(System.Xml.Linq.XElement,System.Int32,Hbm.Api.Common.Enums.DirectionType)">
            <summary>
            Reads the complete digital channel data from a connector xml root element and maps it into
            a new <see cref="T:Hbm.Api.QuantumX.Channels.QuantumXDigitalChannel" /> instance.
            </summary>
            <param name="connectorRootElement">Root xml element of the connector because signals are part of it.</param>
            <param name="connectorPosition">Position number of the connector.</param>
            <param name="direction">The direction of the connector.</param>
            <returns>New instance of type <see cref="T:Hbm.Api.QuantumX.Channels.QuantumXDigitalChannel" />, filled with data from xml.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GenerateDigitalChannelXml(Hbm.Api.QuantumX.Connectors.QuantumXDigitalConnector,Hbm.Api.QuantumX.Channels.QuantumXDigitalChannel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the xml for the given digital channel (contains the complete Pin).
            </summary>
            <param name="connector">The digital connector.</param>
            <param name="channel">Channel to map to xml.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>Xml data as <c>string</c> which represents the given channel.</returns>
            <exception cref="T:System.InvalidOperationException">Invalid number of signals or no signal available.</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GetDigitalChannelXPath(Hbm.Api.QuantumX.Connectors.IQuantumXConnector)">
            <summary>
            Gets the XPath for the digital channel with the given connector and signal.
            </summary>
            <param name="connector">Connector of type <see cref="T:Hbm.Api.QuantumX.Connectors.IQuantumXConnector"/>.</param>
            <returns>XPath for the channel.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GenerateDigitalChannelNameXml(Hbm.Api.QuantumX.Connectors.QuantumXDigitalConnector,System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given digital channel name (signal name in reality).
            </summary>
            <param name="connector">The digital connector.</param>
            <param name="channelName">Name of the channel.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>XML data as <c>string</c> which represents the given channel name.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.ReadCanInChannels(System.Xml.Linq.XElement,System.Int32,System.Int32@)">
            <summary>
            Reads the complete CAN input channel data from a connector XML root element and maps it into
            a list of new <see cref="T:Hbm.Api.QuantumX.Channels.QuantumXCanInChannel" /> instances.
            </summary>
            <param name="connectorElement">The XML element of the CAN Bus connector.</param>
            <param name="connectorPosition">The position of the connector.</param>
            <param name="channelPosition">The position of the last read channel (reference parameter).</param>
            <returns>A list of new instances of type <see cref="T:Hbm.Api.QuantumX.Channels.QuantumXCanInChannel" />, filled with data from XML.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GenerateCanInChannelsXml(System.Collections.Generic.IEnumerable{Hbm.Api.QuantumX.Channels.QuantumXCanInChannel},System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given CAN input channels.
            </summary>
            <param name="channels">The channels to map to XML.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>XML data as <c>string</c> which represents the given channels (no surrounding tag).</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GenerateCanInChannelXml(Hbm.Api.QuantumX.Channels.QuantumXCanInChannel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given CAN input channel.
            </summary>
            <param name="channel">The channel to map to XML.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>XML data as <c>string</c> which represents the given channel.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GenerateCanRawChannelXml(Hbm.Api.QuantumX.Channels.QuantumXCanRawChannel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given CAN RAW channel.
            </summary>
            <param name="channel">The channel to map to XML.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>XML data as <c>string</c> which represents the given channel.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GetCanInChannelXPath(Hbm.Api.QuantumX.Channels.QuantumXCanInChannel)">
            <summary>
            Gets the XPath for the given CAN input channel.
            </summary>
            <param name="channel">Channel of type <see cref="T:Hbm.Api.QuantumX.Channels.QuantumXCanInChannel"/>.</param>
            <returns>XPath for the channel.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GetCanRawChannelXPath(Hbm.Api.QuantumX.Channels.QuantumXCanRawChannel)">
            <summary>
            Gets the XPath for the given CAN RAW channel.
            </summary>
            <param name="channel">Channel of type <see cref="T:Hbm.Api.QuantumX.Channels.QuantumXCanRawChannel"/>.</param>
            <returns>XPath for the channel.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GenerateCanInChannelNameXml(Hbm.Api.QuantumX.Channels.QuantumXCanInChannel,System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given CAN input channel name.
            </summary>
            <param name="channel">The channel to map to XML.</param>
            <param name="channelName">Name of the channel.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>XML data as <c>string</c> which represents the given channel name.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GenerateCanInSignalNameXml(Hbm.Api.QuantumX.Channels.QuantumXCanInChannel,System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given CAN input channel signal name.
            </summary>
            <param name="channel">The channel to map to XML.</param>
            <param name="signalName">Name of the signal.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>XML data as <c>string</c> which represents the given signal name.</returns>
            <exception cref="T:System.ArgumentNullException">channel</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GenerateCanInChannelUnitXml(Hbm.Api.QuantumX.Channels.QuantumXCanInChannel,System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given CAN input channel unit.
            </summary>
            <param name="channel">The channel to map to XML.</param>
            <param name="unit">Unit of the channel.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>XML data as <c>string</c> which represents the given channel name.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GenerateCanInChannelActivationXml(Hbm.Api.QuantumX.Channels.QuantumXCanInChannel,System.Boolean)">
            <summary>
                Generates the XML for the given CAN input channel activation.
            </summary>
            <param name="channel">The CAN input channel to activate/deactivate.</param>
            <param name="activate"><c>True</c> to activate the provided channels, <c>false</c> otherwise.</param>
            <returns>XML data which represents the given channel activation flag.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GenerateCanRawChannelNameXml(Hbm.Api.QuantumX.Channels.QuantumXCanRawChannel,System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given CAN Raw channel name.
            </summary>
            <param name="channel">The channel to map to XML.</param>
            <param name="channelName">Name of the channel.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>XML data as <c>string</c> which represents the given channel name.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.ReadCanOutChannels(System.Xml.Linq.XElement,System.Int32,System.Int32@)">
            <summary>
            Reads the complete CAN output channel data from a connector XML root element and maps it into
            a list of new <see cref="T:Hbm.Api.QuantumX.Channels.QuantumXCanOutChannel" /> instances.
            </summary>
            <param name="connectorElement">The XML element of the CAN Bus connector.</param>
            <param name="connectorPosition">The position of the connector.</param>
            <param name="channelPosition">The position of the last read channel (reference parameter).</param>
            <returns>A list of new instances of type <see cref="T:Hbm.Api.QuantumX.Channels.QuantumXCanOutChannel" />, filled with data from XML.</returns>
            <remarks>In this API CAN transmit channels with a source signal are named <see cref="T:Hbm.Api.Common.Entities.Channels.CanOutChannel" />.</remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.ReadCanOutChannel(System.Xml.Linq.XElement,System.Int32,System.Int32)">
            <summary>
            Reads the complete channel data from a CAN output channel XML element and maps it into
            a new <see cref="T:Hbm.Api.QuantumX.Channels.QuantumXCanOutChannel" /> instance.
            </summary>
            <param name="channelElement">The XML element of the CAN output channel.</param>
            <param name="connectorPosition">The position of the connector.</param>
            <param name="channelPosition">The position of the channel.</param>
            <returns>A new instance of type <see cref="T:Hbm.Api.QuantumX.Channels.QuantumXCanOutChannel" />, filled with data from XML.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GenerateCanOutChannelsXml(System.Collections.Generic.IEnumerable{Hbm.Api.QuantumX.Channels.QuantumXCanOutChannel},System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given CAN output channels.
            </summary>
            <param name="channels">The channels to map to XML.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>XML data as <c>string</c> which represents the given channels (no surrounding tag).</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GenerateCanOutChannelXml(Hbm.Api.QuantumX.Channels.QuantumXCanOutChannel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given CAN output channel.
            </summary>
            <param name="channel">The channel to map to XML.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>XML data as <c>string</c> which represents the given channel.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GetCanOutChannelXPath(Hbm.Api.QuantumX.Channels.QuantumXCanOutChannel)">
            <summary>
            Gets the XPath for the given CAN output channel.
            </summary>
            <param name="channel">Channel of type <see cref="T:Hbm.Api.QuantumX.Channels.QuantumXCanOutChannel"/>.</param>
            <returns>XPath for the channel.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GenerateCanOutChannelNameXml(Hbm.Api.QuantumX.Channels.QuantumXCanOutChannel,System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given CAN output channel name.
            </summary>
            <param name="channel">The channel to map to XML.</param>
            <param name="channelName">Name of the channel.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>XML data as <c>string</c> which represents the given channel name.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GenerateCanOutChannelActivationXml(Hbm.Api.QuantumX.Channels.QuantumXCanOutChannel,System.Boolean)">
            <summary>
                Generates the XML for the given CAN output channel activation.
            </summary>
            <param name="channel">The CAN output channel to activate/deactivate.</param>
            <param name="activate"><c>True</c> to activate the provided channels, <c>false</c> otherwise.</param>
            <returns>XML data which represents the given channel activation flag.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GetInputSignalReferenceXPath(Hbm.Api.Common.Entities.Channels.IInputSignalReference,System.Int32)">
            <summary>
            Gets the XPath for the given input signal reference channel.
            </summary>
            <param name="channel">The channel.</param>
            <param name="inputPosition">The position of the signal input.</param>
            <returns>The XPath for the input signal reference.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GenerateInputSignalReferenceXml(System.Int32,Hbm.Api.QuantumX.QuantumXDevice,Hbm.Api.QuantumX.Signals.IQuantumXSignal)">
            <summary>
            Generates the XML for given input signal reference.
            </summary>
            <param name="inputPosition">The position of the signal input.</param>
            <param name="inputSignalDevice">The device with the input signal.</param>
            <param name="inputSignal">The input signal.</param>
            <returns>XML data as <c>string</c> which represents the given input signal reference.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.ReadFbgChannels(System.Xml.Linq.XElement,System.Int32,System.Int32@)">
            <summary>
            Reads the complete FBG channel data from a connector XML root element and maps it into
            a list of new <see cref="T:Hbm.Api.QuantumX.Channels.QuantumXFbgChannel" /> instances.
            </summary>
            <param name="connectorElement">The XML element of the CAN Bus connector.</param>
            <param name="connectorPosition">The position of the connector.</param>
            <param name="channelPosition">The position of the last read channel (reference parameter).</param>
            <returns>A list of new instances of type <see cref="T:Hbm.Api.QuantumX.Channels.QuantumXCanInChannel" />, filled with data from XML.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.ReadFbgChannel(System.Xml.Linq.XElement,System.Int32,System.Int32)">
            <summary>
            Reads the complete channel data from a FBG channel XML element and maps it into
            a new <see cref="T:Hbm.Api.QuantumX.Channels.QuantumXFbgChannel" /> instance.
            </summary>
            <param name="channelElement">The XML element of the FBG channel.</param>
            <param name="connectorPosition">The position of the connector.</param>
            <param name="channelPosition">The position of the channel.</param>
            <returns>A new instance of type <see cref="T:Hbm.Api.QuantumX.Channels.QuantumXFbgChannel" />, filled with data from XML.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GenerateFbgChannelsXml(System.Collections.Generic.IEnumerable{Hbm.Api.QuantumX.Channels.QuantumXFbgChannel},System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given FBG input channels.
            </summary>
            <param name="channels">The channels to map to XML.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>XML data as <c>string</c> which represents the given channels (no surrounding tag).</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GenerateFbgChannelXml(Hbm.Api.QuantumX.Channels.QuantumXFbgChannel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
                Generates the xml for the given FBG channel.
            </summary>
            <param name="channel">Channel to map to xml.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>Xml data as <c>string</c> which represents the given channel.</returns>
            <exception cref="T:System.InvalidOperationException">If one signal is null or not of type <c>QuantumXFbgSignal</c>.</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GetFbgChannelXPath(Hbm.Api.QuantumX.Channels.QuantumXFbgChannel,Hbm.Api.QuantumX.Connectors.IQuantumXConnector)">
            <summary>
            Gets the XPath for the given FBG channel
            </summary>
            <param name="channel">Channel of type <see cref="T:Hbm.Api.QuantumX.Channels.QuantumXFbgChannel" /></param>
            <param name="connector">The connector.</param>
            <returns>
            XPath for the channel
            </returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GenerateFbgChannelNameXml(Hbm.Api.QuantumX.Channels.QuantumXFbgChannel,System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given FBG channel name.
            </summary>
            <param name="channelName">Name of the channel.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>XML data as <c>string</c> which represents the given channel name.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GenerateFbgChannelActivationXml(Hbm.Api.QuantumX.Channels.QuantumXFbgChannel,System.Boolean,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
                Generates the XML for the given FBG channel activation.
            </summary>
            <param name="channel">The channel.</param>
            <param name="activate">If set to <c>true</c> the given channels will be activated.</param>
            <param name="problems"><c>List</c> of problems. New problems may be appended to this list.</param>
            <returns>XML data as <c>string</c> which represents the given channel activation flag.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlChannelDataManager.GenerateFbgChannelDetectionRangeXml(Hbm.Api.QuantumX.Channels.QuantumXFbgChannel,System.Double,System.Double,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given FBG channel activation.
            </summary>
            <param name="channel">The channel.</param>
            <param name="wavelengthLow">The wavelength lower detection range.</param>
            <param name="wavelengthHigh">The wavelength higher detection range.</param>
            <param name="problems"><c>List</c> of problems. New problems may be appended to this list.</param>
            <returns>
            XML data as <c>string</c> which represents the given channel activation flag.
            </returns>
            <exception cref="T:System.ArgumentNullException">channel</exception>
        </member>
        <member name="T:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager">
            <summary>
            Data manager for reading and creating connector specific xml data.
            </summary>
            <remarks>
            All methods of this class may only be called by <see cref="T:Hbm.Api.QuantumX.Core.CommunicationManager"/> 
            or from classes, which are derived from <see cref="T:Hbm.Api.QuantumX.Core.Xml.XmlDataManager"/>.
            </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.#ctor(Hbm.Api.QuantumX.QuantumXDevice)">
            <summary>
            Creates a new instance and stores the instance of the device.
            </summary>
            <param name="device"><see cref="T:Hbm.Api.QuantumX.QuantumXDevice"/> on which the <see cref="T:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager"/> instance works</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.ReadStandardConnectors(System.String)">
            <summary>
            Reads all connectors and their dependent data (like channels and signals)
            from the hardware device fills the data into a new list of connector instances. 
            </summary>
            <param name="xmlConnectorView">Xml connector view of the device as <c>string</c></param>
            <returns>New list of new <see cref="T:Hbm.Api.Common.Entities.Connectors.Connector"/> instances</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.ReadStandardConnector(System.String,System.Int32)">
            <summary>
            Reads a single standard connector at the given connectorPosition including the dependent data (like channels and signals)
            from the hardware device and fills the data into a new connector instance. 
            </summary>
            <param name="xmlConnectorView">Xml connector view of the device as <c>string</c></param>
            <param name="xmlAddressPosition">Position number of the connector (starting at position 1) in xml</param>
            <returns>A new <see cref="T:Hbm.Api.Common.Entities.Connectors.Connector"/> instance or <c>null</c>, if not found</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateStandardConnectorXml(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the xml for the given connector
            </summary>
            <param name="connector">Connector to map to xml</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <returns>Xml data as <c>string</c> which represents the given connector</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GetStandardConnectorXPath(Hbm.Api.QuantumX.Connectors.IQuantumXConnector)">
            <summary>
            Gets the XPath for the given connector 
            </summary>
            <param name="connector">Connector of type <see cref="T:Hbm.Api.QuantumX.Connectors.IQuantumXConnector"/></param>
            <returns>XPath for the connector</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GetStandardConnectorXPath(System.Int32)">
            <summary>
            Gets the XPath for the given standard connector position
            </summary>
            <param name="xmlAddressPosition">Position number of the connector (starting at Position 1) in xml</param>
            <returns>XPath for the connector</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateEnableStandardConnectorXml(System.Int32,Hbm.Api.QuantumX.Enums.QuantumXEnableConnectorType)">
            <summary>
            Generates the xml to enable the standard connector (analog in or CAN connector) at the given position.
            </summary>
            <param name="xmlAddressPosition">Position number of the connector (starting at Position 1) in xml.</param>
            <param name="connectorType">Type of the connector when enabled.</param>
            <returns>Xml data as <c>string</c> to enable the connector.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateAllStandardConnectorsOffXml">
            <summary>
            Generates the XML with all (standard) connectors set to OFF.
            </summary>
            <returns>XML data as <c>string</c> which represents the turned off connectors.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateExtendedSampleRateModeXml(System.Collections.Generic.List{Hbm.Api.QuantumX.Connectors.IQuantumXConnector},System.Int32)">
            <summary>
            Generates the XML with the (analog input) connectors given by address position to
            enable or disable the extended sample-rate mode by the given mode (SpeedMode).
            </summary>
            <param name="connectorsToBeGenerated">The connectors to be generated.</param>
            <param name="mode">The mode (presently only <c>0</c>=normal and <c>1</c>=extended).</param>
            <returns>XML data as <c>string</c> which represents the turned off connectors.</returns>
            <remarks>
            To enable or disable the extended sample-rate mode (<c>mode=1</c>) all connectors need to be
            turned off beforehand (use <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateAllStandardConnectorsOffXml"/>).<para/>
            Enabling is only possible with one or two (1..2) connectors, while disabling should provide
            the <paramref name="connectorsToBeGenerated"/> of all connectors.
            </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.ReadAdditionalConnectors(System.String,System.Int32)">
            <summary>
            Reads all additional connectors and their dependent data (like channels and signals)
            from the hardware device fills the data into a new list of connector instances. 
            </summary>
            <remarks>
            The DigitalIO connectors of the additional connector view are ignored. Use <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.ReadDigitalIoConnectors(System.String,System.Int32)"/> to read the DigitalIO connectors.
            </remarks>
            <param name="xmlAdditionalConnectorView">Xml additional connector view of the device as <c>string</c></param>
            <param name="lastUsedConnectorPosition">Position of the last read connector (used for computing the next free connector position)</param>
            <returns>New list of new <see cref="T:Hbm.Api.Common.Entities.Connectors.Connector"/> instances</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.ReadAdditionalConnector(System.String,System.Int32,System.Int32)">
            <summary>
            Reads a single additional connector at the given connectorPosition including the dependent data (like channels and signals)
            from the hardware device and fills the data into a new connector instance. 
            </summary>
            <param name="xmlAdditionalConnectorView">Xml additional connector view of the device as <c>string</c>.</param>
            <param name="xmlAddressPosition">Position number of the connector (starting at position 1) in xml.</param>
            <param name="connectorPosition">Unique position number of the connector.</param>
            <returns>A new <see cref="T:Hbm.Api.Common.Entities.Connectors.Connector"/> instance or <c>null</c>, if not found.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.ReadFbgBandInfo(System.String)">
            <summary>
            Reads the fiber info of the additionConnector section
            and returns the data as FbgBandInfo
            </summary>
            <param name="xmlAdditionalConnectorView">Xml addition connector view of the device as <c>string</c></param>
            <returns>FbgBandInfo</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateAdditionalConnectorXml(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the xml for the given connector.
            </summary>
            <param name="connector">Connector to map to xml.</param>
            <param name="problems">List of problems. New problems may be appended to this list.</param>
            <returns>xml data as <c>string</c> which represents the given connector.</returns>
            <remarks>For <see cref="T:Hbm.Api.QuantumX.Connectors.QuantumXDigitalConnector" /> use <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateDigitalIoConnectorXml(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})" />.</remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GetAdditionalConnectorXPath(Hbm.Api.QuantumX.Connectors.IQuantumXConnector)">
            <summary>
            Gets the XPath for the given connector.
            </summary>
            <param name="connector">Connector of type <see cref="T:Hbm.Api.QuantumX.Connectors.IQuantumXConnector" />.</param>
            <returns>XPath for the connector.</returns>
            <remarks>For <see cref="T:Hbm.Api.QuantumX.Connectors.QuantumXDigitalConnector" /> use <see><cref>GetDigitalIoConnectorXPath</cref></see>.</remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GetAdditionalConnectorXPath(System.Int32)">
            <summary>
            Gets the XPath for the given additional connector position.
            </summary>
            <param name="xmlAddressPosition">Position number of the connector (starting at Position 1) in xml.</param>
            <returns>XPath for the connector.</returns>
            <remarks>For <see cref="T:Hbm.Api.QuantumX.Connectors.QuantumXDigitalConnector"/> use <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GetDigitalIoConnectorXPath(System.Int32)"/>.</remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateEnableAdditionalConnectorXml(System.Int32)">
            <summary>
            Generates the xml to enable the additional connector (analog out or CAN connector) at the given position.
            </summary>
            <param name="xmlAddressPosition">Position number of the connector (starting at Position 1) in xml.</param>
            <returns>Xml data as <c>string</c> to enable the connector.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.ReadDigitalIoConnectors(System.String,System.Int32)">
            <summary>
            Reads all digital IO connectors and their dependent data (like channels and signals)
            from the hardware device fills the data into a new list of connector instances. 
            </summary>
            <remarks>
            The (additional) connectors of the additional connector view are ignored. Use <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.ReadAdditionalConnectors(System.String,System.Int32)"/> to read the additional connectors.
            </remarks>
            <param name="xmlAdditionalConnectorView">Xml additional connector view of the device as <c>string</c></param>
            <param name="lastUsedConnectorPosition">Position of the last read connector (used for computing the next free connector position)</param>
            <returns>New list of new <see cref="T:Hbm.Api.Common.Entities.Connectors.Connector"/> instances</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateDigitalIoConnectorXml(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the xml for the given connector.
            </summary>
            <param name="connector">Connector to map to xml.</param>
            <param name="problems">List of problems. New problems may be appended to this list.</param>
            <returns>Xml data as <c>string</c> which represents the given connector.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GetDigitalIoConnectorXPath(Hbm.Api.QuantumX.Connectors.IQuantumXConnector)">
            <summary>
            Gets the XPath for the given connector.
            </summary>
            <param name="connector">Connector of type <see cref="T:Hbm.Api.QuantumX.Connectors.IQuantumXConnector"/>.</param>
            <returns>XPath for the connector.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GetDigitalIoConnectorXPath(System.Int32)">
            <summary>
            Gets the XPath for the given digital connector position.
            </summary>
            <param name="xmlAddressPosition">Position number of the connector (starting at Position 1) in xml.</param>
            <returns>XPath for the connector.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateFbgConnectorThresholdXml(Hbm.Api.QuantumX.Connectors.QuantumXFbgConnector,System.Double,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the xml for the given FBG connector threshold property.
            </summary>
            <param name="connector">Connector whose threshold should be mapped to XML.</param>
            <param name="detectionThreshold">The detection threshold that should be mapped to XML.</param>
            <param name="problems">List of problems. New problems may be appended to this list.</param>
            <returns>XML data as <c>string</c> which represents the given connector threshold.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateFbgConnectorStartTagsXml(System.Text.StringBuilder,System.Int32)">
            <summary>
                Generates the FBG fiber connector start tags XML.
            </summary>
            <param name="xml">The XML.</param>
            <param name="connectorIndex">Index of the connector.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateFbgConnectorEndTagsXml(System.Text.StringBuilder)">
            <summary>
                Generates the FBG fiber connector end tags XML.
            </summary>
            <param name="xml">The XML.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateCanConnectorStartTagsXml(System.Text.StringBuilder,System.Int32)">
            <summary>
                Generates the CAN Bus connector start tags XML.
            </summary>
            <param name="xml">The XML.</param>
            <param name="connectorIndex">Index of the connector.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateCanConnectorEndTagsXml(System.Text.StringBuilder)">
            <summary>
                Generates the CAN Bus connector end tags XML.
            </summary>
            <param name="xml">The XML.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateCanConnectorParametersXml(Hbm.Api.QuantumX.Connectors.QuantumXCanConnector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given CAN Bus connector.
            </summary>
            <param name="connector">CAN Bus connector to map to XML.</param>
            <param name="problems">List of problems. New problems may be appended to this list.</param>
            <returns>XML data as <c>string</c> which represents the given CAN connector.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateConnectorModeSwitchParametersXml(Hbm.Api.QuantumX.Enums.ConnectorType,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given CAN Bus connector.
            </summary>
            <param name="connectorType">The connector mode to set.</param>
            <param name="problems">List of problems. New problems may be appended to this list.</param>
            <returns>
            XML data as <c>string</c> which represents the given CAN connector.
            </returns>
            <exception cref="T:System.InvalidOperationException">No channels for QuantumXCanConnector</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.FillCommonConnectorData(Hbm.Api.Common.Entities.Connectors.Connector,System.Int32,Hbm.Api.QuantumX.Enums.XmlViewType,System.Int32)">
            <summary>
            Fills the common QuantumX specific data into the given connector instance.
            </summary>
            <param name="connector">Connector instance to be filled with data</param>
            <param name="connectorPosition">Position of the connector, to be set in the given connector instance</param>
            <param name="xmlViewType">Xml view type of the connector, to be set in the given connector instance</param>
            <param name="xmlAddressPosition">Xml address position of the connector, to be set in the given connector instance</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.ReadStandardConnector(System.Xml.Linq.XElement)">
            <summary>
            Reads the complete connector data from a connector xml root element and maps it into an new connector instance.
            The data of the concrete connector (defined by the channel type) is read and mapped, also the common connector data.
            </summary>
            <param name="connectorElement">Root xml element of the connector</param>
            <returns>New instance of type <see cref="T:Hbm.Api.Common.Entities.Connectors.Connector"/>, filled with data from xml</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateStandardConnectorXmlPrivate(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the xml for the given connector
            </summary>
            <remarks>
            This method is called from method <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateStandardConnectorXml(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})"/>.
            It stays private for for better maintenance, because this method and <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.ReadStandardConnector(System.Xml.Linq.XElement)"/> belong together.
            </remarks>
            <param name="connector">Connector to map to xml</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <returns>Xml data as <c>string</c> which represents the given connector</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GetLocationHints(Hbm.Api.QuantumX.Connectors.IQuantumXConnector)">
            <summary>
            Gets the location hint of the connector by formatting the position of the connector.
            </summary>
            <param name="connector">Connector, used to generate the location hint</param>
            <returns>Location hint</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.ReadAdditionalConnector(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Reads the complete connector data for an additional connector from the given connector xml root element and maps it into an new connector instance.
            The data of the concrete additional connector (defined by the channel type) is read and mapped, also the common connector data.
            </summary>
            <param name="connectorElement">Root xml element of the additional connector</param>
            <param name="connectorPosition">Position number of the connector</param>
            <returns>New instance of type <see cref="T:Hbm.Api.Common.Entities.Connectors.Connector"/>, filled with data from xml</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateAdditionalConnectorXmlPrivate(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the xml for the given connector.
            </summary>
            <remarks>
            This method is called from method <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateAdditionalConnectorXml(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})"/>.
            It stays private for for better maintenance, because this method and <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.ReadAdditionalConnector(System.Xml.Linq.XElement,System.Int32)"/> belong together.
            </remarks>
            <param name="connector">Connector to map to xml.</param>
            <param name="problems">List of problems. New problems may be appended to this list.</param>
            <returns>Xml data as <c>string</c> which represents the given connector.</returns>
            <remarks>For <see cref="T:Hbm.Api.QuantumX.Connectors.QuantumXDigitalConnector" /> use <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateDigitalIoConnectorXmlPrivate(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})" />.</remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.ReadOffConnector">
            <summary>
            Reads the complete off connector data and maps it into an new <see cref="T:Hbm.Api.QuantumX.Connectors.QuantumXOffConnector"/> instance.
            </summary>
            <returns>New instance of type <see cref="T:Hbm.Api.QuantumX.Connectors.QuantumXOffConnector"/>, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateOffConnectorXml(System.String@)">
            <summary>
            Generates the xml for the given off connector.
            </summary>
            <param name="rootTagName">Root tag name of the connector (output parameter).</param>
            <returns>Xml data as <c>string</c> which represents the given connector.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.ReadAnalogInConnector(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Reads the complete analog in connector data from a connector xml root element and maps it into an new <see cref="T:Hbm.Api.QuantumX.Connectors.QuantumXAnalogInConnector"/> instance.
            </summary>
            <param name="channelRootElement">Root xml element of the channel</param>
            <param name="connectorPosition">Position number of the connector</param>
            <returns>New instance of type <see cref="T:Hbm.Api.QuantumX.Connectors.QuantumXAnalogInConnector"/>, filled with data from xml</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateAnalogInConnectorXml(Hbm.Api.QuantumX.Connectors.QuantumXAnalogInConnector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.String@)">
            <summary>
            Generates the xml for the given analog in connector
            </summary>
            <param name="connector">Connector to map to xml</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <param name="rootTagName">Root tag name of the connector (output parameter)</param>
            <returns>Xml data as <c>string</c> which represents the given connector</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.ReadAnalogOutConnector(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Reads the complete analog out connector data from a connector xml root element and maps it into an new <see cref="T:Hbm.Api.QuantumX.Connectors.QuantumXAnalogOutConnector"/> instance.
            </summary>
            <param name="channelRootElement">Root xml element of the channel</param>
            <param name="connectorPosition">Position number of the connector</param>
            <returns>New instance of type <see cref="T:Hbm.Api.QuantumX.Connectors.QuantumXAnalogOutConnector"/>, filled with data from xml</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateAnalogOutConnectorXml(Hbm.Api.QuantumX.Connectors.QuantumXAnalogOutConnector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.String@)">
            <summary>
            Generates the xml for the given analog out connector.
            </summary>
            <param name="connector">Connector to map to xml.</param>
            <param name="problems">List of problems. New problems may be appended to this list.</param>
            <param name="rootTagName">Root tag name of the connector (output parameter).</param>
            <returns>Xml data as <c>string</c> which represents the given connector.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.ReadDigitalIoConnector(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Reads the complete connector data from a connector xml root element and maps it into an new connector instance.
            The data of the concrete connector is read and mapped, also the common connector data.
            </summary>
            <param name="connectorElement">Root xml element of the connector</param>
            <param name="connectorPosition">Position number of the connector</param>
            <returns>New instance of type <see cref="T:Hbm.Api.Common.Entities.Connectors.Connector"/>, filled with data from xml</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateDigitalIoConnectorXmlPrivate(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the xml for the given connector.
            </summary>
            <remarks>
            This method is called from method <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateDigitalIoConnectorXml(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})"/>.
            It stays private for for better maintenance, because this method and <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.ReadDigitalIoConnector(System.Xml.Linq.XElement,System.Int32)"/> belong together.
            </remarks>
            <param name="connector">Connector to map to xml.</param>
            <param name="problems">List of problems. New problems may be appended to this list.</param>
            <returns>Xml data as <c>string</c> which represents the given connector.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.ReadCanConnector(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Reads the complete CAN Bus connector data from a connector xml root element and maps it
            into an new <see cref="T:Hbm.Api.QuantumX.Connectors.QuantumXCanConnector"/> instance.
            </summary>
            <param name="connectorElement">Root xml element of the connector.</param>
            <param name="connectorPosition">Position number of the connector.</param>
            <returns>New instance of type <see cref="T:Hbm.Api.QuantumX.Connectors.QuantumXCanConnector"/>, filled with data from xml.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateCanConnectorXml(Hbm.Api.QuantumX.Connectors.QuantumXCanConnector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.String@)">
            <summary>
            Generates the xml for the given CAN Bus connector.
            </summary>
            <param name="connector">Connector to map to XML.</param>
            <param name="problems">List of problems. New problems may be appended to this list.</param>
            <param name="rootTagName">Root tag name of the connector (output parameter).</param>
            <returns>XML data as <c>string</c> which represents the given connector.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateCanConnectorParametersXmlPrivate(Hbm.Api.QuantumX.Connectors.QuantumXCanConnector)">
            <summary>
            Generates the XML for the given CAN Bus connector parameters (without channels).
            </summary>
            <param name="connector">Connector to map to XML.</param>
            <returns>XML data as <c>string</c> which represents the given connector.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateCcpXcpModeSettingXml(System.Text.StringBuilder,Hbm.Api.QuantumX.Core.Entities.CanConnectorEcu)">
            <summary>
            Generates the CCP XCP mode setting XML.
            </summary>
            <param name="sb">The sb.</param>
            <param name="ecuDefinition">The ecu definition.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateCanFdSettingsXml(System.Text.StringBuilder,Hbm.Api.Common.Entities.CanFd)">
            <summary>
            Generates the CAN-FD settings XML.
            </summary>
            <param name="sb">The sb.</param>
            <param name="canFdSettings">The CAN-FD settings.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.ReadFbgConnector(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Reads the complete FBG connector data from a connector xml root element and maps it
            into an new <see cref="T:Hbm.Api.QuantumX.Connectors.QuantumXFbgConnector"/> instance.
            </summary>
            <param name="connectorElement">Root xml element of the connector.</param>
            <param name="connectorPosition">Position number of the connector.</param>
            <returns>New instance of type <see cref="T:Hbm.Api.QuantumX.Connectors.QuantumXFbgConnector"/>, filled with data from xml.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlConnectorDataManager.GenerateFbgConnectorXml(Hbm.Api.QuantumX.Connectors.QuantumXFbgConnector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.String@)">
            <summary>
            Generates the xml for the given FBG connector.
            </summary>
            <param name="connector">Connector to map to XML.</param>
            <param name="problems">List of problems. New problems may be appended to this list.</param>
            <param name="rootTagName">Root tag name of the connector (output parameter).</param>
            <returns>XML data as <c>string</c> which represents the given connector.</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Core.Xml.XmlDataManager">
            <summary>
            Abstract base class for all xml data manager keeping the device instance 
            on which the concrete xml data manager works. The device instance is required
            for generating problems for the problem list
            </summary>
            <remarks>
            All methods of the derived classes of <see cref="T:Hbm.Api.QuantumX.Core.Xml.XmlDataManager"/> may only be called 
            from <see cref="T:Hbm.Api.QuantumX.Core.CommunicationManager"/>!
            </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDataManager.#ctor(Hbm.Api.QuantumX.QuantumXDevice)">
            <summary>
            Creates a new instance and stores the instance of the device.
            </summary>
            <param name="device"><see cref="T:Hbm.Api.QuantumX.QuantumXDevice"/> on which this instance works</param>
        </member>
        <member name="T:Hbm.Api.QuantumX.Core.Xml.XmlDetectionRangeDataManager">
            <summary>
            Data manager for reading and creating detection range specific xml data.
            </summary>
            <remarks>
            All methods of this class may only be called by <see cref="T:Hbm.Api.QuantumX.Core.CommunicationManager"/> 
            or from classes, which are derived from <see cref="T:Hbm.Api.QuantumX.Core.Xml.XmlDataManager"/>.
            </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDetectionRangeDataManager.#ctor(Hbm.Api.QuantumX.QuantumXDevice)">
            <summary>
            Creates a new instance and stores the instance of the device.
            </summary>
            <param name="device"><see cref="T:Hbm.Api.QuantumX.QuantumXDevice"/> on which the <see cref="T:Hbm.Api.QuantumX.Core.Xml.XmlZeroBalanceDataManager"/> instance works</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDetectionRangeDataManager.ReadDetectionRange(System.Xml.Linq.XElement)">
            <summary>
            Reads the detection range data from an channel xml element and maps it 
            into a new <see cref="T:Hbm.Api.Common.Entities.DetectionRange"/> instance.
            </summary>
            <param name="channelRootElement">Root xml element of the channel</param>
            <returns>New instance of type <see cref="T:Hbm.Api.Common.Entities.DetectionRange"/>, filled with data from xml</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDetectionRangeDataManager.GenerateDetectionRangeXml(Hbm.Api.Common.Entities.DetectionRange)">
            <summary>
            Generates the xml for the given detection range.
            </summary>
            <param name="detectionRange">Detection range to map to xml</param>
            <returns>Xml data as <c>string</c> which represents the given detection range</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Core.Xml.XmlDeviceDataManager">
            <summary>
            Data manager for reading and creating device specific xml data.
            </summary>
            <remarks>
            All methods of this class may only be called by <see cref="T:Hbm.Api.QuantumX.Core.CommunicationManager"/> 
            or from classes, which are derived from <see cref="T:Hbm.Api.QuantumX.Core.Xml.XmlDataManager"/>.
            </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDeviceDataManager.#ctor(Hbm.Api.QuantumX.QuantumXDevice)">
            <summary>
            Creates a new instance and stores the instance of the device.
            </summary>
            <param name="device"><see cref="T:Hbm.Api.QuantumX.QuantumXDevice"/> on which the <see cref="T:Hbm.Api.QuantumX.Core.Xml.XmlDeviceDataManager"/> instance works</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDeviceDataManager.FillDeviceInfo(Hbm.Api.QuantumX.QuantumXDevice,System.String)">
            <summary>
            Reads additional information from the hardware device 
            and fills the data into the current device instance
            </summary>
            <remarks>
            The device instance is an explicit argument to illustrate the caller that
            the given device instance is modified.
            </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDeviceDataManager.FillDeviceCommunicationSettingsInfo(Hbm.Api.QuantumX.QuantumXDevice,System.String)">
            <summary>
            Reads the communication information from the hardware device
            and fills the data into the current device instance
            </summary>
            <remarks>
            The device instance is an explicit argument to illustrate the caller that
            the given device instance is modified.
            </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDeviceDataManager.FillDataRateDomains(Hbm.Api.QuantumX.QuantumXDevice,System.String)">
            <summary>
            Fills the data rate domains.
            </summary>
            <param name="device">The device.</param>
            <param name="xsdSystemView">The XSD system view.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDeviceDataManager.ReadTimeSource(System.Xml.Linq.XElement)">
            <summary>
            Reads the time source data from a system xml element and maps it 
            into a new <see cref="T:Hbm.Api.Common.Entities.TimeSources.TimeSource"/> instance.
            </summary>
            <param name="timeSourceRootElement">Root xml element of the time source</param>
            <returns>New instance of type <see cref="T:Hbm.Api.Common.Entities.TimeSources.TimeSource"/>, filled with data from xml</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDeviceDataManager.GetModuleNameXPath">
            <summary>
            Gets the XPath for the module name (device name)
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDeviceDataManager.GenerateModuleNameXml(System.String)">
            <summary>
            Generates the xml to set the module name (device name)
            </summary>
            <param name="name">Name to be set</param>
            <returns>Xml data as <c>string</c> to set the module name</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDeviceDataManager.GetModuleIpAdressXPath">
            <summary>
            Gets the XPath for the module network configuration (device name)
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDeviceDataManager.GetEthernetXml(System.String,System.String,System.Boolean)">
            <summary>
            Generetes XML elements to network configuration of the device
            </summary>
            <param name="ipAddress">ipAddress to apply</param>
            <param name="subMask">subnet</param>
            <param name="isDhcp">indicates if is automatic or not</param>
            <returns></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDeviceDataManager.GenerateModuleIpAddressXml(System.String,System.String,System.Boolean,System.String,System.UInt32,System.String)">
            <summary>
            Generates the xml to set the module name (device name)
            </summary>
            <param name="ipAddress">The IP address.</param>
            <param name="subnetMask">The subnet mask.</param>
            <param name="isDhcp"><c>true</c> if DHCP is enabled.</param>
            <param name="gateWay">The gateway.</param>
            <param name="tcpPort">The TCP port.</param>
            <param name="interfaceName">Name of the interface.</param>
            <returns>
            Xml data as <c>string</c> to set the module name
            </returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDeviceDataManager.GetModuleRoutingXPath">
            <summary>
            Gets the XPath for the routing settings
            </summary>
            <returns>
            Path as <c>string</c> to set the routing settings
            </returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDeviceDataManager.GetModuleRoutingEnabledXPath">
            <summary>
            Gets the XPath for the routing enabled
            </summary>
            <returns>
            Path as <c>string</c> to set the routing enabled
            </returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDeviceDataManager.GenerateRoutingEnabledXml(System.Boolean)">
            <summary>
            Generates the xml to enable or disable the routing functionality of the device.
            </summary>
            <param name="enabled">Enables or disables the routing functionality</param>
            <returns>Xml data as <c>string</c> to enable/disable the routing functionality</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDeviceDataManager.GetDataRateDomainXPath">
            <summary>
            Gets the XPath for the data rate domain
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDeviceDataManager.GenerateDataRateDomainRequestXml(Hbm.Api.Common.Enums.DataRateDomainType)">
            <summary>
            Generates the xml to set the data rate domain
            </summary>
            <param name="dataRateDomain">Type of the data rate domain to be set</param>
            <returns>Xml data as <c>string</c> to set the data rate domain</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDeviceDataManager.GetTimeSourceXPath">
            <summary>
            Gets the XPath for the time source
            </summary>
            <returns>XPath for the time source</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDeviceDataManager.GenerateTimeSourceXml(System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the xml for the current time source
            </summary>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <returns>Xml data as <c>string</c> which represents the current time source</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDeviceDataManager.GetDigitalIoInputThreshold(System.String)">
            <summary>
            Gets the digital I/O input threshold.
            </summary>
            <param name="xmlContent">Content of the XML.</param>
            <returns>The input threshold.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDeviceDataManager.GetDigitalIoInputThresholdXPath">
            <summary>
            Gets the XPath to the digital I/O input threshold element.
            </summary>
            <returns>The XPath string.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDeviceDataManager.GenerateDigitalIoInputThresholdXml(Hbm.Api.QuantumX.Enums.DigitalIoInputThreshold)">
            <summary>
            Generates the digital I/O input threshold XML.
            </summary>
            <param name="inputThreshold">The input threshold.</param>
            <returns>The generated XML.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDeviceDataManager.ReadPtpTimeSource(System.Xml.Linq.XElement)">
            <summary>
            Reads the PTP settings from XML and maps them into a new timeSource instance 
            of type <see cref="T:Hbm.Api.Common.Entities.TimeSources.PtpTimeSource"/>.
            </summary>
            <param name="timeSourceElement">Concrete timeSource xml element</param>
            <returns>New concrete timesource instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDeviceDataManager.GeneratePtpTimeSourceXml(Hbm.Api.Common.Entities.TimeSources.PtpTimeSource)">
            <summary>
            Generates the xml for the given PTP time source 
            </summary>
            <param name="ptpTimeSource"> PTP time source</param>
            <returns>Xml data as <c>string</c> which represents the given time source</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDeviceDataManager.GenerateNtpTimeSourceXml(Hbm.Api.Common.Entities.TimeSources.NtpTimeSource)">
            <summary>
            Generates the xml for the given NTP time source 
            </summary>
            <param name="ntpTimeSource">NTP time source</param>
            <returns>Xml data as <c>string</c> which represents the given time source</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDeviceDataManager.GenerateAutoTimeSourceXml(Hbm.Api.Common.Entities.TimeSources.AutoTimeSource)">
            <summary>
            Generates the xml for the given Auto time source 
            </summary>
            <param name="autoTimeSource">NTP time source</param>
            <returns>Xml data as <c>string</c> which represents the given time source</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlDeviceDataManager.GenerateEtherCatTimeSourceXml(Hbm.Api.Common.Entities.TimeSources.EtherCatTimeSource)">
            <summary>
            Generates the xml for the given EtherCAT time source
            </summary>
            <param name="etherCatTimeSource">EtherCAT time source</param>
            <returns>Xml data as <c>string</c> which represents the given time source</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Core.Xml.XmlFilterDataManager">
            <summary>
            Data manager for reading and creating filter specific xml data.
            </summary>
            <remarks>
            All methods of this class may only be called by <see cref="T:Hbm.Api.QuantumX.Core.CommunicationManager"/> 
            or from classes, which are derived from <see cref="T:Hbm.Api.QuantumX.Core.Xml.XmlDataManager"/>.
            </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlFilterDataManager.#ctor(Hbm.Api.QuantumX.QuantumXDevice)">
            <summary>
            Creates a new instance and stores the instance of the device.
            </summary>
            <param name="device"><see cref="T:Hbm.Api.QuantumX.QuantumXDevice"/> on which the <see cref="T:Hbm.Api.QuantumX.Core.Xml.XmlFilterDataManager"/> instance works</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlFilterDataManager.ReadFilter(System.Xml.Linq.XElement)">
            <summary>
            Reads the filter data from a signal xml element and maps it 
            into a new <see cref="T:Hbm.Api.Common.Entities.Filters.Filter"/> instance.
            </summary>
            <param name="signalRootElement">Root xml element of the signal</param>
            <returns>New instance of type <see cref="T:Hbm.Api.Common.Entities.Filters.Filter"/>, filled with data from xml</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlFilterDataManager.GenerateFilterXml(Hbm.Api.Common.Entities.Filters.Filter,Hbm.Api.Common.Entities.Signals.Signal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the xml for the given filter
            </summary>
            <param name="filter">Filter to map to xml</param>
            <param name="signal">Signal with the filter, needed for generating problems for the problem list</param>
            <param name="problems">List of problems. This method may append new problems to this list</param>
            <returns>Xml data as <c>string</c> which represents the given filter</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlFilterDataManager.ReadLowpassFilter(System.Xml.Linq.XElement)">
            <summary>
            Reads the filter data for lowpass filter
            from an filter xml element and maps it into a new filter instance 
            of type <see cref="T:Hbm.Api.Common.Entities.Filters.BesselFilter"/>,
            <see cref="T:Hbm.Api.Common.Entities.Filters.ButterworthFilter"/> or 
            <see cref="T:Hbm.Api.Common.Entities.Filters.NoFilter"/> (if the filter characteristic is unknown).
            </summary>
            <param name="filterElement">Concrete filter xml element</param>
            <returns>New concrete filter instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlFilterDataManager.GenerateLowpassFilterXml(Hbm.Api.Common.Entities.Filters.Filter,Hbm.Api.Common.Entities.Signals.Signal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.String@)">
            <summary>
            Generates the xml for the given lowpass filter
            </summary>
            <param name="filter">Filter to map to xml</param>
            <param name="signal">Signal with the filter, needed for generating problems for the problem list</param>
            <param name="problems">List of problems. This method may append new problems to this list</param>
            <param name="filterTypeTagName">Tag name of the filter (output parameter)</param>
            <returns>Xml data as <c>string</c> which represents the given filter</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlFilterDataManager.ReadHighpassFilter(System.Xml.Linq.XElement)">
            <summary>
            Reads the filter data for highpass filter
            from an filter xml element and maps it into a new filter instance 
            of type <see cref="T:Hbm.Api.Common.Entities.Filters.HighpassFilter"/>.
            </summary>
            <param name="filterElement">Concrete filter xml element</param>
            <returns>New concrete filter instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlFilterDataManager.GenerateHighpassFilterXml(Hbm.Api.Common.Entities.Filters.HighpassFilter,System.String@)">
            <summary>
            Generates the xml for the given highpass filter
            </summary>
            <param name="filter">Filter to map to xml</param>
            <param name="filterTypeTagName">Tag name of the filter (output parameter)</param>
            <returns>Xml data as <c>string</c> which represents the given filter</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlFilterDataManager.ReadNoFilter(System.Xml.Linq.XElement)">
            <summary>
            Reads the filter data for an "Off" filter
            from an filter xml element and maps it into a new filter instance 
            of type <see cref="T:Hbm.Api.Common.Entities.Filters.NoFilter"/>.
            </summary>
            <param name="filterElement">Concrete filter xml element</param>
            <returns>New concrete filter instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlFilterDataManager.GenerateOffFilterXml(Hbm.Api.Common.Entities.Filters.NoFilter,System.String@)">
            <summary>
            Generates the xml for the given "Off" filter
            </summary>
            <param name="filter">Filter to map to xml</param>
            <param name="filterTypeTagName">Tag name of the filter (output parameter)</param>
            <returns>Xml data as <c>string</c> which represents the given filter</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager">
            <summary>
            Data manager for reading and creating scaling specific xml data.
            </summary>
            <remarks>
            QuantumX only does not support <see cref="T:Hbm.Api.SensorDB.Entities.Scalings.TwoPointScaling"/>. TwoPointScalings are converted to table scalings during the sensor assignment.
            QuantumX specific "Gain" scalings are converted into a table scaling when reading the sensor data from the hardware, because there are not supported by the common scalings. 
            
            All methods of this class may only be called by <see cref="T:Hbm.Api.QuantumX.Core.CommunicationManager"/> 
            or from classes, which are derived from <see cref="T:Hbm.Api.QuantumX.Core.Xml.XmlDataManager"/>.
            </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.#ctor(Hbm.Api.QuantumX.QuantumXDevice)">
            <summary>
            Creates a new instance and stores the instance of the device.
            </summary>
            <param name="device"><see cref="T:Hbm.Api.QuantumX.QuantumXDevice"/> on which the <see cref="T:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager"/> instance works</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.ReadScaling(System.Xml.Linq.XElement,Hbm.Api.SensorDB.Entities.Sensor,Hbm.Api.Common.Entities.DetectionRange)">
            <summary>
                Reads the complete scaling data from an sensor xml element and maps it into a new scaling instance.
                The data of the concrete scaling (defined by the scaling type) is read and mapped, also the common scaling data.
            </summary>
            <param name="sensorRootElement">Root xml element of the sensor, to which the scaling belongs</param>
            <param name="sensor">The sensor.</param>
            <param name="detectionRange">An FBG channel's detection range, when applicable.</param>
            <returns>
                New instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Scaling" />, filled with data from xml
            </returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.GenerateScalingXml(Hbm.Api.SensorDB.Entities.Sensor,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the xml for the given sensor scaling
            </summary>
            <remarks>The sensor instance is required as argument (instead of the scaling instance) for generating scaling problems for the problem list</remarks>
            <param name="sensor">Sensor, containing the <see cref="T:Hbm.Api.SensorDB.Entities.Scaling"/> instance to be mapped to xml</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <returns>Xml data as <c>string</c> which represents the given scaling</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.GenerateCommonScalingDataXml(Hbm.Api.SensorDB.Entities.Scaling)">
            <summary>
            Generates the xml for the given common scaling
            </summary>
            <remarks>
            This method is called from within the sensor generation, because these fields are
            part of the sensor xml in QuantumX.
            </remarks>
            <param name="scaling">Scaling to map to xml</param>
            <returns>Xml data as <c>string</c> which represents the given caling</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.GenerateCommonThermoRelatedScalingDataXml">
            <summary>
            Generates the xml for the all thermo related sensor types (currently ThermoCoupleSensor and PtSensor).
            For these sensor types the unit has to be "°C" always! The engineering unit will be set later on (via OutputUnit xml).
            </summary>
            <remarks>
            This method is called from within the sensor generation, because these fields are
            part of the sensor xml in QuantumX.
            </remarks>
            <returns>Xml data as <c>string</c> which represents the given caling</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.GenerateMaxElectricalXml(Hbm.Api.SensorDB.Entities.Sensor,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the xml for the max electrical value
            </summary>
            <remarks>
            This method is called from within the sensor generation, because the SENSOR_MAXELECTRICAL element is part of the sensor xml in QuantumX.
            </remarks>
            <remarks>The sensor instance is required as argument (instead of the scaling instance) for generating scaling problems for the problem list</remarks>
            <param name="sensor">Sensor, containing the <see cref="T:Hbm.Api.SensorDB.Entities.Scaling"/> instance which contains the MaxElectrical value</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <returns>Xml data as <c>string</c> which represents for <see cref="F:Hbm.Api.QuantumX.Constants.XmlTag.SENSOR_MAXELECTRICAL"/> </returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.ReadOutputScaling(System.Xml.Linq.XElement)">
            <summary>
            Reads the scaling data from analog output signal xml element and maps it into a new output scaling instance.
            </summary>
            <param name="analogOutputSignalElement">Root xml element of analog output signal, to which the scaling belongs</param>
            <returns>New instance of type <see cref="T:Hbm.Api.Common.Entities.Scalings.OutputScaling"/>, filled with data from xml</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.GenerateOutputScalingXml(Hbm.Api.Common.Entities.Signals.AnalogOutSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the xml for the given output scaling.
            </summary>
            <param name="signal">Signal, containing the scaling.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>Xml data as <c>string</c> which represents the given signal.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.FillCommonScalingData(System.Xml.Linq.XElement,Hbm.Api.SensorDB.Entities.Sensor,Hbm.Api.SensorDB.Entities.Scaling,Hbm.Api.Common.Entities.DetectionRange)">
            <summary>
                Reads the common scaling data from the given xml element and fills it into
                an existing (concrete) scaling instance
            </summary>
            <param name="sensorRootElement">Root xml element of the sensor, to which the scaling belongs</param>
            <param name="sensor">The sensor.</param>
            <param name="scaling">Existing (concrete) scaling instance</param>
            <param name="detectionRange">An FBG channel's detection range, when applicable.</param>
            <returns>
                Existing scaling instance (given by parameter <paramref name="scaling" />), filled with data from xml
            </returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.ReadEngineeringUnit(System.Xml.Linq.XElement,Hbm.Api.SensorDB.Entities.Scaling)">
            <summary>
            Reads the engineering unit from the module.
            If the CHANNEL_OUTPUTUNIT tag is available (e.g. for AnalogInChannels), then the CHANNEL_OUTPUTUNIT_UNITID  (unit code)
            is read and converted. If the conversion fails, then the CHANNEL_OUTPUTUNIT_USERTEXT (unit text) is read.
            
            Else if the CHANNEL_OUTPUTUNIT tag is not available (e.g. for CANBUS) then the SENSOR_PHYSUNIT (unit code)
            is read and converted. If the conversion fails, then the SENSOR_PHYSUNITUSR (unit text) is read.
            </summary>
            <param name="sensorRootElement">Root xml element of the sensor, to which the scaling belongs</param>
            <param name="scaling">Existing (concrete) scaling instance</param>
            <returns>Engineering unit as <c>string</c> representation</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.GenerateCommonScalingDataXmlPrivate(Hbm.Api.SensorDB.Entities.Scaling)">
            <summary>
            Generates the xml for the given common scaling
            </summary>
            <remarks>
            This method is called from method <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.GenerateCommonScalingDataXml(Hbm.Api.SensorDB.Entities.Scaling)"/>.
            It stays private for for better maintenance, because this method and <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.FillCommonScalingData(System.Xml.Linq.XElement,Hbm.Api.SensorDB.Entities.Sensor,Hbm.Api.SensorDB.Entities.Scaling,Hbm.Api.Common.Entities.DetectionRange)"/> belong together.
            </remarks>
            <param name="scaling">Scaling to map to xml</param>
            <returns>Xml data as <c>string</c> which represents the given caling</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.ReadMaxElectrical(System.Xml.Linq.XElement)">
            <summary>
            Reads the max. electrical value of the sensor (tag <see cref="F:Hbm.Api.QuantumX.Constants.XmlTag.SENSOR_MAXELECTRICAL"/>), if available.
            </summary>
            <param name="sensorRootElement">Root xml element of the sensor, to which the scaling belongs</param>
            <returns>Returns the max. electrical value of the sensor, or <c>null</c>, if the sensor has no <see cref="F:Hbm.Api.QuantumX.Constants.XmlTag.SENSOR_MAXELECTRICAL"/> tag</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.ComputeMaxEngineeringRange(System.Xml.Linq.XElement,Hbm.Api.SensorDB.Entities.Sensor,Hbm.Api.SensorDB.Entities.Scaling,Hbm.Api.Common.Entities.DetectionRange)">
            <summary>
                Reads the element <see cref="F:Hbm.Api.QuantumX.Constants.XmlTag.SENSOR_MAXELECTRICAL" /> of the sensor (if
                available) and uses the
                calculation method of the given scaling to convert it into the MaxEngineeringRange.
            </summary>
            <param name="sensorRootElement">Root xml element of the sensor, to which the scaling belongs</param>
            <param name="sensor">The sensor.</param>
            <param name="scaling">Existing (concrete) scaling instance</param>
            <param name="detectionRange">An FBG channel's detection range, when applicable.</param>
            <returns>
                Returns the computed MaxEngineeringRange
                or <c>0</c>, if the scaling does not implement the
                <see cref="M:Hbm.Api.SensorDB.Entities.Scalings.IScalingCalculation.CalculateEngineeringValue(System.Decimal)" /> method
                or if the sensor has no <see cref="F:Hbm.Api.QuantumX.Constants.XmlTag.SENSOR_MAXELECTRICAL" /> tag
            </returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.ComputeMinEngineeringRange(System.Xml.Linq.XElement,Hbm.Api.SensorDB.Entities.Sensor,Hbm.Api.SensorDB.Entities.Scaling,Hbm.Api.Common.Entities.DetectionRange)">
            <summary>
                Reads the element <see cref="F:Hbm.Api.QuantumX.Constants.XmlTag.SENSOR_MAXELECTRICAL" /> of the sensor (if available) and uses the
                calculation method of the given scaling to convert it into the MinEngineeringRange by multiplying the maxElectrical
                of the sensor with -1 (which is valid for symmetrical electrical measuring ranges only!)
            </summary>
            <param name="sensorRootElement">Root xml element of the sensor, to which the scaling belongs</param>
            <param name="sensor">The sensor.</param>
            <param name="scaling">Existing (concrete) scaling instance</param>
            <param name="detectionRange">An FBG channel's detection range, when applicable.</param>
            <returns>
                Returns the computed MinEngineeringRange
                or <c>0</c>, if the scaling does not implement the
                <see cref="M:Hbm.Api.SensorDB.Entities.Scalings.IScalingCalculation.CalculateEngineeringValue(System.Decimal)" /> method
                or if the sensor has no <see cref="F:Hbm.Api.QuantumX.Constants.XmlTag.SENSOR_MAXELECTRICAL" /> tag
            </returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.GenerateMaxElectricalXmlPrivate(Hbm.Api.SensorDB.Entities.Sensor,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the xml for the max. electrical value
            </summary>
            <remarks>The sensor instance is required as argument (instead of the scaling instance) for generating scaling problems for the problem list</remarks>
            <param name="sensor">Sensor, containing the <see cref="T:Hbm.Api.SensorDB.Entities.Scaling"/> instance which contains the MaxElectrical value</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <returns>Xml data as <c>string</c> which represents for <see cref="F:Hbm.Api.QuantumX.Constants.XmlTag.SENSOR_MAXELECTRICAL"/> </returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.GenerateConcreteScalingXml(Hbm.Api.SensorDB.Entities.Sensor,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the xml for the given (concrete) scaling
            </summary>
            <remarks>The sensor instance is required as argument (instead of the scaling instance) for generating scaling problems for the problem list</remarks>
            <param name="sensor">Sensor, containing the <see cref="T:Hbm.Api.SensorDB.Entities.Scaling"/> for which the xml tag name should be retrieved</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <returns>Xml data as <c>string</c> which represents the given (concrete) scaling</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.GenerateConcreteOutputScalingXml(Hbm.Api.Common.Entities.Signals.AnalogOutSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the xml for the given (concrete) output scaling.
            </summary>
            <param name="signal">Signal, containing the <see cref="T:Hbm.Api.Common.Entities.Scalings.OutputScaling"/> for which the xml should be retrieved.</param>
            <param name="problems">List of problems. New problems may be appended to this list.</param>
            <returns>Xml data as <c>string</c> which represents the given (concrete) scaling.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.ReadOffScaling(System.Xml.Linq.XElement)">
            <summary>
            Reads the scaling data for an off scaling (scaling disabled)
            from an sensor xml element and maps it into a new scaling instance 
            of type <see cref="T:Hbm.Api.SensorDB.Entities.Scalings.OffScaling"/>.
            </summary>
            <param name="scalingElement">Scaling xml element</param>
            <returns>New concrete scaling instance, filled with data </returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.GenerateOffScalingXml(Hbm.Api.SensorDB.Entities.Scalings.OffScaling,System.String@)">
            <summary>
            Generates the xml for the given off scaling (scaling disabled)
            </summary>
            <param name="scaling">Scaling to map to xml</param>
            <param name="scalingTypeTagName">Tag name of the internal scaling (output parameter)</param>
            <returns>Xml data as <c>string</c> which represents the given scaling</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.ReadInternalScaling(System.Xml.Linq.XElement)">
            <summary>
            Reads the scaling data for an internal scaling 
            from an sensor xml element and maps it into a new scaling instance 
            of type <see cref="T:Hbm.Api.SensorDB.Entities.Scalings.InternalScaling"/>.
            </summary>
            <param name="scalingElement">Scaling xml element</param>
            <returns>New concrete scaling instance, filled with data </returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.GenerateInternalScalingXml(Hbm.Api.SensorDB.Entities.Scalings.InternalScaling,System.String@)">
            <summary>
            Generates the xml for the given internal scaling
            </summary>
            <param name="scaling">Scaling to map to xml</param>
            <param name="scalingTypeTagName">Tag name of the internal scaling (output parameter)</param>
            <returns>Xml data as <c>string</c> which represents the given scaling</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.ReadZeroSpanScaling(System.Xml.Linq.XElement)">
            <summary>
            Reads the scaling data for a zero span scaling 
            from an sensor xml element and maps it into an new scaling instance 
            of type <see cref="T:Hbm.Api.SensorDB.Entities.Scalings.ZeroSpanScaling"/>.
            </summary>
            <param name="scalingElement">Scaling xml element</param>
            <returns>New concrete scaling instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.GenerateZeroSpanScalingXml(Hbm.Api.SensorDB.Entities.Scalings.ZeroSpanScaling,System.String@)">
            <summary>
            Generates the xml for the given zero span scaling
            </summary>
            <param name="scaling">Scaling to map to xml</param>
            <param name="scalingTypeTagName">Tag name of the zero scan scaling (output parameter)</param>
            <returns>Xml data as <c>string</c> which represents the given scaling</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.ReadPolynomialScaling(System.Xml.Linq.XElement)">
            <summary>
            Reads the scaling data for a polynomial scaling (including segments and terms) 
            from an sensor xml element and maps it into a new scaling instance 
            of type <see cref="T:Hbm.Api.SensorDB.Entities.Scalings.PolynomialScaling"/>.
            </summary>
            <param name="scalingElement">Scaling xml element</param>
            <returns>New concrete scaling instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.GeneratePolynomialScalingXml(Hbm.Api.SensorDB.Entities.Scalings.PolynomialScaling,System.String@)">
            <summary>
            Generates the xml for the given polynomial scaling
            </summary>
            <remarks>
            PolynomialScaling does not all exponents (starting with exponent 0), but this is required for QuantumX.
            E.g. the term 5*x^2 must be expanded to 0*x^0, 0*x^1, 5*x^2 for QuantumX polynoms 
            </remarks>
            <param name="scaling">Scaling to map to xml</param>
            <param name="scalingTypeTagName">Tag name of the polynomial scaling (output parameter)</param>
            <returns>Xml data as <c>string</c> which represents the given scaling</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.ReadTableScaling(System.Xml.Linq.XElement)">
            <summary>
            Reads the scaling data for a table scaling
            from an sensor xml element and maps it into a new scaling instance 
            of type <see cref="T:Hbm.Api.SensorDB.Entities.Scalings.TableScaling"/>.
            </summary>
            <param name="scalingElement">Scaling xml element</param>
            <returns>New concrete scaling instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.GenerateTableScalingXml(Hbm.Api.SensorDB.Entities.Scalings.TableScaling,System.String@)">
            <summary>
            Generates the xml for the given table scaling
            </summary>
            <param name="scaling">Scaling to map to xml</param>
            <param name="scalingTypeTagName">Tag name of the table scaling (output parameter)</param>
            <returns>Xml data as <c>string</c> which represents the given scaling</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.GenerateOutputTableScalingXml(Hbm.Api.Common.Entities.Scalings.OutputTableScaling,System.String@)">
            <summary>
            Generates the xml for the given output table-scaling.
            </summary>
            <param name="scaling">Scaling to map to xml.</param>
            <param name="scalingTypeTagName">Tag name of the table scaling (output parameter).</param>
            <returns>Xml data as <c>string</c> which represents the given scaling.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.ReadGageFactorScaling(System.Xml.Linq.XElement)">
            <summary>
            Reads the scaling data for a gage factor scaling
            from an sensor xml element and maps it into a new scaling instance 
            of type <see cref="T:Hbm.Api.SensorDB.Entities.Scalings.GageFactorScaling"/>.
            </summary>
            <param name="scalingElement">Scaling xml element</param>
            <returns>New concrete scaling instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.GenerateGageFactorScalingXml(Hbm.Api.SensorDB.Entities.Scalings.GageFactorScaling,System.String@)">
            <summary>
            Generates the xml for the given gage factor scaling
            </summary>
            <param name="scaling">Scaling to map to xml</param>
            <param name="scalingTypeTagName">Tag name of the gage factor scaling (output parameter)</param>
            <returns>Xml data as <c>string</c> which represents the given scaling</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.ReadAndConvertGainScaling(System.Xml.Linq.XElement)">
            <summary>
            Reads the scaling data for a gain scaling
            from an sensor xml element and converts it into a new scaling instance 
            of type <see cref="T:Hbm.Api.SensorDB.Entities.Scalings.TableScaling"/>.
            </summary>
            <remarks>
            There is no Gain scaling in the sensor API, so it is converted into a table scaling.
            </remarks>
            <param name="scalingElement">Scaling xml element</param>
            <returns>New concrete scaling instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.ConvertToTableScaling(Hbm.Api.SensorDB.Entities.Scalings.TwoPointScaling)">
            <summary>
            Converts a given <see cref="T:Hbm.Api.SensorDB.Entities.Scalings.TwoPointScaling"/> instance into   
            a new instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Scalings.TableScaling"/>, because
            QuantumX does not support two-point scalings.
            </summary>
            <param name="twoPointScaling"><see cref="T:Hbm.Api.SensorDB.Entities.Scalings.TwoPointScaling"/> instance to be converted</param>
            <returns>New instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Scalings.TableScaling"/>, filled with the data of the given <see cref="T:Hbm.Api.SensorDB.Entities.Scalings.TwoPointScaling"/></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.ReadCanBusScaling(System.Xml.Linq.XElement)">
            <summary>
            Reads the scaling data for a CAN scaling
            from an sensor xml element and maps it into a new scaling instance 
            of type <see cref="T:Hbm.Api.SensorDB.Entities.Scalings.CanBusScaling"/>.
            </summary>
            <param name="scalingElement">Scaling xml element.</param>
            <returns>New concrete scaling instance, filled with data.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlScalingDataManager.GenerateCanBusScalingXml(Hbm.Api.SensorDB.Entities.Scalings.CanBusScaling,System.String@)">
            <summary>
            Generates the XML for the given CAN Bus scaling.
            </summary>
            <param name="scaling">Scaling to map to XML.</param>
            <param name="scalingTypeTagName">Tag name of the CAN Bus scaling (output parameter).</param>
            <returns>XML data as <c>string</c> which represents the given scaling.</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager">
            <summary>
            Data manager for reading and creating sensor specific xml data.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.#ctor(Hbm.Api.QuantumX.QuantumXDevice)">
            <summary>
            Creates a new instance and stores the instance of the device.
            </summary>
            <param name="device"><see cref="T:Hbm.Api.QuantumX.QuantumXDevice"/> on which the <see cref="T:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager"/> instance works</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadSensor(System.Xml.Linq.XElement)">
            <summary>
                Reads the complete sensor data from a sensor xml root element and maps it into an new sensor instance.
                The data of the concrete sensor (defined by the sensor type) is read and mapped, also the common sensor data.
            </summary>
            <param name="sensorRootElement">Root xml element of the sensor</param>
            <returns>
                New instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensor" />, filled with data from xml
            </returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadSensor(System.Xml.Linq.XElement,Hbm.Api.Common.Entities.DetectionRange)">
            <summary>
                Reads the complete sensor data from a sensor xml root element and maps it into an new sensor instance.
                The data of the concrete sensor (defined by the sensor type) is read and mapped, also the common sensor data.
            </summary>
            <param name="sensorRootElement">Root xml element of the sensor</param>
            <param name="detectionRange">An FBG channel's detection range, when applicable.</param>
            <returns>
                New instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensor" />, filled with data from xml
            </returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadSensor(System.Xml.Linq.XElement,Hbm.Api.Common.Enums.AutoCalibrationMode@,Hbm.Api.Common.Enums.TedsUsageMode@)">
            <summary>
                Reads the sensor.
            </summary>
            <param name="sensorRootElement">The sensor root element.</param>
            <param name="autoCalibrationMode">The automatic calibration mode.</param>
            <param name="tedsUsageMode">The teds usage mode.</param>
            <returns></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadSensor(System.Xml.Linq.XElement,Hbm.Api.Common.Entities.DetectionRange,Hbm.Api.Common.Enums.AutoCalibrationMode@,Hbm.Api.Common.Enums.TedsUsageMode@)">
            <summary>
                Reads the complete sensor data from a sensor xml root element and maps it into an new sensor instance.
                The data of the concrete sensor (defined by the sensor type) is read and mapped, also the common sensor data.
            </summary>
            <param name="sensorRootElement">Root xml element of the sensor</param>
            <param name="detectionRange">An FBG channel's detection range, when applicable.</param>
            <param name="autoCalibrationMode">Output parameter with the auto-calibration mode.</param>
            <param name="tedsUsageMode">The TEDS usage mode.</param>
            <returns>
                New instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensor" />, filled with data from xml
            </returns>
            <exception cref="T:System.ArgumentNullException">sensorRootElement</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GenerateSensorXml(Hbm.Api.SensorDB.Entities.Sensor,Hbm.Api.Common.Enums.AutoCalibrationMode,Hbm.Api.Common.Enums.TedsUsageMode,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the xml for the given sensor
            </summary>
            <param name="sensor">Sensor to map to xml</param>
            <param name="autoCalibrationMode">The auto-calibration mode.</param>
            <param name="tedsUsageMode">The TEDS usage mode.</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <returns>Xml data as <c>string</c> which represents the given sensor</returns>
            <exception cref="T:System.ArgumentNullException">
            sensor
            or
            scaling
            </exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.AdaptMinEngineeringRangeForAsymetricalSensors(Hbm.Api.SensorDB.Entities.Sensor,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Adapts the minimum engineering range for certain sensor types that are not symmetrical (Frequency, Resistance and PWM).
            QuantumX treats them in a symetrical way because it supports no MinEngineeringRange and also no MinElectricalRange! Therefore we have to adapt them...
            </summary>
            <param name="sensor">The sensor to check and adapt .</param>
            <param name="problems">The problems to extend or null if no problems should be generated.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.AdaptEngineeringRangesForAsymmetricalSensors(Hbm.Api.SensorDB.Entities.Sensor,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Adapts the minimum engineering range for certain sensor types that are not symmetrical ( Resistance and PWM).
            QuantumX treats them in a symetrical way because it supports no MinEngineeringRange and also no MinElectricalRange! Therefore we have to adapt them...
            </summary>
            <param name="sensor">The sensor to check and adapt .</param>
            <param name="problems">The problems to extend or null if no problems should be generated.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GetSensorXPath(Hbm.Api.QuantumX.Connectors.IQuantumXConnector)">
            <summary>
            Gets the XPath for the sensor with the given connector 
            </summary>
            <param name="connector">Connector of type <see cref="T:Hbm.Api.QuantumX.Connectors.IQuantumXConnector"/></param>
            <returns>XPath for the sensor</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GetCanBusSensorXPath(Hbm.Api.QuantumX.Channels.QuantumXCanInChannel)">
            <summary>
            Gets the XPath for the given CAN input channel.
            </summary>
            <param name="channel">Channel of type <see cref="T:Hbm.Api.QuantumX.Channels.QuantumXCanInChannel"/>.</param>
            <returns>XPath for the channel.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GenerateDriftCompensationXml(Hbm.Api.Common.Enums.AutoCalibrationMode,System.UInt32)">
            <summary>
            Generates the XML string for setting the drift compensation for a sensor.
            </summary>
            <param name="autoCalibrationMode">The auto-calibration mode.</param>
            <param name="repetitionTime">The repetition time in seconds (used only for <c>AutoAdjust</c> abd <c>AutoCalibrate</c>, give 0 for default value).</param>
            <returns>Xml data as <c>string</c> which represents the request for setting the drift compensation to default.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GetDriftCompensationXPath(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Gets the XPath for the drift compensation with the given connector and sensor.
            </summary>
            <param name="connector">Connector of type <see cref="T:Hbm.Api.QuantumX.Connectors.IQuantumXConnector"/></param>.
            <param name="sensor">Sensor for the XPath.</param>
            <returns>XPath for the drift compensation XML.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadDriftCompensation(System.Xml.Linq.XElement)">
            <summary>
            Reads the drift compensation.
            </summary>
            <param name="sensorElement">The sensor element.</param>
            <returns>The auto-calibration setting corresponding to the drift compensation.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GetTedsUsageModeXPath(Hbm.Api.QuantumX.Connectors.IQuantumXConnector)">
            <summary>
            Gets the XPath for the TEDS usage mode with the given connector 
            </summary>
            <param name="connector">Connector of type <see cref="T:Hbm.Api.QuantumX.Connectors.IQuantumXConnector"/></param>
            <returns>XPath for the TEDS usage mode</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GenerateTedsUsageModeXml(Hbm.Api.Common.Entities.Channels.Channel)">
            <summary>
            Generates the TEDS usage mode XML.
            </summary>
            <param name="channel">The channel.</param>
            <returns>The TEDS usage mode XML.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.FillSensorIdentification(System.Xml.Linq.XElement,Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Reads the common sensor data from the given xml element and fills it into 
            an existing (concrete) sensor instance
            </summary>
            <param name="sensorRootElement">Root xml element of the sensor</param>
            <param name="sensor">Existing (concrete) sensor instance</param>
            <returns>Existing sensor instance (given by parameter <paramref name="sensor"/>), filled with data from xml</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GenerateSensorIdentificationXml(Hbm.Api.SensorDB.Entities.Sensor)">
            <summary>
            Generates the xml element of the sensor identification element using the data of the given sensor
            </summary>
            <param name="sensor">Sensor, whose date is mapped</param>
            <returns>Identification element as xml string</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GenerateConcreteSensorXml(Hbm.Api.SensorDB.Entities.Sensor,Hbm.Api.Common.Enums.AutoCalibrationMode,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.String@)">
            <summary>
            Generates the xml for the given (concrete) sensor
            </summary>
            <param name="sensor"><see cref="T:Hbm.Api.SensorDB.Entities.Sensor"/> for which the xml tag name should be retrieved</param>
            <param name="autoCalibrationMode">The auto-calibration mode.</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <param name="activeSupplyVoltageXml">Additional xml of the active supply voltage to be added into the common sensor data</param>
            <returns>Xml data as <c>string</c> which represents the given (concrete) sensor</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadBridgeSensor(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Reads the sensor data for a bridge sensor
            from an sensor xml element and maps it into a new sensor instance 
            of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.BridgeSensor"/>.
            </summary>
            <param name="sensorElement">Concrete sensor xml element</param>
            <param name="isInductive">Indicates, if its an inductive sensor</param>
            <returns>New concrete sensor instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GenerateBridgeSensorXml(Hbm.Api.SensorDB.Entities.Sensors.BridgeSensor,Hbm.Api.Common.Enums.AutoCalibrationMode,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.String@)">
            <summary>
            Generates the xml for the given bridge sensor
            </summary>
            <param name="sensor">Sensor to map to xml</param>
            <param name="autoCalibrationMode">The auto-calibration mode.</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <param name="sensorTypeTagName">Tag name of sensor (output parameter)</param>
            <returns>Xml data as <c>string</c> which represents the given sensor</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GenerateCarrierFrequencyXml(Hbm.Api.SensorDB.Entities.Sensors.BridgeSensor,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the xml for the carrier frequency of the given bridge sensor
            </summary>
            <param name="sensor">Bridge sensor which contains the carrier frequency to be mapped to xml. The sensor may be modified, if values are adapted</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <returns>Xml data as <c>string</c> which represents the carrier frequency (excitation frequency)</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadCanSensor(System.Xml.Linq.XElement)">
            <summary>
            Reads the sensor data for a CAN sensor
            from a sensor XML element and maps it into a new sensor instance 
            of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor"/>.
            </summary>
            <param name="sensorElement">Concrete sensor xml element</param>
            <returns>New concrete sensor instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GenerateCanSensorXml(Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.String@)">
            <summary>
            Generates the xml for the given CAN sensor.
            </summary>
            <param name="sensor">Sensor to map to XML.</param>
            <param name="problems">List of problems. New problems may be appended to this list.</param>
            <param name="sensorTypeTagName">Tag name of sensor (output parameter).</param>
            <returns>XML data as <c>string</c> which represents the given sensor.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadCounterSensor(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Reads the sensor data for a counter sensor
            from an sensor xml element and maps it into a new sensor instance 
            of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CounterSensor"/>.
            </summary>
            <param name="sensorElement">Concrete sensor xml element</param>
            <param name="isInductive">Indicates, if its an inductive sensor</param>
            <returns>New concrete sensor instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.FillCounterSensorSpecialParameters(System.Xml.Linq.XElement,Hbm.Api.SensorDB.Entities.Sensors.CounterSensor)">
            <summary>
            Fills the given sensor instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CounterSensor"/>
            with sensor xml data from the special parameters tag.
            </summary>
            <param name="sensorElement">Concrete sensor xml element</param>
            <param name="sensor">Sensor to be filled with the data of the special parameters</param>
            <returns>Given <paramref name="sensor"/> instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GenerateCounterSensorXml(Hbm.Api.SensorDB.Entities.Sensors.CounterSensor,Hbm.Api.Common.Enums.AutoCalibrationMode,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.String@,System.String@)">
            <summary>
            Generates the xml for the given counter sensor
            </summary>
            <param name="sensor">Sensor to map to xml</param>
            <param name="autoCalibrationMode">The auto-calibration mode.</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <param name="sensorTypeTagName">Tag name of sensor (output parameter)</param>
            <param name="activeSupplyVoltageXml">Additional xml of the active supply voltage to be added into the common sensor data</param>
            <returns>Xml data as <c>string</c> which represents the given sensor</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GenerateCounterSensorSpecialParameterXml(Hbm.Api.SensorDB.Entities.Sensors.CounterSensor,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the xml of the special parameters for the given counter sensor.
            </summary>
            <remarks>
            MX440A and MX840A don't have special parameters in its XSD, 
            but here they are treated like a non inductive counter with special parameters.
            This produces warnings (not supported xml tag) from the device, which is ok. 
            </remarks>
            <param name="sensor">Sensor to map to xml</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <returns>Xml data as <c>string</c> which represents the special parameters of given sensor</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadCurrentSensor(System.Xml.Linq.XElement)">
            <summary>
            Reads the sensor data for a current sensor
            from an sensor xml element and maps it into a new sensor instance 
            of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CurrentSensor"/>.
            </summary>
            <param name="sensorElement">Concrete sensor xml element</param>
            <returns>New concrete sensor instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GenerateCurrentSensorXml(Hbm.Api.SensorDB.Entities.Sensors.CurrentSensor,Hbm.Api.Common.Enums.AutoCalibrationMode,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.String@,System.String@)">
            <summary>
            Generates the xml for the given current sensor
            </summary>
            <param name="sensor">Sensor to map to xml</param>
            <param name="autoCalibrationMode">The auto-calibration mode.</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <param name="sensorTypeTagName">Tag name of sensor (output parameter)</param>
            <param name="activeSupplyVoltageXml">Additional xml of the active supply voltage to be added into the common sensor data</param>
            <returns>Xml data as <c>string</c> which represents the given sensor</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadFrequencySensor(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Reads the sensor data for a frequency sensor
            from an sensor xml element and maps it into a new sensor instance 
            of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.FrequencySensor"/>.
            </summary>
            <param name="sensorElement">Concrete sensor xml element</param>
            <param name="isInductive">Indicates, if its an inductive sensor</param>
            <returns>New concrete sensor instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.FillFrequencySensorSpecialParameters(System.Xml.Linq.XElement,Hbm.Api.SensorDB.Entities.Sensors.FrequencySensor)">
            <summary>
            Fills the given sensor instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.FrequencySensor"/>
            with sensor xml data from the special parameters tag.
            </summary>
            <param name="sensorElement">Concrete sensor xml element</param>
            <param name="sensor">Sensor to be filled with the data of the special parameters</param>
            <returns>Given <paramref name="sensor"/> instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GenerateFrequencySensorXml(Hbm.Api.SensorDB.Entities.Sensors.FrequencySensor,Hbm.Api.Common.Enums.AutoCalibrationMode,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.String@,System.String@)">
            <summary>
            Generates the xml for the given frequency sensor
            </summary>
            <param name="sensor">Sensor to map to xml</param>
            <param name="autoCalibrationMode">The auto-calibration mode.</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <param name="sensorTypeTagName">Tag name of sensor (output parameter)</param>
            <param name="activeSupplyVoltageXml">Additional xml of the active supply voltage to be added into the common sensor data</param>
            <returns>Xml data as <c>string</c> which represents the given sensor</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GenerateFrequencySensorSpecialParameterXml(Hbm.Api.SensorDB.Entities.Sensors.FrequencySensor,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the xml of the special parameters for the given frequency sensor
            </summary>
            <param name="sensor">Sensor to map to xml</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <returns>Xml data as <c>string</c> which represents the special parameters of given sensor</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadIepeSensor(System.Xml.Linq.XElement)">
            <summary>
            Reads the sensor data for a iepe sensor
            from an sensor xml element and maps it into a new sensor instance 
            of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.IepeSensor"/>.
            </summary>
            <param name="sensorElement">Concrete sensor xml element</param>
            <returns>New concrete sensor instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GenerateIepeSensorXml(Hbm.Api.SensorDB.Entities.Sensors.IepeSensor,Hbm.Api.Common.Enums.AutoCalibrationMode,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.String@)">
            <summary>
            Generates the xml for the given iepe sensor
            </summary>
            <param name="sensor">Sensor to map to xml</param>
            <param name="autoCalibrationMode">The auto-calibration mode.</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <param name="sensorTypeTagName">Tag name of sensor (output parameter)</param>
            <returns>Xml data as <c>string</c> which represents the given sensor</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadLvdtSensor(System.Xml.Linq.XElement)">
            <summary>
            Reads the sensor data for a lvdt sensor
            from an sensor xml element and maps it into a new sensor instance 
            of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.LvdtSensor"/>.
            </summary>
            <param name="sensorElement">Concrete sensor xml element</param>
            <returns>New concrete sensor instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GenerateLvdtSensorXml(Hbm.Api.SensorDB.Entities.Sensors.LvdtSensor,Hbm.Api.Common.Enums.AutoCalibrationMode,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.String@)">
            <summary>
            Generates the xml for the given lvdt sensor
            </summary>
            <param name="sensor">Sensor to map to xml</param>
            <param name="autoCalibrationMode">The auto-calibration mode.</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <param name="sensorTypeTagName">Tag name of sensor (output parameter)</param>
            <returns>Xml data as <c>string</c> which represents the given sensor</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadPotentiometerSensor(System.Xml.Linq.XElement)">
            <summary>
            Reads the sensor data for a potentiometer sensor
            from an sensor xml element and maps it into a new sensor instance 
            of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.PotentiometerSensor"/>.
            </summary>
            <param name="sensorElement">Concrete sensor xml element</param>
            <returns>New concrete sensor instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GeneratePotentiometerSensorXml(Hbm.Api.SensorDB.Entities.Sensors.PotentiometerSensor,Hbm.Api.Common.Enums.AutoCalibrationMode,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.String@)">
            <summary>
            Generates the xml for the given potentiometer sensor
            </summary>
            <param name="sensor">Sensor to map to xml</param>
            <param name="autoCalibrationMode">The auto-calibration mode.</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <param name="sensorTypeTagName">Tag name of sensor (output parameter)</param>
            <returns>Xml data as <c>string</c> which represents the given sensor</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadPtSensor(System.Xml.Linq.XElement)">
            <summary>
            Reads the sensor data for a pt sensor
            from an sensor xml element and maps it into a new sensor instance 
            of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.PtSensor"/>.
            </summary>
            <param name="sensorElement">Concrete sensor xml element</param>
            <returns>New concrete sensor instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GeneratePtSensorXml(Hbm.Api.SensorDB.Entities.Sensors.PtSensor,Hbm.Api.Common.Enums.AutoCalibrationMode,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.String@)">
            <summary>
            Generates the xml for the given pt sensor
            </summary>
            <param name="sensor">Sensor to map to xml</param>
            <param name="autoCalibrationMode">The auto-calibration mode.</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <param name="sensorTypeTagName">Tag name of sensor (output parameter)</param>
            <returns>Xml data as <c>string</c> which represents the given sensor</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadPwmSensor(System.Xml.Linq.XElement,Hbm.Api.SensorDB.Enums.PwmType)">
            <summary>
            Reads the sensor data for a pwm sensor
            from an sensor xml element and maps it into a new sensor instance 
            of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.PwmSensor"/>.
            </summary>
            <param name="sensorElement">Concrete sensor xml element</param>
            <param name="pwmType">Type of the pwm sensor</param>
            <returns>New concrete sensor instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.FillPwmSensorSpecialParameters(System.Xml.Linq.XElement,Hbm.Api.SensorDB.Entities.Sensors.PwmSensor)">
            <summary>
            Fills the given sensor instance of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.PwmSensor"/>
            with sensor xml data from the special parameters tag.
            </summary>
            <param name="sensorElement">Concrete sensor xml element</param>
            <param name="sensor">Sensor to be filled with the data of the special parameters</param>
            <returns>Given <paramref name="sensor"/> instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GeneratePwmSensorXml(Hbm.Api.SensorDB.Entities.Sensors.PwmSensor,Hbm.Api.Common.Enums.AutoCalibrationMode,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.String@,System.String@)">
            <summary>
            Generates the xml for the given counter sensor
            </summary>
            <param name="sensor">Sensor to map to xml</param>
            <param name="autoCalibrationMode">The auto-calibration mode.</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <param name="sensorTypeTagName">Tag name of sensor (output parameter)</param>
            <param name="activeSupplyVoltageXml">Additional xml of the active supply voltage to be added into the common sensor data</param>
            <returns>Xml data as <c>string</c> which represents the given sensor</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GeneratePwmSensorSpecialParameterXml(Hbm.Api.SensorDB.Entities.Sensors.PwmSensor,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the xml of the special parameters for the given pwm sensor
            </summary>
            <param name="sensor">Sensor to map to xml</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <returns>Xml data as <c>string</c> which represents the special parameters of given sensor</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadResistanceSensor(System.Xml.Linq.XElement)">
            <summary>
            Reads the sensor data for a resistance sensor
            from an sensor xml element and maps it into a new sensor instance 
            of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.ResistanceSensor"/>.
            </summary>
            <param name="sensorElement">Concrete sensor xml element</param>
            <returns>New concrete sensor instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GenerateResistanceSensorXml(Hbm.Api.SensorDB.Entities.Sensors.ResistanceSensor,Hbm.Api.Common.Enums.AutoCalibrationMode,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.String@)">
            <summary>
            Generates the xml for the given resistance sensor
            </summary>
            <param name="sensor">Sensor to map to xml</param>
            <param name="autoCalibrationMode">The auto-calibration mode.</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <param name="sensorTypeTagName">Tag name of sensor (output parameter)</param>
            <returns>Xml data as <c>string</c> which represents the given sensor</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadSsiSensor(System.Xml.Linq.XElement)">
            <summary>
            Reads the sensor data for a ssi sensor
            from an sensor xml element and maps it into a new sensor instance 
            of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.SsiSensor"/>.
            </summary>
            <param name="sensorElement">Concrete sensor xml element</param>
            <returns>New concrete sensor instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GenerateSsiSensorXml(Hbm.Api.SensorDB.Entities.Sensors.SsiSensor,Hbm.Api.Common.Enums.AutoCalibrationMode,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.String@,System.String@)">
            <summary>
            Generates the xml for the given ssi sensor
            </summary>
            <param name="sensor">Sensor to map to xml</param>
            <param name="autoCalibrationMode">The auto-calibration mode.</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <param name="sensorTypeTagName">Tag name of sensor (output parameter)</param>
            <param name="activeSupplyVoltageXml">Additional xml of the active supply voltage to be added into the common sensor data</param>
            <returns>Xml data as <c>string</c> which represents the given sensor</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadThermoCoupleSensor(System.Xml.Linq.XElement)">
            <summary>
            Reads the sensor data for a thermocouple sensor
            from an sensor xml element and maps it into a new sensor instance 
            of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.ThermoCoupleSensor"/>.
            </summary>
            <param name="sensorElement">Concrete sensor xml element</param>
            <returns>New concrete sensor instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GenerateThermoCoupleSensorXml(Hbm.Api.SensorDB.Entities.Sensors.ThermoCoupleSensor,Hbm.Api.Common.Enums.AutoCalibrationMode,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.String@)">
            <summary>
            Generates the xml for the given thermocouple sensor
            </summary>
            <param name="sensor">Sensor to map to xml</param>
            <param name="autoCalibrationMode">The auto-calibration mode.</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <param name="sensorTypeTagName">Tag name of sensor (output parameter)</param>
            <returns>Xml data as <c>string</c> which represents the given sensor</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadVoltageSensor(System.Xml.Linq.XElement)">
            <summary>
            Reads the sensor data for a voltage sensor
            from an sensor xml element and maps it into a new sensor instance 
            of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.VoltageSensor"/>.
            </summary>
            <param name="sensorElement">Concrete sensor xml element</param>
            <returns>New concrete sensor instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GenerateVoltageSensorXml(Hbm.Api.SensorDB.Entities.Sensors.VoltageSensor,Hbm.Api.Common.Enums.AutoCalibrationMode,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.String@,System.String@)">
            <summary>
            Generates the xml for the given voltage sensor
            </summary>
            <param name="sensor">Sensor to map to xml</param>
            <param name="autoCalibrationMode">The auto-calibration mode.</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <param name="sensorTypeTagName">Tag name of sensor (output parameter)</param>
            <param name="activeSupplyVoltageXml">Additional xml of the active supply voltage to be added into the common sensor data</param>
            <returns>Xml data as <c>string</c> which represents the given sensor</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadFbgGenericSensor(System.Xml.Linq.XElement)">
            <summary>
            Reads the sensor data for an FbgGeneric sensor
            from an sensor xml element and maps it into a new sensor instance 
            of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.FbgGenericSensor"/>.
            </summary>
            <param name="sensorElement">Concrete sensor xml element</param>
            <returns>New concrete sensor instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GenerateFbgGenericSensorXml(Hbm.Api.SensorDB.Entities.Sensors.FbgGenericSensor,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.String@)">
            <summary>
            Generates the xml for the given FbgGeneric sensor
            </summary>
            <param name="sensor">Sensor to map to xml</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <param name="sensorTypeTagName">Tag name of sensor (output parameter)</param>
            <returns>Xml data as <c>string</c> which represents the given sensor</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadFbgStraingageSensor(System.Xml.Linq.XElement)">
            <summary>
            Reads the sensor data for an FBGStraingage sensor
            from an sensor xml element and maps it into a new sensor instance 
            of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.FbgGenericSensor"/>.
            </summary>
            <param name="sensorElement">Concrete sensor xml element</param>
            <returns>New concrete sensor instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GenerateFbgStraingageSensorXml(Hbm.Api.SensorDB.Entities.Sensors.FbgStrainGageSensor,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.String@)">
            <summary>
            Generates the xml for the given FbgStraingage sensor
            </summary>
            <param name="sensor">Sensor to map to xml</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <param name="sensorTypeTagName">Tag name of sensor (output parameter)</param>
            <returns>Xml data as <c>string</c> which represents the given sensor</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadFbgThermocoupleSensor(System.Xml.Linq.XElement)">
            <summary>
            Reads the sensor data for an FbgThermocouple sensor
            from an sensor xml element and maps it into a new sensor instance 
            of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.FbgTemperatureSensor"/>.
            </summary>
            <param name="sensorElement">Concrete sensor xml element</param>
            <returns>New concrete sensor instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GenerateFbgThermocoupleSensorXml(Hbm.Api.SensorDB.Entities.Sensors.FbgTemperatureSensor,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.String@)">
            <summary>
            Generates the xml for the given FbgThermocouple sensor
            </summary>
            <param name="sensor">Sensor to map to xml</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <param name="sensorTypeTagName">Tag name of sensor (output parameter)</param>
            <returns>Xml data as <c>string</c> which represents the given sensor</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadFbgWavelengthSensor(System.Xml.Linq.XElement)">
            <summary>
            Reads the sensor data for an FBGWavelength sensor
            from an sensor xml element and maps it into a new sensor instance 
            of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.FbgWavelengthSensor"/>.
            </summary>
            <param name="sensorElement">Concrete sensor xml element</param>
            <returns>New concrete sensor instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GenerateFbgWavelengthSensorXml(Hbm.Api.SensorDB.Entities.Sensors.FbgWavelengthSensor,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.String@)">
            <summary>
            Generates the xml for the given FBGWavelength sensor
            </summary>
            <param name="sensor">Sensor to map to xml</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <param name="sensorTypeTagName">Tag name of sensor (output parameter)</param>
            <returns>Xml data as <c>string</c> which represents the given sensor</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadFbgAccelerometerSensor(System.Xml.Linq.XElement)">
            <summary>
            Reads the sensor data for an FbgGeneric sensor
            from an sensor xml element and maps it into a new sensor instance 
            of type <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.FbgGenericSensor"/>.
            </summary>
            <param name="sensorElement">Concrete sensor xml element</param>
            <returns>New concrete sensor instance, filled with data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GenerateFbgAccelerometerSensorXml(Hbm.Api.SensorDB.Entities.Sensors.FbgAccelerometerSensor,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.String@)">
            <summary>
            Generates the xml for the given FbgGeneric sensor
            </summary>
            <param name="sensor">Sensor to map to xml</param>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <param name="sensorTypeTagName">Tag name of sensor (output parameter)</param>
            <returns>Xml data as <c>string</c> which represents the given sensor</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GenerateDriftCompensationXmlPrivate(Hbm.Api.Common.Enums.AutoCalibrationMode,System.UInt32)">
            <summary>
            Generates the XML string for setting the drift compensation for a sensor.
            </summary>
            <param name="autoCalibrationMode">The auto-calibration mode.</param>
            <param name="repetitionTime">The repetition time in seconds (used only for <c>AutoAdjust</c> abd <c>AutoCalibrate</c>, give 0 for default value).</param>
            <returns>Xml data as <c>string</c> which represents the request for setting the drift compensation to default.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadDriftCompensationPrivate(System.Xml.Linq.XElement)">
            <summary>
            Reads the drift compensation.
            </summary>
            <param name="sensorElement">The sensor element.</param>
            <returns>The auto-calibration setting corresponding to the drift compensation.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GenerateTedsOptionsXml(Hbm.Api.Common.Enums.TedsUsageMode)">
            <summary>
            Generates the TEDS options XML.
            </summary>
            <param name="tedsUsageMode">The TEDS usage mode.</param>
            <returns>The TEDS options XML.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadTedsUsageMode(System.Xml.Linq.XElement)">
            <summary>
            Reads the TEDS usage mode.
            </summary>
            <param name="sensorRootElement">The sensor root element.</param>
            <returns>The TEDS usage mode or <c>TedsUsageMode.NotSupported</c> if not supported.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GetSensorTypeTagName(Hbm.Api.SensorDB.Entities.Sensor,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Gets the tag name of the sensor type.
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="problems">(optional) List of problems. New problems may be appended to this list.</param>
            <returns>The tag name.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadActiveSupplyVoltage(System.Xml.Linq.XElement)">
            <summary>
            Reads the active supply voltage from the concrete sensor elements parent 
            (that means the common sensor xml root element), if available
            </summary>
            <param name="sensorElement">Concrete sensor xml element</param>
            <returns></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadSignal2Type(System.Xml.Linq.XElement,System.String)">
            <summary>
            Reads the signal 2 type from the given tag for the xml sensor-element and converts it into 
            an enumeration member of <see cref="T:Hbm.Api.SensorDB.Enums.Signal2Type"/>.
            </summary>
            <param name="sensorElement">Xml sensor element containing the s2 enabled element</param>
            <param name="s2EnabledXmlTag">Xml tag name of xml element for s2 enabled</param>
            <returns>Converted member of enumeration <see cref="T:Hbm.Api.SensorDB.Enums.Signal2Type"/></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.ReadCarrierFrequency(System.Xml.Linq.XElement,System.String,Hbm.Api.SensorDB.Enums.CarrierFrequencyType@,System.Decimal@)">
            <summary>
            Reads the carrier frequency type and value from the concrete sensor element
            </summary>
            <param name="sensorElement">Concrete sensor xml element</param>
            <param name="exciteFrequencyXmlTag">Xml tag name of xml element for the excite frequency</param>
            <param name="carrierFrequencyType">Returns the carrier frequency type (Output parameter)</param>
            <param name="carrierFrequencyValue">Returns the carrier frequency value (Output parameter)</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GetQuantumXBitSequenceValueFromEnum(Hbm.Api.SensorDB.Enums.BitSequence)">
            <summary>
            Gets the QuantumX bit-sequence value from enum.
            </summary>
            <param name="bitSequence">The API bit-sequence.</param>
            <returns>The QuantumX bit-sequence value.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSensorDataManager.GetApiBitSequenceEnumValue(System.Int32)">
            <summary>
            Gets the API bit-sequence enum value.
            </summary>
            <param name="bitSequence">The QuantumX bit-sequence.</param>
            <returns>The API bit-sequence enum value.</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager">
            <summary>
            Data manager for reading and creating signal specific xml data.
            </summary>
            <remarks>
            All methods of this class may only be called by <see cref="T:Hbm.Api.QuantumX.Core.CommunicationManager"/> 
            or from classes, which are derived from <see cref="T:Hbm.Api.QuantumX.Core.Xml.XmlDataManager"/>.
            </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.#ctor(Hbm.Api.QuantumX.QuantumXDevice)">
            <summary>
            Creates a new instance and stores the instance of the device.
            </summary>
            <param name="device"><see cref="T:Hbm.Api.QuantumX.QuantumXDevice"/> on which the <see cref="T:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager"/> instance works</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GetSignalXPath(Hbm.Api.QuantumX.Signals.IQuantumXSignal)">
            <summary>
            Gets the XPath for the given signal.
            </summary>
            <param name="signal">The signal.</param>
            <returns>XPath for the signal.</returns>
            <exception cref="T:Hbm.Api.Common.Entities.Problems.OperationFailedError">Thrown, when the signal is of an unsupported type.</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.ReadAnalogInSignals(System.Xml.Linq.XElement)">
            <summary>
            Reads all analog in signals data from a channel xml root element and maps them into a new list of <see cref="T:Hbm.Api.Common.Entities.Signals.Signal"/>.
            </summary>
            <param name="channelRootElement">Root xml element of the channel</param>
            <returns>New list of <see cref="T:Hbm.Api.Common.Entities.Signals.Signal"/> instances, filled with data from xml</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GenerateAnalogInSignalXml(Hbm.Api.QuantumX.Signals.QuantumXAnalogInSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the xml for the given analog in signal
            </summary>
            <param name="signal">Signal to map to xml</param>
            <param name="problems">List of problems. This method may append new problems to this list</param>
            <returns>Xml data as <c>string</c> which represents the given signal</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GetAnalogInSignalXPath(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.QuantumX.Signals.IQuantumXSignal)">
            <summary>
            Gets the XPath for the analog in signal with the given connector and signal 
            </summary>
            <param name="connector">Connector of type <see cref="T:Hbm.Api.QuantumX.Connectors.IQuantumXConnector"/></param>
            <param name="signal">Signal of type <see cref="T:Hbm.Api.QuantumX.Signals.IQuantumXSignal"/></param>
            <returns>XPath for the signal</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GenerateAnalogInSignalNameXml(Hbm.Api.QuantumX.Signals.IQuantumXSignal,System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given analog in signal name.
            </summary>
            <param name="signal">Signal to map to XML.</param>
            <param name="signalName">Name of the signal.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>XML data as <c>string</c> which represents the given signal name.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.ReadFbgSignals(System.Xml.Linq.XElement)">
            <summary>
            Reads all fiber bragg grating signals data from a channel xml root element and maps them into a new list of <see cref="T:Hbm.Api.Common.Entities.Signals.Signal"/>.
            </summary>
            <param name="channelRootElement">Root xml element of the channel</param>
            <returns>New list of <see cref="T:Hbm.Api.Common.Entities.Signals.Signal"/> instances, filled with data from xml</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GenerateFbgSignalXml(Hbm.Api.QuantumX.Signals.QuantumXFbgSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
                Generates the xml for the given fiber bragg grating signal
            </summary>
            <param name="signal">Signal to map to xml</param>
            <param name="problems">List of problems. This method may append new problems to this list</param>
            <returns>Xml data as <c>string</c> which represents the given signal</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GetFbgSignalXPath(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.QuantumX.Signals.IQuantumXSignal)">
            <summary>
            Gets the XPath for the fiber bragg grating signal with the given connector and signal 
            </summary>
            <param name="connector">Connector of type <see cref="T:Hbm.Api.QuantumX.Connectors.IQuantumXConnector"/></param>
            <param name="signal">Signal of type <see cref="T:Hbm.Api.QuantumX.Signals.IQuantumXSignal"/></param>
            <returns>XPath for the signal</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GenerateFbgSignalNameXml(Hbm.Api.QuantumX.Signals.IQuantumXSignal,System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given fbg signal name.
            </summary>
            <param name="signal">Signal to map to XML.</param>
            <param name="signalName">Name of the signal.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>XML data as <c>string</c> which represents the given signal name.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.ReadAnalogOutSignals(System.Xml.Linq.XElement)">
            <summary>
            Reads the analog out signal's data from a channel xml root element (only one signal is available) and maps them into a new list of <see cref="T:Hbm.Api.Common.Entities.Signals.Signal"/>.
            </summary>
            <param name="channelRootElement">Root xml element of the channel</param>
            <returns>New list of <see cref="T:Hbm.Api.Common.Entities.Signals.Signal"/> instances, filled with data from xml</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GenerateAnalogOutSignalXml(Hbm.Api.QuantumX.Signals.QuantumXAnalogOutSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.Boolean)">
            <summary>
            Generates the xml for the given analog out signal.
            </summary>
            <param name="signal">Signal to map to xml.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <param name="generateSurroundingTag">If set to <c>true</c> the surrounding tag is also generated (optional).</param>
            <returns>Xml data as <c>string</c> which represents the given signal.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GetAnalogOutSignalXPath(Hbm.Api.QuantumX.Connectors.IQuantumXConnector)">
            <summary>
            Gets the XPath for the analog out signal with the given connector.
            </summary>
            <param name="connector">Connector of type <see cref="T:Hbm.Api.QuantumX.Connectors.IQuantumXConnector"/>.</param>
            <returns>XPath for the signal.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GenerateAnalogOutSignalNameXml(System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given analog out signal name.
            </summary>
            <param name="signalName">Name of the signal.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>XML data as <c>string</c> which represents the given signal name.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.ReadDigitalSignals(System.Xml.Linq.XElement)">
            <summary>
            Reads the digital signal's data from a channel xml root element (only one signal is available) and maps them into a new list of <see cref="T:Hbm.Api.Common.Entities.Signals.Signal"/>.
            </summary>
            <param name="channelRootElement">Root xml element of the channel</param>
            <returns>New list of <see cref="T:Hbm.Api.Common.Entities.Signals.Signal"/> instances, filled with data from xml</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GenerateDigitalSignalXml(Hbm.Api.QuantumX.Signals.QuantumXDigitalSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the xml for the given digital signal.
            </summary>
            <param name="signal">Signal to map to xml.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>Xml data as <c>string</c> which represents the given signal.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GetDigitalSignalXPath(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.QuantumX.Signals.IQuantumXSignal)">
            <summary>
            Gets the XPath for the digital signal with the given connector and signal.
            </summary>
            <param name="connector">Connector of type <see cref="T:Hbm.Api.QuantumX.Connectors.IQuantumXConnector"/>.</param>
            <param name="signal">Signal of type <see cref="T:Hbm.Api.QuantumX.Signals.IQuantumXSignal"/>.</param>
            <returns>XPath for the signal.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GenerateDigitalSignalNameXml(Hbm.Api.QuantumX.Signals.QuantumXDigitalSignal,System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given digital signal name.
            </summary>
            <param name="signal">Signal to map to XML.</param>
            <param name="signalName">Name of the signal.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>XML data as <c>string</c> which represents the given signal name.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.ReadCanInSignal(System.Xml.Linq.XElement,System.Int32@)">
            <summary>
            Reads all CAN input signals data from a channel XML root element and maps the first into a <see cref="T:Hbm.Api.Common.Entities.Signals.Signal" />.
            </summary>
            <param name="channelRootElement">Root XML element of the channel.</param>
            <param name="timeout">The timeout in which two asynchronous values have to be received.</param>
            <returns>A <see cref="T:Hbm.Api.Common.Entities.Signals.Signal" /> instance, filled with data from XML.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GenerateCanInSignalXml(Hbm.Api.QuantumX.Signals.QuantumXCanInSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given CAN input signal.
            </summary>
            <param name="signal">Signal to map to XML.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>Xml data as <c>string</c> which represents the given signal.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GenerateCanRawSignalXml(Hbm.Api.QuantumX.Signals.QuantumXCanRawSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given CAN Raw signal.
            </summary>
            <param name="signal">Signal to map to XML.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>Xml data as <c>string</c> which represents the given signal.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GetCanInSignalXPath(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.QuantumX.Signals.IQuantumXSignal)">
            <summary>
            Gets the XPath for the analog in signal with the given connector and signal.
            </summary>
            <param name="connector">Connector of type <see cref="T:Hbm.Api.QuantumX.Connectors.IQuantumXConnector"/>.</param>
            <param name="signal">Signal of type <see cref="T:Hbm.Api.QuantumX.Signals.IQuantumXSignal"/>.</param>
            <returns>XPath for the signal.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.ReadAnalogInSignal(System.Xml.Linq.XElement)">
            <summary>
            Reads the analog in signal data from a signal xml root element and maps it into an new <see cref="T:Hbm.Api.QuantumX.Signals.QuantumXAnalogInSignal"/> instance.
            </summary>
            <param name="signalRootElement">>Root xml element of the signal</param>
            <returns>New instance of type <see cref="T:Hbm.Api.QuantumX.Signals.QuantumXAnalogInSignal"/>, filled with data from xml</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.ReadFbgSignal(System.Xml.Linq.XElement)">
            <summary>
            Reads the fiber bragg grating signal data from a signal xml root element and maps it into an new <see cref="T:Hbm.Api.QuantumX.Signals.QuantumXFbgSignal"/> instance.
            </summary>
            <param name="signalRootElement">>Root xml element of the signal</param>
            <returns>New instance of type <see cref="T:Hbm.Api.QuantumX.Signals.QuantumXFbgSignal"/>, filled with data from xml</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.ReadSyncSignal(System.Xml.Linq.XElement)">
            <summary>
            Reads the analog in signal data from a signal xml root element and maps it into the given <see cref="T:Hbm.Api.QuantumX.Signals.QuantumXSyncSignal"/> instance
            which can (at the time being) either be a <see cref="T:Hbm.Api.QuantumX.Signals.QuantumXFbgSignal"/> or a <see cref="T:Hbm.Api.QuantumX.Signals.QuantumXAnalogInSignal"/>.
            </summary>
            <param name="signalRootElement">Root xml element of the signal</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GenerateSyncSignalXmlPrivate(Hbm.Api.Common.Entities.Signals.SyncSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
                Generates the xml for the given signal
            </summary>
            <remarks>
                This method is called from method <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GenerateAnalogInSignalXml(Hbm.Api.QuantumX.Signals.QuantumXAnalogInSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})" />.
                It stays private for for better maintenance, because this method and <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.ReadSyncSignal(System.Xml.Linq.XElement)" /> belong together.
            </remarks>
            <param name="signal">Signal to map to xml</param>
            <param name="problems">List of problems. This method may append new problems to this list</param>
            <returns>Xml data as <c>string</c> which represents the given signal</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GenerateSyncSignalNameXmlPrivate(Hbm.Api.QuantumX.Signals.IQuantumXSignal,System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given signal name.
            </summary>
            <param name="signal">Signal to map to XML.</param>
            <param name="signalName">Name of the signal name.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>XML data as <c>string</c> which represents the given signal name.</returns>
            <remarks>
            This method is called from method <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GenerateAnalogInSignalNameXml(Hbm.Api.QuantumX.Signals.IQuantumXSignal,System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})" />.
            It stays private for for better maintenance, because this method and <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.ReadSyncSignal(System.Xml.Linq.XElement)" /> belong together.
            </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.ReadAnalogOutSignal(System.Xml.Linq.XElement)">
            <summary>
            Reads the analog out signal data from a signal xml root element and maps it into an new <see cref="T:Hbm.Api.QuantumX.Signals.QuantumXAnalogOutSignal"/> instance.
            </summary>
            <remarks>
            The analog out signal has no signal tag, so the <paramref name="signalRootElement"/> is defined by the channel's root element
            </remarks>
            <param name="signalRootElement">Root xml element of the signal.</param>
            <returns>New instance of type <see cref="T:Hbm.Api.QuantumX.Signals.QuantumXAnalogOutSignal"/>, filled with data from xml</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GenerateAnalogOutSignalXmlPrivate(Hbm.Api.QuantumX.Signals.QuantumXAnalogOutSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.Boolean)">
            <summary>
            Generates the xml for the given signal.
            </summary>
            <remarks>
            This method is called from method <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GenerateAnalogOutSignalXml(Hbm.Api.QuantumX.Signals.QuantumXAnalogOutSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem},System.Boolean)"/>.
            It stays private for for better maintenance, because this method and <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.ReadAnalogOutSignal(System.Xml.Linq.XElement)"/> belong together.
            </remarks>
            <param name="signal">Signal, containing the scaling to map to xml.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <param name="generateSurroundingTag">If set to <c>true</c> the surrounding tag is also generated.</param>
            <returns>Xml data as <c>string</c> which represents the given signal.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GenerateAnalogOutSignalNameXmlPrivate(System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given signal name.
            </summary>
            <param name="signalName">Name of the signal.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>XML data as <c>string</c> which represents the given signal name.</returns>
            <remarks>
            This method is called from method <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GenerateAnalogOutSignalNameXml(System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})" />.
            It stays private for for better maintenance, because this method and <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.ReadAnalogOutSignal(System.Xml.Linq.XElement)" /> belong together.
            </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.ReadDigitalSignal(System.Xml.Linq.XElement)">
            <summary>
            Reads the digital signal data from a signal xml root element and maps it into an new <see cref="T:Hbm.Api.QuantumX.Signals.QuantumXDigitalSignal"/> instance.
            </summary>
            <param name="signalRootElement">Root xml element of the signal</param>
            <returns>New instance of type <see cref="T:Hbm.Api.QuantumX.Signals.QuantumXDigitalSignal"/>, filled with data from xml</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GenerateDigitalSignalXmlPrivate(Hbm.Api.QuantumX.Signals.QuantumXDigitalSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the xml for the given signal.
            </summary>
            <remarks>
            This method is called from method <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GenerateDigitalSignalXml(Hbm.Api.QuantumX.Signals.QuantumXDigitalSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})"/>.
            It stays private for for better maintenance, because this method and <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.ReadDigitalSignal(System.Xml.Linq.XElement)"/> belong together.
            </remarks>
            <param name="signal">Signal to map to xml.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>Xml data as <c>string</c> which represents the given signal.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GenerateDigitalSignalNameXmlPrivate(Hbm.Api.QuantumX.Signals.QuantumXDigitalSignal,System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given signal name.
            </summary>
            <param name="signal">Signal to map to XML.</param>
            <param name="signalName">Name of the signal.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>XML data as <c>string</c> which represents the given signal name.</returns>
            <remarks>
            This method is called from method <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GenerateDigitalSignalNameXml(Hbm.Api.QuantumX.Signals.QuantumXDigitalSignal,System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})" />.
            It stays private for for better maintenance, because this method and <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.ReadDigitalSignal(System.Xml.Linq.XElement)" /> belong together.
            </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.ReadCanInSignal(System.Xml.Linq.XElement,System.String,System.Int32@)">
            <summary>
            Reads the CAN input signal data from a signal XML root element and maps it into an new <see cref="T:Hbm.Api.QuantumX.Signals.QuantumXCanInSignal" /> instance.
            </summary>
            <param name="signalRootElement">Root XML element of the signal.</param>
            <param name="signalName">Name of the signal.</param>
            <param name="timeout">The timeout in which two asynchronous values have to be received.</param>
            <returns>New instance of type <see cref="T:Hbm.Api.QuantumX.Signals.QuantumXCanInSignal" />, filled with data from XML.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GenerateCanInSignalXmlPrivate(Hbm.Api.QuantumX.Signals.QuantumXCanInSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given signal.
            </summary>
            <remarks>
            This method is called from method <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GenerateCanInSignalXml(Hbm.Api.QuantumX.Signals.QuantumXCanInSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})"/>.
            It stays private for for better maintenance, because this method and <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.ReadCanInSignal(System.Xml.Linq.XElement,System.Int32@)"/> belong together.
            </remarks>
            <param name="signal">Signal to map to XML.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>XML data as <c>string</c> which represents the given signal.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GetFittingCanSignalFormat(Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor,System.Boolean)">
            <summary>
            Returns the signal format used to transmit the acquired can data via streaming (used to setup the AsyncSignal).
            This format depends on the can sensor settings that describe the length and type of the interpreted CanBus data.
            </summary>
            <param name="sensor"> <see cref="T:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor"/> to decide which format should be used to transmit
            the interpreted can sensor data via streaming.</param>
            <param name="compatibleToCatman"> Set this to true to be compatible to Catman.</param>
            <returns>Data format used to transmit the acquired can data (e.g. via streaming)</returns>
            <remarks>This function acts NOT according to the proposal of H.Hofmann https://jira.hbm.com/browse/API-250 </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GenerateCanRawSignalXmlPrivate(Hbm.Api.QuantumX.Signals.QuantumXCanRawSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Generates the XML for the given signal.
            </summary>
            <remarks>
            This method is called from method <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.GenerateCanRawSignalXml(Hbm.Api.QuantumX.Signals.QuantumXCanRawSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})"/>.
            It stays private for for better maintenance, because this method and <see cref="M:Hbm.Api.QuantumX.Core.Xml.XmlSignalDataManager.ReadCanRawSignal(System.Xml.Linq.XElement,System.String)"/> belong together.
            </remarks>
            <param name="signal">Signal to map to XML.</param>
            <param name="problems">List of problems. This method may append new problems to this list.</param>
            <returns>XML data as <c>string</c> which represents the given signal.</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Core.Xml.XmlZeroBalanceDataManager">
            <summary>
            Data manager for reading and creating zero balancing specific xml data.
            </summary>
            <remarks>
            All methods of this class may only be called by <see cref="T:Hbm.Api.QuantumX.Core.CommunicationManager"/> 
            or from classes, which are derived from <see cref="T:Hbm.Api.QuantumX.Core.Xml.XmlDataManager"/>.
            </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlZeroBalanceDataManager.#ctor(Hbm.Api.QuantumX.QuantumXDevice)">
            <summary>
            Creates a new instance and stores the instance of the device.
            </summary>
            <param name="device"><see cref="T:Hbm.Api.QuantumX.QuantumXDevice"/> on which the <see cref="T:Hbm.Api.QuantumX.Core.Xml.XmlZeroBalanceDataManager"/> instance works</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlZeroBalanceDataManager.ReadZeroBalance(System.Xml.Linq.XElement)">
            <summary>
            Reads the zero data from an channel xml element and maps it 
            into a new <see cref="T:Hbm.Api.Common.Entities.Zero"/> instance.
            </summary>
            <param name="channelRootElement">Root xml element of the channel</param>
            <returns>New instance of type <see cref="T:Hbm.Api.Common.Entities.Zero"/>, filled with data from xml</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlZeroBalanceDataManager.GenerateZeroBalancingXml(Hbm.Api.Common.Entities.Zero)">
            <summary>
            Generates the xml for the given zero balancing.
            </summary>
            <param name="zero">Zero balancing to map to xml</param>
            <returns>Xml data as <c>string</c> which represents the given zero balancing</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlZeroBalanceDataManager.GetZeroBalancingXPath(System.Int32)">
            <summary>
            Gets the xpath for the zero balancing for the given connector position
            </summary>
            <param name="connectorPosition">Position of the connector (the first connector has the position 1)</param>
            <returns>XPath for the zero balancing</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlZeroBalanceDataManager.GetAnalogInZeroBalancingXPath(Hbm.Api.QuantumX.Connectors.IQuantumXConnector)">
            <summary>
            Gets the analog in channel xpath for the zero balancing for the given connector position
            </summary>
            <param name="connectorPosition">Position of the connector (the first connector has the position 1)</param>
            <returns>Analog in channl XPath for the zero balancing</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.Xml.XmlZeroBalanceDataManager.GetFbgZeroBalancingXPath(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.QuantumX.Channels.IQuantumXChannel)">
            <summary>
            Gets the FBG channel xpath for the zero balancing for the given connector and channel position
            </summary>
            <param name="connectorPosition">Position of the connector (the first connector has the position 1)</param>
            <returns>FBG channel XPath for the zero balancing</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Core.FrameworkDllWrapper">
            <summary>
            Wrapper to encapsulate the access to the unmanaged HBM_QX_Framework.dll.
            </summary>
            <remarks>
            All methods of this class may only be called by <see cref="T:Hbm.Api.QuantumX.Core.CommunicationManager"/>. 
            All (public / internal) methods of this class must be synchronized with <see cref="F:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.SyncLock"/> 
            to prevent concurrent access of multiple (different) devices, because the underlying C++ DLL is not thread safe.
            </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.#cctor">
            <summary>
            Creates a new instance
            </summary>
            <remarks>
            (Empty) Static constructor declaration required to guarantee
            the thread-safe static eager field initialization (of SyncLock)
            for all .NET Framework versions
            </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.Init">
            <summary>
            Initialization of the encapsulated unmanaged code.
            This method must be called first, before using other 
            methods of this class.
            </summary>
            <exception cref="T:Hbm.Api.QuantumX.Exceptions.FrameworkDllException">Thrown if an error occurs</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.Unload">
            <summary>
            Cleans up the the encapsulated unmanaged code.
            After calling this method, no other method 
            of this class can be used successfully.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.ConnectToTcpIpDev(System.String,System.Int32)">
            <summary>
            Connects to a QuantumX device physically via TCP/IP and returns the UUID of the connected device.
            </summary>
            <param name="ipAddress">IP address of the QuantumX device</param>
            <param name="port">Port of the hbmProtocol</param>
            <returns>UUID of the connected device</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.DisconnectFromTcpIpDev(System.UInt64)">
            <summary>
            Disconnects a connected QuantumX physically from the device
            </summary>
            <param name="devUuid">UUID of the device</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.ReadXmlView(System.UInt64,Hbm.Api.QuantumX.Enums.XmlViewType)">
            <summary>
            Reads the xml for the given <paramref name="view"/> from the device.
            </summary>
            <param name="devUuid">UUID of the device</param>
            <param name="view">View to retrieve as xml</param>
            <returns>xml content of the view as <c>string</c> or <c>String.Empty</c> if the device doesn't support the view</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.ReadXsdView(System.UInt64,Hbm.Api.QuantumX.Enums.XmlViewType)">
            <summary>
            Reads the xsd for the given <paramref name="view"/> from the device.
            </summary>
            <param name="devUuid">UUID of the device</param>
            <param name="view">View to retrieve as xsd</param>
            <returns>xsd content of the view as <c>string</c> or <c>String.Empty</c> if the device doesn't support the view</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.ReadXmlSection(System.UInt64,Hbm.Api.QuantumX.Enums.XmlViewType,System.String)">
            <summary>
            Reads the xml section specified by the <paramref name="xPath"/> for the given <paramref name="view"/> from the device.
            </summary>
            <param name="devUuid">UUID of the device</param>
            <param name="view">View to retrieve as xml</param>
            <param name="xPath">XPath to specify the root element for the start of the xml section</param>
            <returns>xml content of the view as <c>string</c> or <c>String.Empty</c> if the device doesn't support the view</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.WriteXmlView(System.UInt64,Hbm.Api.QuantumX.Enums.XmlViewType,System.String)">
            <summary>
            Writes a xml for a given <paramref name="view"/> to the device. 
            </summary>
            <param name="devUuid">UUID of the device</param>
            <param name="view">View to which the xml section belongs</param>
            <param name="xmlContent"><c>String</c> with xml content</param>
            <returns>List of problems (errors and warnings) from the device as result for the write operation. The list is empty, if no problems have occurred</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.WriteXmlSection(System.UInt64,Hbm.Api.QuantumX.Enums.XmlViewType,System.String,System.String)">
            <summary>
                Writes a xml section for a given <paramref name="view" /> to the device.
                The <paramref name="xPath" /> specifies the root element to which the section belongs.
            </summary>
            <param name="devUuid">UUID of the device</param>
            <param name="view">View to which the xml section belongs</param>
            <param name="xPath">XPath to specify the root element for the start of the xml section</param>
            <param name="xmlContent"><c>String</c> with xml content</param>
            <returns>
                List of problems (errors and warnings) from the device as result for the write operation. The list is empty,
                if no problems have occurred.
            </returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.ReadSignalList(System.UInt64)">
            <summary>
            Reads the list of all active signals as XML document from the module. 
            </summary>
            <param name="devUuid">UUID of the device</param>
            <returns>Xml content with the index and signal reference of the active device signals</returns>
            <remarks>
            Returns a xml like:
            <code>
             <SrvParams>
             <Signal address="1">
               <SignalReference>AnalogIn_Connector1.Signal1</SignalReference>
             </Signal>
             <Signal address="2">
               <SignalReference>AnalogIn_Connector2.Signal1</SignalReference>
             </Signal>
             <Signal address="3">
               <SignalReference>AnalogIn_Connector3.Signal1</SignalReference>
             </Signal>
             <Signal address="4">
               <SignalReference>AnalogIn_Connector4.Signal1</SignalReference>
             </Signal>
            </SrvParams>
            </code>
            </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.ReadSingleElectricalValueForSignal(System.UInt64,System.Int32,System.Int32,System.Double@)">
            <summary>
            Reads a single electrical value for the given connector and signal number of an analog in connector
            </summary>
            <param name="devUuid">Uuid of the device</param>
            <param name="connectorNr">Connector number (starting with 1)</param>
            <param name="signalNr">Signal number (starting with 1)</param>
            <param name="electricalValue">Current electrical value</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.ReadSingleMeasurementValueForSignals(System.UInt64,System.Double[]@,System.Int32@)">
            <summary>
            Reads one single measurement value for the active signals of the given device and stores them into the given <paramref name="singleMeasurementValuesBuffer"/>).
            </summary>
            <param name="devUuid">UUID of the device</param>
            <param name="singleMeasurementValuesBuffer">Buffer for storing the single measurement of the signals of the device. This buffer must be allocated before.</param>
            <param name="numValuesRead">Number of values read into the buffer <paramref name="singleMeasurementValuesBuffer"/></param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.ConvertUnit(System.Int32)">
            <summary>
            Converts the given unit code to its string representation 
            </summary>
            <param name="unitCode">Unit code to be converted</param>
            <returns>Converted UTF-8 string or <c>String.Empty</c> if conversion failed (or unit code is user defined)</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.ConvertUnit(System.String,System.Int32@)">
            <summary>
            Converts the given unit string to the corresponding unit code
            </summary>
            <param name="unitName">UTF8-encoded unit name</param>
            <param name="unitCode">Converted unit code (output parameter), if conversion was successful</param>
            <returns><c>true</c> if conversion was successful, else <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.SetLedMode(System.UInt64,System.Int32,Hbm.Api.QuantumX.Enums.LedBlinking)">
            <summary>
            Switches LED operating mode for a module or a specific connector of a module
            </summary>
            <param name="devUuid">UUID of the device</param>
            <param name="ledNo">Number of the LED: 0=Module LED, 1..n connector LED</param>
            <param name="ledMode">Mode of the LED to be set</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.RestartSystem(System.UInt64)">
            <summary>
            Restarts the given module.
            </summary>
            <param name="devUuid">UUID of the device</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.ExecuteControl(System.UInt64,System.String,System.String[])">
            <summary>
            Executes the QuantumX control <paramref name="controlName"/> with the given <paramref name="parameters"/> as string array
            without getting data from the control. 
            </summary>
            <param name="devUuid">UUID of the device</param>
            <param name="controlName">Name of the control</param>
            <param name="parameters">Array of strings with the required parameters for the control</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.ExecuteControlXml(System.UInt64,System.String,System.String)">
            <summary>
            Executes the QuantumX control <paramref name="controlName"/> with the given <paramref name="xmlParameters"/> as xml string
            and retrieves the data as xml string.
            </summary>
            <param name="devUuid">UUID of the device</param>
            <param name="controlName">Name of the control</param>
            <param name="xmlParameters">Xml string, containing the required parameters for the control</param>
            <returns>Xml string, containing the result data retrieved from the control</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.ReadDeviceStatusXml(System.UInt64)">
            <summary>
            Reads the device status XML.
            </summary>
            <param name="devUuid">UUID of the device.</param>
            <returns>The device status XML.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.ReadDeviceErrorStatusXml(System.UInt64)">
            <summary>
            Reads the device error status XML.
            </summary>
            <param name="devUuid">UUID of the device.</param>
            <returns>The device error status XML.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.LoadFactoryDefaults(System.UInt64)">
            <summary>
            Loads the factory defaults for the connectors, channels and signals.
            </summary>
            <param name="devUuid">UUID of the device.</param>
            <returns>List of problems (errors and warnings) from the device as result for the write operation. The list is empty, if no problems have occurred.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.WriteTedsBinary(System.UInt64,System.Int32,System.Text.StringBuilder,System.Byte[],System.UIntPtr)">
            <summary>
            Writes the teds binary.
            </summary>
            <param name="devUuid">The dev UUID.</param>
            <param name="connectorPosition">The connector nr.</param>
            <param name="tid">The tid.</param>
            <param name="data">The data.</param>
            <param name="size">The size.</param>
            <returns></returns>
            <exception cref="T:Hbm.Api.QuantumX.Exceptions.FrameworkDllException"></exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.DeviceNotConnectedException"></exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.ReadTedsBinaryDataBlock(System.UInt64,System.Int32,System.Text.StringBuilder,System.Byte[],System.UIntPtr@,System.UIntPtr)">
            <summary>
            Reads the teds binary block.
            </summary>
            <param name="devUuid">The device UUID.</param>
            <param name="connectorPosition">The connector position</param>
            <param name="tid">The tid.</param>
            <param name="data">The data.</param>
            <param name="dataLen">Length of the data.</param>
            <param name="maxLen">The maximum length.</param>
            <returns></returns>
            <exception cref="T:Hbm.Api.QuantumX.Exceptions.FrameworkDllException"></exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.DeviceNotConnectedException"></exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.ActivateTeds(System.UInt64,System.Int32)">
            <summary>
            Activates the TEDS.
            </summary>
            <param name="devUuid">The device UUID.</param>
            <param name="connectorPosition">The connector position.</param>
            <returns>List of problems (errors and warnings) from the device as result for the activation operation. The list is empty, if no problems have occurred.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.ReadFile(System.UInt64,System.String,System.String,System.String)">
            <summary>
            Reads a file from the given module and path and stores it to the given PC location.
            </summary>
            <param name="devUuid">UUID of device to read from.</param>
            <param name="fileName">The file name to read.</param>
            <param name="srcPath">The path in the module to read from.</param>
            <param name="dstPath">The path of the PC to write the file to.</param>
            <exception cref="T:Hbm.Api.Common.Exceptions.DeviceNotConnectedException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:Hbm.Api.QuantumX.Exceptions.FrameworkDllException"></exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_Init">
            <summary>
            Initializes the unmanaged HBM_QX_Framework.dll.
            This method must be called first, before using other methods 
            of the framework DLL.
            </summary>
            <returns>Return code. Values > 1 mean success</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_Unload">
            <summary>
            Cleans up the unmanaged HBM_QX_Framework.dll.
            After calling this method, no other method 
            of the framework DLL can be used successfully.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XCOM_ConnectToTcpIpDev(System.String,System.UInt16,System.UInt64@)">
            <summary>
            Establishes a connection to a QuantumX device via TCP/IP
            </summary>
            <param name="ipAddress">IP address of the QuantumX device</param>
            <param name="hbmProtocolPort">Port of the hbmProtocol</param>
            <param name="devUuid">UUID of the device of the connected device as output parameter</param>
            <returns>0 if ok, else error code</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XCOM_Disconnect(System.UInt64)">
            <summary>
            Disconnects a connected QuantumX device
            </summary>
            <param name="devUuid">UUID of the device</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XPAR_ReadXSD(System.UInt64,System.UInt32,System.Byte[],System.UIntPtr@,System.UIntPtr)">
            <summary>
            Reads a XSD description for a device
            </summary>
            <param name="devUuid">Device identification</param>
            <param name="view">0 for signals or sensors, 1 for hardware settings</param>
            <param name="data">XSD data read from device</param>
            <param name="dataLen">Length of data read</param>
            <param name="maxLen">Max. length of data to read</param>
            <returns>Error code.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XPAR_ReadXML(System.UInt64,System.UInt32,System.UInt32,System.Byte[],System.UIntPtr@,System.UIntPtr)">
            <summary>
            Reads a XML string from a device.  
            </summary>
            <param name="devUuid">UUID of the device</param>
            <param name="viewId">Id of the view to retrieve</param>
            <param name="currentChoicesOnly">0 = read complete xml tree, 1 = read selected choices only</param>
            <param name="data">XML data from device as byte array</param>
            <param name="dataLength">Length of data in bytes</param>
            <param name="maxLength">Maximum size of data buffer</param>
            <returns>0 if ok, else error code</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XPAR_ReadXMLSect(System.UInt64,System.UInt32,System.UInt32,System.String,System.Byte[],System.UIntPtr@,System.UIntPtr)">
            <summary>
            Reads a XML section from a device
            </summary>
            <param name="devUuid">Device identification</param>
            <param name="view">0 for signals or sensors, 1 for hardware settings</param>
            <param name="currentChoicesOnly">0 for read complete tree, 1 for read choices only</param>
            <param name="xPath">XMLPath to target section</param>
            <param name="data">XML data read from section</param>
            <param name="dataLength">Length of data read</param>
            <param name="maxLength">Max. length of data to read</param>
            <returns>0 if ok, else error code</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XPAR_WriteXML(System.UInt64,System.UInt32,System.Byte[],System.UIntPtr)">
            <summary>
            Writes a xml description for a device
            </summary>
            <param name="devUuid">Device identification</param>
            <param name="view">0 for signals or sensors, 1 for hardware settings</param>
            <param name="data">XML data to write to device</param>
            <param name="size">Size of data</param>
            <returns>0 if ok, else error code</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XPAR_WriteXMLSect(System.UInt64,System.UInt32,System.String,System.Byte[],System.UIntPtr)">
            <summary>
            Writes a XML section to the device
            </summary>
            <param name="devUuid">UUID of the device</param>
            <param name="viewId">Id of the view to which the xml section belongs</param>
            <param name="xPath">xPath to specify the root element for the start of the xml section</param>
            <param name="data">Data of the XML section to write to the device</param>
            <param name="dataLength">Length of data in bytes</param>
            <returns>0 if ok, else error code</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XDAQ_GetAllMeasVals(System.UInt64,System.Int32,System.UIntPtr@,System.Double[],System.UIntPtr)">
            <summary>
            Retrieves one measured value from all signals.
            Use <see cref="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XDAQ_GetSignalListString(System.UInt64,System.Byte[],System.UIntPtr@,System.UIntPtr)"/> to get the signal references according to the index in the <paramref name="measVal"/> array
            for assigning the measurement values to the signals.
            </summary>
            <param name="devUuid">UUID of the device</param>
            <param name="enabledSignalsOnly"><c>0</c>: get values from all signals of the device, <c>1</c>: values from active signals only</param>
            <param name="sigCount">Returns the number of signals of the module</param>
            <param name="measVal">Buffer for measured values</param>
            <param name="maxSigCount">Maximum number of signals (number of double elements) in measVal. If maxSigCount is smaller than the number of signals of the device, only maxSigCount signals will be returned.</param>
            <returns>0 if ok, else error code</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XDAQ_GetAnalogMeasVal(System.UInt64,System.UInt32,System.UInt32,System.UInt32,System.Double@)">
            <summary>
            Returns a single measured value of an analog channel.
            </summary>
            <param name="devUuid">UUID of the device</param>
            <param name="connectorNr">Connector number (1.. number of connectors of the module)</param>
            <param name="signalNr">Signal number (1.. number of signals Signal of the connector)</param>
            <param name="scaleType">Scaling type (1 = Electrical value will be delivered. This seems to be wrong described in Framework.h!!!)</param>
            <param name="measVal">MeasVal to return</param>
            <returns>0 if ok, else error code</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XDAQ_GetSignalListString(System.UInt64,System.Byte[],System.UIntPtr@,System.UIntPtr)">
            <summary>
            Reads the list of all active signals as XML document from the module. 
            The returned XML document will contain the signal references of all active signals. 
            Use <see cref="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XDAQ_GetAllMeasVals(System.UInt64,System.Int32,System.UIntPtr@,System.Double[],System.UIntPtr)"/> with the parameter <c>enabledSignalsOnly = 1</c> in order to get all correspending current measured values of the signals.
            </summary>
            <param name="devUuid">UUID of the device</param>
            <param name="data">XML data from device as byte array</param>
            <param name="dataLength">Length of data read</param>
            <param name="maxLength">Maximum size of data buffer</param>
            <returns>0 if ok, else error code</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XUTIL_GetText(System.Int32)">
            <summary>
            Gets a description of an error number.
            </summary>
            <param name="errorNumber">Error number.</param>
            <returns>Description of the error.</returns>
            <remarks>
            The return type is an IntPtr which has to be marshaled with
            <c>Marshal.PtrToStringAnsi()</c>, because it is originally a <c>const char *</c>
            and thus must not be freed by the GC.
            </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XUTIL_GetTextFromModule(System.UInt64,System.Int32)">
            <summary>
            Gets a description of an error number.
            </summary>
            <param name="devUuid">UUID of the module to get the description from.</param>
            <param name="errorNumber">Error number.</param>
            <returns>Description of the error.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XCOM_GetSyncReqrSrvLastErrDat(System.IntPtr@,System.UIntPtr@)">
            <summary>
            This function is used to retrieve the last answer that did not fit into the answer buffer of the request.
            The data is available until the next answer arrives that does not fit into the receiving buffer!
            </summary>
            <param name="data">Text data from device as byte array.</param>
            <param name="dataLength">Length of data in bytes.</param>
            <returns>0 if ok, else error code.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XCOM_GetSyncReqrSrvLastErrDatByUuid(System.UInt64,System.IntPtr@,System.UIntPtr@)">
            <summary>
            This function is used to retrieve the last answer that did not fit into the answer buffer of the request for the given module.
            The data is available until the next answer arrives that does not fit into the receiving buffer!
            </summary>
            <param name="devUuid">UUID of the module to get the text data from.</param>
            <param name="data">Text data from device as byte array.</param>
            <param name="dataLength">Length of data in bytes.</param>
            <returns>0 if ok, else error code.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XPAR_GetLastErrMsg(System.IntPtr@,System.UIntPtr@)">
            <summary>
            Gets the last error reply in XML 
            </summary>
            <param name="data">XML reply with last error</param>
            <param name="dataLength">Length of data in bytes</param>
            <returns>0 if ok, else error code</returns>
            <remarks>
            Attention: this method is not reentrant. 
            </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XPAR_GetLastErrMsgByUuid(System.UInt64,System.IntPtr@,System.UIntPtr@)">
            <summary>
            Gets the last error reply in XML according to the UUID.
            </summary>
            <param name="devUuid">UUID of the module to get the last error message XML from.</param>
            <param name="data">XML reply with last error</param>
            <param name="dataLength">Length of data in bytes</param>
            <returns>0 if ok, else error code</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XUTIL_GetUnitNameFromCode(System.UInt32)">
            <summary>
            Returns the the corresponding unit name to a physical unit code.
            </summary>
            <param name="unitCode">Code of the unit</param>
            <returns>Unit name. An UTF-8 string. Empty string if unit code is unknown</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XUTIL_GetUnitCodeFromName(System.IntPtr)">
            <summary>
            Returns the the corresponding unit code to a physical unit name
            </summary>
            <param name="unitName">Name of the unit as an UTF-8 string. Non ASCII characters may also be encoded as  decimal or hexadecimal character reference</param>
            <returns>Unit code > 0 if ok, or <see cref="F:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.PHYSUNIT_NOT_FOUND"/> if unit is unknown</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XCTRL_SetLedMode(System.UInt64,System.UInt32,System.UInt32)">
            <summary>
            Switches LED operating mode for a module or a specific connector of a module
            </summary>
            <param name="devUuid">UUID of the device</param>
            <param name="ledNo">Number of the LED: 0=Module LED, 1..n connector LED</param>
            <param name="mode">LED operating mode: 0=normal, 1=green blinking, 2=orange blinking, 3=red blinking</param>
            <returns>0 if ok, else error code</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XSYS_DoRestartSystem(System.UInt64,System.Int32,System.Boolean)">
            <summary>
            Restarts the module.
            </summary>
            <param name="devUuid">UUID of the device</param>
            <param name="reserved">This parameter is not used.</param>
            <param name="useUdp"><c>true</c> to use UDP (only for firmware lower than 2.2), <c>false</c> to use TCP/IP (which is the default).</param>
            <returns>0 if ok, else error code</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XCTRL_Execute(System.UInt64,System.String,System.UInt64,System.UIntPtr,System.String[])">
            <summary>
            Executes a control, which does not retrieve data, e.g. "SETDIGITALIO".
            </summary>
            <param name="devUuid">UUID of the device</param>
            <param name="controlName">Name of the control to be executed</param>
            <param name="timestamp">Not supported, so always set it to <c>0</c></param>
            <param name="argCount">Number of parameters in the <paramref name="argList"/></param>
            <param name="argList">Required parameters for the control <paramref name="controlName"/> as string array.</param>
            <returns>0 if ok, else error code</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XCTRL_ExecuteXMLPars(System.UInt64,System.String,System.UInt64,System.String,System.Byte[],System.UIntPtr@,System.UIntPtr)">
            <summary>
            Executes a control, which retrieves <paramref name="data"/> as result, e.g. "GETDIGITALIO".
            </summary>
            <param name="devUuid">UUID of the device</param>
            <param name="controlName">Name of the control to be executed</param>
            <param name="timestamp">Not supported, so always set it to <c>0</c></param>
            <param name="xmlArgs">Required parameters for the control <paramref name="controlName"/> as xml string</param>
            <param name="data">XML data from device as byte array</param>
            <param name="dataLength">Length of data read</param>
            <param name="maxLength">Maximum size of data buffer</param>
            <returns></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XSTAT_GetModuleStatusString(System.UInt64,System.Byte[],System.UIntPtr@,System.UIntPtr)">
            <summary>
            Gets the module status XML.
            </summary>
            <param name="devUuid">UUID of the device</param>
            <param name="data">XML data from device as byte array</param>
            <param name="dataLength">Length of data in bytes</param>
            <param name="maxLength">Maximum size of data buffer</param>
            <returns>0 if ok, else error code</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XSTAT_GetErrorStatusString(System.UInt64,System.Byte[],System.UIntPtr@,System.UIntPtr)">
            <summary>
            Gets the module error status XML.
            </summary>
            <param name="devUuid">UUID of the device.</param>
            <param name="data">XML data from device as byte array.</param>
            <param name="dataLength">Length of data in bytes.</param>
            <param name="maxLength">Maximum size of data buffer.</param>
            <returns>0 if ok, else error code.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XPAR_ActivateAllDefaultSettings(System.UInt64)">
            <summary>
            Activate the complete default settings if available.
            </summary>
            <param name="devUuid">UUID of the device.</param>
            <returns>0 if ok, else error code.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XCTRL_ActivateTeds(System.UInt64,System.UInt32,System.UInt64)">
            <summary>
            Activate the TEDS settings of the chip in the amplifier.
            </summary>
            <param name="devUuid">Device identification</param>
            <param name="connectorNr">Connector number.</param>
            <param name="timestamp">Timestamp for synchronization (0 for immediate execution).</param>
            <returns>0 if ok, else error code.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XPAR_ReadTedsBinary(System.UInt64,System.UInt32,System.Text.StringBuilder,System.Byte[],System.UIntPtr@,System.UIntPtr)">
            <summary>
            Read the binary TEDS from the chosen TEDS chip.
            </summary>
            <param name="devUuid">Device identification</param>
            <param name="connectorNr">Connector number.</param>
            <param name="tid">TID of the TEDS chip (fixed size of 16byte + 1byte, Null terminated)</param>
            <param name="data">Data buffer for the binary TEDS data.</param>
            <param name="dataLen">Length of data read</param>
            <param name="maxLen">Max. length of data to read</param>
            <returns>Error code.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XPAR_WriteTedsBinary(System.UInt64,System.UInt32,System.Text.StringBuilder,System.Byte[],System.UIntPtr)">
            <summary>
            Write the binary TEDS to the chosen TEDS chip.
            </summary>
            <param name="devUuid">Device identification</param>
            <param name="connectorNr">Connector number.</param>
            <param name="tid">TID of the TEDS chip (fixed size of 16byte + 1byte, Null terminated)</param>
            <param name="data">Data buffer with the binary TEDS data.</param>
            <param name="size">Size of the binary TEDS data.</param>
            <returns>Error code.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.HBM_XSYS_ReadFile(System.UInt64,System.String,System.String,System.String)">
            <summary>
            Read a file from the module specified by UUID and save it to DstPath.
            </summary>
            <param name="devUuid">Device identification.</param>
            <param name="fileName">The name of the file to read (without path).</param>
            <param name="srcPath">The path in the module to read from.</param>
            <param name="dstPath">The path on the PC to write the file to.</param>
            <returns>Error code.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.GetErrorTxt(System.UInt64,System.Int32)">
            <summary>
            Gets the descriptive text of the error code.
            </summary>
            <param name="devUuid">The UUID of the module to get the description from (0 for module independent).</param>
            <param name="errorNo">The error code.</param>
            <returns>Description of the error.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.GetLastXmlProblems(System.UInt64)">
            <summary>
            Gets the problems of the last xml operation.
            </summary>
            <param name="uuid">The UUID.</param>
            <remarks>
            The caller must synchronize this method with the call of the previous xml operation.
            </remarks>
            <returns><c>List</c> of problems of the last xml operation</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.ConvertToUtf8String(System.IntPtr)">
            <summary>
            Converts unmanaged string data given by the pointer which points to the string data
            into a managed UTF-8 encoded string.
            </summary>
            <param name="ptr">Pointer which points to the string</param>
            <returns>Converted UTF-8 string, or <c>String.Empty</c> if no data is available (or the given pointer is a null pointer)</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.ReadDeviceStatusXmlOld(System.UInt64)">
            <summary>
            Reads the device status XML the old and not recommended way.
            </summary>
            <param name="uuid">The UUID.</param>
            <returns>The device status XML.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.BuildLogContextByUUid(System.UInt64)">
            <summary>
            Builds log context by the given UUID of the device.
            </summary>
            <param name="devUuid">The UUID of the device.</param>
            <returns>New instance of <see cref="T:Hbm.Api.Logging.Logger.LogContext"/> to use for log.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.DataConverter.CalibrationCertificateConverter.CreateCertificatePdf(System.UInt64,System.String)">
            <summary>
                Get the calibration certificate from the module, process to PDF and return the PDF file names.
            </summary>
            <param name="uuid">The UUID of the module.</param>
            <param name="outputDirectory">The directory to store the PDF files.</param>
            <returns>An array of PDF file names or <c>null</c> if none.</returns>
            <exception cref="T:Hbm.Api.Common.Exceptions.DeviceNotConnectedException">The device is not connected.</exception>
            <exception cref="T:Hbm.Api.QuantumX.Exceptions.FrameworkDllException">Something went wrong reading internal ZIP file from the device.</exception>
            <exception cref="T:IBR.XpdfException">Something went wrong with the PDF creation.</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.DataConverter.CalibrationCertificateConverter.GenerateCalibrationCertificateFileInfo(System.String,System.String[],Hbm.Api.Common.Enums.ReleaseType)">
            <summary>Generates the calibration certificate file information list.</summary>
            <param name="deviceUniqueId">The unique device identifier.</param>
            <param name="pdfFilePaths">The PDF file names (full paths).</param>
            <param name="releaseType">Type of the certificate release.</param>
            <returns>The list of calibration certificate information.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.DataConverter.CalibrationCertificateConverter.SortByCalibrationDate(System.Collections.Generic.List{System.String})">
            <summary>Sorts the file names by calibration date.</summary>
            <param name="fileNames">The file names.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.DataConverter.CalibrationCertificateConverter.GetDateFromFileName(System.String)">
            <summary>Gets the date from the file name.</summary>
            <param name="fileName">Name of the file.</param>
            <returns>The date from the file name or <c>DateTime.MinValue</c> if no date was found.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.DataConverter.CalibrationCertificateConverter.DeleteFileSilently(System.String)">
            <summary>Deletes the file silently.</summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.DataConverter.CalibrationCertificateConverter.AddCalibrationCertificateFileInfo(System.Collections.Generic.IList{Hbm.Api.Common.Entities.CalibrationCertificateFileInfo},System.String,System.String)">
            <summary>Adds the calibration certificate file information.</summary>
            <param name="calCertFileInfoList">The file information list.</param>
            <param name="deviceUniqueId">The device unique identifier.</param>
            <param name="pdfFilePath">The PDF file path.</param>
        </member>
        <member name="T:Hbm.Api.QuantumX.DataConverter.QuantumXDeviceConverter">
            <summary>
            Converter for converting a <see cref="T:Hbm.Api.Scan.Entities.Device"/> into a <see cref="T:Hbm.Api.QuantumX.QuantumXDevice"/>
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.DataConverter.QuantumXDeviceConverter.HBM_PROTOCOL_NAME">
            <summary>
            Name of the hbm protocol of the device for direct connecting with the device.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.DataConverter.QuantumXDeviceConverter.Convert(Hbm.Api.Scan.Entities.Device)">
            <summary>
            Converts a <see cref="T:Hbm.Api.Scan.Entities.Device"/> into a <see cref="T:Hbm.Api.QuantumX.QuantumXDevice"/>
            </summary>
            <remarks>
            All informations which are not available after scan will be added after connecting to the device. 
            </remarks>
            <param name="scanDevice">Device entity from Hbm.API.Scan</param>
            <returns>Instance of QuantumXDevice, containing the converted data</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.DataConverter.QuantumXDeviceConverter.CreateServices(System.Int32,System.Collections.Generic.IEnumerable{Hbm.Api.Scan.Entities.Service})">
            <summary>
            Selects the <see cref="T:Hbm.Api.Scan.Entities.Service"/> items according to the given interfaceIndex 
            and converts them to a new <see cref="T:Hbm.Api.Common.Entities.Service"/> list
            </summary>
            <param name="interfaceIndex">Index to select the required scanServices</param>
            <param name="scanServices">List of all available <see cref="T:Hbm.Api.Scan.Entities.Service"/> items for the device</param>
            <returns></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.DataConverter.QuantumXDeviceConverter.CreateConnectionInfo(System.Collections.Generic.List{Hbm.Api.QuantumX.QuantumXAdapter},System.Boolean)">
            <summary>
            Creates a new connection info instance, generated from the given list of adapters.
            If multiple services with hbm protocols are available, then adapters with direct connection (without routers like CX2x) will be preferred.
            </summary>
            <param name="adapters">List of adapters of type <see cref="T:Hbm.Api.QuantumX.QuantumXAdapter" /></param>
            <param name="isCX22Device">When set to <c>true</c> identifies a CX22 device.</param>
            <returns>
            New <see cref="T:Hbm.Api.Common.Entities.ConnectionInfos.StreamingConnectionInfo" /> instance for the device
            </returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.DataConverter.QuantumXDeviceConverter.FindPortByProtocol(Hbm.Api.QuantumX.QuantumXAdapter,System.String)">
            <summary>
            Find the port on the given adapter according to given protocol name.
            </summary>
            <param name="adapter"><see cref="T:Hbm.Api.QuantumX.QuantumXAdapter"/> instance, containing the services</param>
            <param name="protocolName">Name of the protocol as search criteria</param>
            <returns>Port of the found protocol</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Enums.ConnectorType">
            <summary>
            QuantumX Connector Type
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Enums.DigitalIoInputThreshold">
            <summary>
            Digital I/O input threshold.
            </summary>
            <remarks>
            The values of the enum match the QuantumX specific values for the Digital I/O input threshold in XML
            (corresponding to the enum enDigitalThreshold in HBM_QX_Framework.h).
            </remarks>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.DigitalIoInputThreshold.Low">
            <summary>
            Low threshold
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.DigitalIoInputThreshold.High">
            <summary>
            High threshold
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Enums.FrameworkDllResultCodes">
            <summary>
                Framework Dll Wrapper result codes
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.FrameworkDllResultCodes.ErrParOutofrange">
            Parameterwert ausserhalb des gueltigen Bereiches
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.FrameworkDllResultCodes.ErrParInvalidattr">
            Falsches Attribut
        </member>
        <member name="T:Hbm.Api.QuantumX.Enums.FrameworkError">
            <summary>
            Possible QuantumX framework error(negative) and warning(positive) codes 
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Enums.LedBlinking">
            <summary>
            LED operating mode for blinking of module or connector LEDs.
            </summary>
            <remarks>
            The values of the enumeration must match the ledMode parameter values of 
            the <see cref="M:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.SetLedMode(System.UInt64,System.Int32,Hbm.Api.QuantumX.Enums.LedBlinking)"/>
            in <see cref="T:Hbm.Api.QuantumX.Core.FrameworkDllWrapper"/> (HBM_XCTRL_SetLedMode).
            
            The value to turn off blinking is not part of this enumeration (because it is no blinking), 
            instead it is defined as the constant <see cref="F:Hbm.Api.QuantumX.Core.FrameworkDllWrapper.DISABLE_LED_BLINKING"/>.
            </remarks>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.LedBlinking.Green">
            <summary>
            Green blinking
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.LedBlinking.Orange">
            <summary>
            Orange blinking
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.LedBlinking.Red">
            <summary>
            Read blinking
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Enums.LedMode">
            <summary>
                LED modes for <c>FlashLed</c>.
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.LedMode.Normal">
            <summary>Reset the LED mode to normal.</summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.LedMode.FlashGreen">
            <summary>Let the specified LED flashing green.</summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.LedMode.FlashOrange">
            <summary>Let the specified LED flashing orange.</summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.LedMode.FlashRed">
            <summary>Let the specified LED flashing red.</summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Enums.ModuleStatusId">
            <summary>
                Specifies the module status IDs.
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.ModuleStatusId.StatusConnected">
            <summary>
                Information whether a transducer is connected or not (<c>Value=1 or 0</c> or bit in
                <c>STATUS_ID_BITS_CONNECTOR</c>).
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.ModuleStatusId.StatusParamAdjustFinishedAfterBoot">
            <summary>
                Information whether all connectors are parameterized after boot (<c>Value=1 or 0</c> or bit in
                <c>STATUS_ID_BITS_CONNECTOR</c>).
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.ModuleStatusId.StatusTeds">
            <summary>Information about a TEDS chip.</summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.ModuleStatusId.StatusBitMeasuringValueInvalid">
            <summary>
                Information whether the measurement values are valid or not (<c>Value=1 or 0</c> or bit in
                <c>STATUS_ID_BITS_CONNECTOR</c>).
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.ModuleStatusId.StatusBitMeasuringValueInOverflow">
            <summary>
                Information whether the measurement values are overflows or not (<c>Value=1 or 0</c> or bit in
                <c>STATUS_ID_BITS_CONNECTOR</c>).
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.ModuleStatusId.StatusParamBusy">
            <summary>
                Information whether the XML parametrization of analog inputs is in progress or not (<c>Value=1 or 0</c> or
                bit in <c>STATUS_ID_BITS_CONNECTOR</c>).
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.ModuleStatusId.StatusAdjustBusy">
            <summary>
                Information whether the adjustment is in progress or not after connecting or changing sensor parameters (bit
                in <c>STATUS_ID_BITS_CONNECTOR</c>).
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.ModuleStatusId.StatusAnalogInSimulationActive">
            <summary>
                Information whether the test signal is active on the analog input or not (bit in
                <c>STATUS_ID_BITS_CONNECTOR</c>).
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.ModuleStatusId.StatusAutoAdjustAutoCalibrateInhibited">
            <summary>
                Information whether auto adjustment or auto calibration is temporarily disabled or not (bit in
                <c>STATUS_ID_BITS_CONNECTOR</c>)
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.ModuleStatusId.StatusBitControlResetChargeAmplifier">
            <summary>
                Information whether the control ResetChargeAmplifier is enabled or not (bit in <c>STATUS_ID_BITS_CONNECTOR</c>
                )
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.ModuleStatusId.StatusBitControlExtCalSignal">
            <summary>Information whether the control ExtCalSignal is enabled or not (bit in <c>STATUS_ID_BITS_CONNECTOR</c>)</summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.ModuleStatusId.StatusBitControlShuntCalibration">
            <summary>Information whether the control ShuntCalibration is enabled or not (bit in <c>STATUS_ID_BITS_CONNECTOR</c>)</summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.ModuleStatusId.StatusBitControlShuntCalibration2">
            <summary>Information whether the control ShuntCalibration is enabled or not (bit in <c>STATUS_ID_BITS_CONNECTOR</c>)</summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.ModuleStatusId.StatusIdBitsConnector">
            <summary>Disjunction of all status IDs (bits like the flags above).</summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.ModuleStatusId.StatusBitTedsPresent">
            <summary>Information whether a TEDS is present or not (bit in <c>STATUS_ID_BITS_CONNECTOR</c>).</summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.ModuleStatusId.StatusTime">
            <summary>The current time of the module (<c>Value is UInt64</c>).</summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.ModuleStatusId.StatusModuleInSync">
            <summary>Information whether module is in sync or not (<c>Value=1 or 0</c>)</summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.ModuleStatusId.StatusModuleBusy">
            <summary>Information whether module is busy or not (<c>Value=1 or 0</c>)</summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Enums.OriginOfNameType">
            <summary>
            Type of the origin of a name.
            </summary>
            <remarks>
            The values of the enum match the QuantumX specific values for OriginOfName in xml
            There are no additional values, because there is no counterpart in the common part of the api. 
            </remarks>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.OriginOfNameType.Default">
            <summary>
            Default name
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.OriginOfNameType.User">
            <summary>
            Name is set by user
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.OriginOfNameType.Teds">
            <summary>
            Name is set by TEDS
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.OriginOfNameType.Unknown">
            <summary>
            Unknown source of name
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Enums.OutputType">
            <summary>
            Output type of an analog output connector
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.OutputType.Voltage">
            <summary>
            Voltage 
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Enums.QuantumXCarrierFrequencyType">
            <summary>
            Carrier frequency type of the QuantumX.
            
            The values of the enum match the QuantumX specific values for the excitation frequency in xml
            (corresponding to the enum enExcitationFreq in HBM_QX_Framework.h).
            
            The additional values must match the part of type relevant values of the 
            enumeration <see cref="T:Hbm.Api.SensorDB.Enums.CarrierFrequencyType"/>.
            The direct frequency values in Hz are part of the enumeration <see cref="T:Hbm.Api.QuantumX.Enums.QuantumXCarrierFrequencyValue"/>.
            </summary>
            <remarks>
            HBM_QX_Framework.h:
            <code>
            enum enExcitationFreq
            {
                EXCFREQ_AUTO = 0,       // type relevant
                EXCFREQ_DC = 1,         // type relevant
                EXCFREQ_75HZ = 2,
                EXCFREQ_600HZ = 3,
                EXCFREQ_1200HZ = 4,
                EXCFREQ_4800HZ = 5,
                EXCFREQ_9600HZ = 6,
                EXCFREQ_AUTO_AC = 7,    // type relevant
                EXCFREQ_225HZ = 8,
                EXCFREQ_UNKNOWN = ENUM_UNKNOWN
            };
            </code>
            </remarks>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXCarrierFrequencyType.Auto">
            <summary>
            Auto
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXCarrierFrequencyType.Dc">
            <summary>
            DC
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXCarrierFrequencyType.AutoAc">
            <summary>
            Auto AC
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Enums.QuantumXCarrierFrequencyValue">
            <summary>
            Carrier frequency value of the QuantumX.
            
            The values of the enum match the QuantumX specific values for the excitation frequency in xml
            (corresponding to the enum enExcitationFreq in HBM_QX_Framework.h).
            
            The additional values must match the part of the frequency values of the 
            enumeration <see cref="T:Hbm.Api.SensorDB.Enums.CarrierFrequencyType"/>, which directly define a frequency value.
            The type relevant information is part of the enumeration <see cref="T:Hbm.Api.QuantumX.Enums.QuantumXCarrierFrequencyType"/>.
            </summary>
            <remarks>
            HBM_QX_Framework.h:
            <code>
            enum enExcitationFreq
            {
                EXCFREQ_AUTO = 0,       
                EXCFREQ_DC = 1,         
                EXCFREQ_75HZ = 2,       // value relevant
                EXCFREQ_600HZ = 3,      // value relevant
                EXCFREQ_1200HZ = 4,     // value relevant
                EXCFREQ_4800HZ = 5,     // value relevant
                EXCFREQ_9600HZ = 6,     // value relevant 
                EXCFREQ_AUTO_AC = 7,     
                EXCFREQ_225HZ = 8,      // value relevant
                EXCFREQ_UNKNOWN = ENUM_UNKNOWN
            };
            </code>
            </remarks>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXCarrierFrequencyValue.Hz75">
            <summary>
            75 Hz
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXCarrierFrequencyValue.Hz600">
            <summary>
            600 Hz
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXCarrierFrequencyValue.Hz1200">
            <summary>
            1200 Hz
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXCarrierFrequencyValue.Hz4800">
            <summary>
            4800 Hz
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXCarrierFrequencyValue.Hz9600">
            <summary>
            9600 Hz
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXCarrierFrequencyValue.Hz225">
            <summary>
            225 Hz
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Enums.QuantumXDataRateDomainType">
            <summary>
            Type of the data rate domain.
            
            The values of the enum match the QuantumX specific values for the xml elements 
            <see cref="F:Hbm.Api.QuantumX.Constants.XmlTag.SYSTEM_DATARATEDOMAIN_REQUEST"/> and 
            <see cref="F:Hbm.Api.QuantumX.Constants.XmlTag.SYSTEM_DATARATEDOMAIN_CURRENTSTATE"/> in the system view of the device.
            
            The additional values must match the values of the 
            enumeration <see cref="T:Hbm.Api.Common.Enums.DataRateDomainType"/>.
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXDataRateDomainType.Classic">
            <summary>
            Classic data rate domain
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXDataRateDomainType.Decimal">
            <summary>
            Decimal data rate domain
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXDataRateDomainType.Binary">
            <summary>
            Binary data rate domain
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Enums.LowpassFilterCharacteristic">
            <summary>
            QuantumX supported filter characteristics for lowpass filters
            </summary>
            <remarks>
            The values of the enum items are the same as  
            the filter characteristic numbers returned by 
            the xml of the device (e.g. <c>&lt;FiltCharact&gt;1&lt;/FiltCharact&gt;</c> for Bessel). 
            </remarks>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.LowpassFilterCharacteristic.Bessel">
            <summary>
            Bessel IIR lowpass filter
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.LowpassFilterCharacteristic.Butterworth">
            <summary>
            Butterworth IIR lowpass filter
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.LowpassFilterCharacteristic.LinearPhase">
            <summary>
            Linear Phase FIR lowpass filter
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.LowpassFilterCharacteristic.ButterworthFir">
            <summary>
            Butterworth FIR lowpass filter
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Enums.QuantumXDirectionType">
            <summary>
            Used for conversion into the digital IO direction type of the QuantumX.
            
            The values of the enum match the common values of the <see cref="T:Hbm.Api.Common.Enums.DirectionType"/>.
            The additional values must match the string content of the additional connector's view tags 
            <see cref="F:Hbm.Api.QuantumX.Constants.XmlTag.ADDCONN_DIGITALIO_MODE_DIGITALIN"/> or <see cref="F:Hbm.Api.QuantumX.Constants.XmlTag.ADDCONN_DIGITALIO_MODE_DIGITALOUT"/> in xml.
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXDirectionType.DigitalIn">
            <summary>
            Digital input. The value matches the member <see cref="F:Hbm.Api.Common.Enums.DirectionType.In"/>.
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXDirectionType.DigitalOut">
            <summary>
            Digital output. The value matches the member <see cref="F:Hbm.Api.Common.Enums.DirectionType.Out"/>.
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Enums.QuantumXEnableConnectorType">
            <summary>
            Used for enabling a connector into a specific connector type of the QuantumX.
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXEnableConnectorType.Default">
            <summary>
            Use the default connector type, which depends on the hardware
            (<see cref="T:Hbm.Api.QuantumX.Connectors.QuantumXCanConnector"/> for MX471,
            <see cref="T:Hbm.Api.QuantumX.Connectors.QuantumXAnalogOutConnector"/> for other QX additional connector,
            otherwise an <see cref="T:Hbm.Api.QuantumX.Connectors.QuantumXAnalogInConnector"/>).
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXEnableConnectorType.CanBus">
            <summary>
            Use a <see cref="T:Hbm.Api.QuantumX.Connectors.QuantumXCanConnector"/> (e.g. on the first connector of a MX840).
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Enums.QuantumXPolarityType">
            <summary>
            Polarity type of the QuantumX.
            
            The values of the enum match the QuantumX specific values for the polarity in xml
            (corresponding to the enum enPolarity in HBM_QX_Framework.h).
            
            The additional values must match the values of the 
            enumeration <see cref="T:Hbm.Api.SensorDB.Enums.PolarityType"/>.
            </summary>
            <remarks>
            HBM_QX_Framework.h:
            <code>
            enum enPolarity
            {
            	POLARITY_NOTINVERTED = 0,
            	POLARITY_INVERTED    = 1,
            	POLARITY_UNKNOWN
            };
            </code>
            </remarks>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXPolarityType.NotInverted">
            <summary>
            Not inverted polarity => NotInverted
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXPolarityType.Inverted">
            <summary>
            Inverted polarity => Inverted
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Enums.QuantumXPtType">
            <summary>
            Pt type of the QuantumX.
            
            The values of the enum match the QuantumX specific values for the PT Type in xml
            (corresponding to the enum enPtType in HBM_QX_Framework.h).
            
            The additional values must match the nominal resistance according to the PtType.
            </summary>
            <remarks>
            HBM_QX_Framework.h:
            <code>
            //! PT type
            enum enPtType {
                PTTYPE_10 = 0,
                PTTYPE_100 = 1,
            	PTTYPE_500 = 2,
            	PTTYPE_1000 = 3,
                PTTYPE_UNKNOWN = ENUM_UNKNOWN
            };
            </code>
            </remarks>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXPtType.Pt10">
            <summary>
            Pt10 (PTTYPE_10) 
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXPtType.Pt100">
            <summary>
            Pt100 (PTTYPE_100) 
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXPtType.Pt500">
            <summary>
            Pt500 (PTTYPE_500) 
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXPtType.Pt1000">
            <summary>
            Pt1000 (PTTYPE_1000) 
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Enums.QuantumXBridgeType">
            <summary>
            Bridge type of the QuantumX.
            
            The values of the enum match the QuantumX specific values for BridgeType in xml
            (corresponding to the enum enBridgeType in HBM_QX_Framework.h).
            
            The additional values must match the values of the 
            enumeration <see cref="T:Hbm.Api.SensorDB.Enums.BridgeType"/>.
            </summary>
            <remarks>
            HBM_QX_Framework.h:
            <code>
            //! bridge sensor types
            enum enBridgeType {
                BRIDGETYPE_QUARTER = 1,
                BRIDGETYPE_HALF = 2,
            	BRIDGETYPE_FULL = 4,
            	BRIDGETYPE_UNKNOWN = ENUM_UNKNOWN
            };
            </code>
            </remarks>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXBridgeType.FullBridge">
            <summary>
            Full bridge 
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXBridgeType.HalfBridge">
            <summary>
            Half bridge
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXBridgeType.QuarterBridge">
            <summary>
            Quarter bridge
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Enums.QuantumXTedsUsageMode">
            <summary>
            TEDS usage mode of the QuantumX.
            
            The values of the enum match the QuantumX specific values for the TEDS usage mode in xml
            (corresponding to the enum enTedsUsage in HBM_QX_Framework.h).
            
            The additional values must match the values of the 
            enumeration <see cref="!:Hbm.Api.SensorDB.Enums.TedsUsageMode"/>.
            </summary>
            <remarks>
            HBM_QX_Framework.h:
            <code>
            //TEDS usage
            enum enTedsUsage
            {
                TEDSUSAGE_IGNORE = 0,
                TEDSUSAGE_AUTO = 2,
                TEDSUSAGE_REQUIRED = 3,
                TEDSUSAGE_UNKNOWN = ENUM_UNKNOWN //(MAX_INT32)
            };
            </code>
            </remarks>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXTedsUsageMode.NotSupported">
            <summary>
            TEDS usage is not supported.
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXTedsUsageMode.Ignore">
            <summary>
            Ignore the TEDS entirely.
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXTedsUsageMode.UseIfAvailable">
            <summary>
            Use the TEDS automatically when it is available.
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXTedsUsageMode.UseRequired">
            <summary>
            Use the TEDS automatically and it is required.
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Enums.QuantumXSignal2Type">
             <summary>
             Signal2 type of the QuantumX.
             
             The values of the enum match the QuantumX specific values for the signal2 type in xml
             (corresponding to the field S2enable in the struct stCounter in HBM_QX_Framework.h).
             
             The additional values must match the values of the 
             enumeration <see cref="T:Hbm.Api.SensorDB.Enums.Signal2Type"/>.
             </summary>
             <remarks>
             HBM_QX_Framework.h:
             <code>
             //! Parameter of counting sensor
            	struct stCounter {
            		//! 0: Index channel inactive
            		//! 1: Index channel active. Relevant for rotary encoders. With each revolution, the counter is being reset. See IndexDivisor.
            		int IndexEnable;
            		//! Index channel divider. Relevant for rotary encoders. The counter is being reset every IndexDivisor revolution. IndexDivisor=0 has the same effect as IndexDivisor=1.
            		unsigned int IndexDivisor;
            		//! 0: Signal S2 disabled
            		//! 1: Signal S2 enabled. For sensors with A second signal with 90 degree displacement against S1. Allows to detect the direction. Might increase the accuracy.
            		//! 2: Signal S2 is used as static signal to determine direction.
            		int S2enable;
            		//! 0: Signal F4 disabled
            		//! 1: Signal F4 enabled. If S2 signal is enabled, this enables 4-slope evaluation. Each slope is being counted.
            		//! The signal has the fourfold value. Increases the resolution
            		int F4enable;
            		//! Number of pulses per revolution
            		unsigned int PulsesPerRound;
            };
             </code>
             </remarks>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXSignal2Type.Off">
            <summary>
            0: Signal S2 disabled
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXSignal2Type.Dynamic">
            <summary>
            Signal S2 enabled. For sensors with A second signal with 90 degree displacement against S1. Allows to detect the direction. Might increase the accuracy.
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXSignal2Type.Static">
            <summary>
            Signal S2 enabled. Signal S2 is used as static signal to determine direction.
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Enums.QuantumXSsiCodingType">
            <summary>
            SSI coding type of the QuantumX.
            
            The values of the enum match the QuantumX specific values for the SSI coding type in xml
            (corresponding to the enum enSSICoding in HBM_QX_Framework.h).
            
            The additional values must match the values of the 
            enumeration <see cref="T:Hbm.Api.SensorDB.Enums.SsiCodingType"/>.
            </summary>
            <remarks>
            HBM_QX_Framework.h:
            <code>
            //! Encoding type for SSI Sensors
            enum enSSICoding {
                CODING_GRAY = 0,
                CODING_DUAL = 1,
            	CODING_UNKNOWN = ENUM_UNKNOWN
            };
            </code>
            </remarks>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXSsiCodingType.Gray">
            <summary>
            Gray code (CODING_GRAY)
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXSsiCodingType.Dual">
            <summary>
            Binary code (CODING_DUAL)
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Enums.QuantumXSyncModeType">
            <summary>
            Used for conversion into the sync mode type of the QuantumX.
            
            The values of the enum match the common values of the <see cref="T:Hbm.Api.Common.Enums.SyncModeType"/>.
            The additional values must match the string content of the system's view tag <see cref="F:Hbm.Api.QuantumX.Constants.XmlTag.SYSTEM_SYNCSTATUS"/> in xml.
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXSyncModeType.Single">
            <summary>
            Standalone measurement. The value matches the member <see cref="F:Hbm.Api.Common.Enums.SyncModeType.Standalone"/>.
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXSyncModeType.Slave">
            <summary>
            Start of measurement is triggered by another device (which acts as master). The value matches the member <see cref="F:Hbm.Api.Common.Enums.SyncModeType.Slave"/>.
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXSyncModeType.SyncMaster">
            <summary>
            This device triggers the start of a measurement for other devices of this device family. The value matches the member <see cref="F:Hbm.Api.Common.Enums.SyncModeType.Master"/>.
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Enums.QuantumXTestSignalActiveValueType">
            <summary>
            Defines the values for the value parameter of <see cref="T:Hbm.Api.QuantumX.Statuses.QuantumXChannelTestSignalActiveStatus"/>.
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXTestSignalActiveValueType.NotSupported">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXTestSignalActiveValueType.NotActive">
            <summary>
            The test signal is not active.
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXTestSignalActiveValueType.Active">
            <summary>
            The test signal is active.
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Enums.QuantumXThermoCoupleType">
             <summary>
             Thermocouple type of the QuantumX.
             
             The values of the enum match the QuantumX specific values for the ThermocoupleType in xml
             (corresponding to the enum enPtType in HBM_QX_Framework.h).
             
             The additional values must match the thermocouple type according to the data field in the sensor database.
             </summary>
             <remarks>
             HBM_QX_Framework.h:
             <code>
             enum enTcType {
                 TCTYPE_B = 0, 
                 TCTYPE_E = 1,
                 TCTYPE_J = 2,
                 TCTYPE_K = 3,
                 TCTYPE_N = 4,
                 TCTYPE_R = 5,
                 TCTYPE_S = 6,
                 TCTYPE_T = 7,
                 TCTYPE_C = 8,
                 TCTYPE_UNKNOWN = ENUM_UNKNOWN
            };
             </code>
             </remarks>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXThermoCoupleType.B">
            <summary>
            Type B
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXThermoCoupleType.C">
            <summary>
            Type C
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXThermoCoupleType.E">
            <summary>
            Type E
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXThermoCoupleType.J">
            <summary>
            Type J
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXThermoCoupleType.K">
            <summary>
            Type K
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXThermoCoupleType.N">
            <summary>
            Type N
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXThermoCoupleType.R">
            <summary>
            Type R
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXThermoCoupleType.S">
            <summary>
            Type S
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.QuantumXThermoCoupleType.T">
            <summary>
            Type T
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Enums.TedsValidation">
            <summary>
                Values for <c>ModuleStatusID.STATUS_TEDS</c>.
                The values of the enum match the QuantumX specific values for the TEDS usage mode in xml
                (corresponding to the enum enTedsUsage in HBM_QX_Framework.h).
                The additional values must match the values of the
                enumeration <see cref="T:Hbm.Api.Common.Enums.TedsValidationValueType" />.
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.TedsValidation.TedsNotAvailable">
            <summary>A TEDS chip is not available.</summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.TedsValidation.TedsValid">
            <summary>A TEDS chip is available and OK.</summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.TedsValidation.TedsChecksumError">
            <summary>A TEDS chip is available but with checksum error (probably corrupt, maybe empty).</summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.TedsValidation.TedsDataEmpty">
            <summary>A TEDS chip is available but empty, no data.</summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.TedsValidation.TedsDataNotSupportedByConnector">
            <summary>A TEDS chip is available but TEDS data is not supported by connector.</summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.TedsValidation.TedsDataParamBusy">
            <summary>A TEDS chip is available but validation of TEDS parameters is busy (please wait).</summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.TedsValidation.TedsValidRequestPressureEqualAmp">
            <summary>Only MX590: The pressure setting in TEDS equals the sensor specification.</summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.TedsValidation.TedsValidRequestPressureBelowAmp">
            <summary>Only MX590: The pressure setting in TEDS is below the sensor specification.</summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.TedsValidation.TedsValidRequestPressureAboveAmp">
            <summary>Only MX590: The pressure setting in TEDS is above the sensor specification.</summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.TedsValidation.TedsDataNotUsed">
            <summary>A TEDS chip is present, not empty, not corrupted, but not used.</summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.TedsValidation.TedsUnknown">
            <summary>Unknown state.</summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Enums.XmlViewType">
            <summary>
            View types for reading/writing xml data from/to the device. 
            </summary>
            <remarks>
            The values of the enumeration must match the view parameter of the xml related methods 
            in <see cref="T:Hbm.Api.QuantumX.Core.FrameworkDllWrapper"/> (e.g. for HBM_XPAR_ReadXML)
            </remarks>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.XmlViewType.ComSettings">
            <summary>
            Communication and network settings view
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.XmlViewType.System">
            <summary>
            System view
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.XmlViewType.Connector">
            <summary>
            Connector View
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.XmlViewType.AdditionalFunction">
            <summary>
            Additional functions view
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.Enums.XmlViewType.AdditionalConnector">
            <summary>
            Additional connector view
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Exceptions.QuantumXException">
            <summary>
            Base class for QuantumX specific errors
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Exceptions.QuantumXException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Exceptions.QuantumXException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Exceptions.QuantumXException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.QuantumX.Exceptions.FrameworkDllException">
            <summary>
            This exception is thrown if the HBM_QX_Framework.dll has thrown an error 
            or a method call of the  HBM_QX_Framework.dll has delivered an error code.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Exceptions.FrameworkDllException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Exceptions.FrameworkDllException.#ctor(System.String)">
            <summary>
            Creates a new instance using the given error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Exceptions.FrameworkDllException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the given error message and the inner exception.
            </summary>
            <param name="message">Message of the error</param>
            <param name="inner">Inner exception of the error</param>
        </member>
        <member name="T:Hbm.Api.QuantumX.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Properties.Resources.CalDataToXPDF_xslt">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
            &lt;!--
              ==================================================================================================
              Users of this style sheet:
              - MX Assistant (Daniel Rühmer)
              - Prüfmittelbau (Reiner Leiter, Bernhad Buschinger)
              - Werkskalibrierung (Reinhard Balasus)
              - DMP41 (Herbert Kitzing, Marco Schäck)
              - PMX (Detlef Cramm)
            
              ==================================================================================================
              Notes:
              - the file name will [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.QuantumXAdapter">
            <summary>
            Represents a network adapter of a QuantumX device
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXAdapter.RouterUUID">
            <summary>
            UUID of the router
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.QuantumXAdditionalFeatures">
            <summary>
            Class that holds all additional features of a QuantumXDevice.
            Additional features cover all public functions that are not  
            predetermined by the abstract functions of the Device class.
            </summary>
            <remarks>
            ATTENTION: All public methods must be synchronized to prevent multi threaded access of the same device.
            </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXAdditionalFeatures.#ctor(Hbm.Api.QuantumX.QuantumXDevice)">
            <summary>
            Create a new instance and initialize data
            </summary>
            <param name="quantumXDevice">QuantumXDevice that supports the additional features</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXAdditionalFeatures.DisableConnector(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.QuantumX.Connectors.QuantumXOffConnector@,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Disables the given connector <paramref name="connectorToDisable"/> on the device.
            An new <see cref="T:Hbm.Api.QuantumX.Connectors.QuantumXOffConnector"/> instance is generated and assigned 
            to the device. The <paramref name="connectorToDisable"/> connector is automatically 
            replaced by the new connector <paramref name="disabledConnector"/> in the connectors list of the device.
            </summary>
            <param name="connectorToDisable">Connector to be disabled on the module</param>
            <param name="disabledConnector">New instance of the disabled connector as further reference to the connector</param>
            <param name="problems">List of warnings and errors that occurred during disabling the connector</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXAdditionalFeatures.EnableConnector(Hbm.Api.QuantumX.Connectors.QuantumXOffConnector,Hbm.Api.Common.Entities.Connectors.Connector@,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@,Hbm.Api.QuantumX.Enums.QuantumXEnableConnectorType)">
            <summary>
            Enables the given <paramref name="offConnectorToEnable"/> connector on the device. 
            An new connector instance is generated at the position of the <paramref name="offConnectorToEnable"/> and is assigned to the device. 
            The <paramref name="offConnectorToEnable"/> connector is automatically 
            replaced by the new connector <paramref name="enabledConnector"/> in the connectors list of the device.
            </summary>
            <param name="offConnectorToEnable">Off connector to be enabled on the module</param>
            <param name="enabledConnector">Enabled connector (output parameter) of type <see cref="T:Hbm.Api.QuantumX.Connectors.QuantumXAnalogInConnector"/> 
            or <see cref="T:Hbm.Api.QuantumX.Connectors.QuantumXAnalogOutConnector"/> as further reference to the connector</param>
            <param name="problems">List of warnings and errors that occurred during enabling the connector</param>
            <param name="connectorType">Type of the connector when enabled (optional).</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXAdditionalFeatures.EnableExtendedSampleRateMode(System.Collections.Generic.List{Hbm.Api.QuantumX.Connectors.IQuantumXConnector},System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Enables the extended sample-rate mode for the given connectors of the current module.
            </summary>
            <param name="connectorsForExtendedSampleRate">The connectors for the extended sample-rate mode.</param>
            <param name="problems">List of warnings and errors that occurred during setting the extended sample-rate mode.</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c>.</returns>
            <remarks>
            To date only MX403, MX410 and MX411 are capable of the extended sample-rate mode.<para/>
            Only up to two connectors may be enabled, while all others will be disabled (turned off).
            </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXAdditionalFeatures.DisableExtendedSampleRateMode(System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Disables the extended sample-rate mode and re-enables the normal mode for all connectors of the current module.
            </summary>
            <param name="problems">List of warnings and errors that occurred during the operation.</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXAdditionalFeatures.EnableIsochronousDataTransfer(Hbm.Api.QuantumX.Signals.IQuantumXIsochronousSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Enables the Isochronous data transfer of a signal.
            </summary>
            <param name="signal">The signal to set the flag for.</param>
            <param name="problems">List of warnings and errors that occurred during setting the data-rate domain</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXAdditionalFeatures.DisableIsochronousDataTransfer(Hbm.Api.QuantumX.Signals.IQuantumXIsochronousSignal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Disables the Isochronous data transfer of a signal.
            </summary>
            <param name="signal">The signal to set the flag for.</param>
            <param name="problems">List of warnings and errors that occurred during setting the data-rate domain</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXAdditionalFeatures.SetDataRateDomain(Hbm.Api.Common.Enums.DataRateDomainType,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Set the given <paramref name="dataRateDomain"/> on the current module.
            IMPORTANT: The user must restart the module after successful execution, either manually or by calling <see cref="M:Hbm.Api.QuantumX.QuantumXAdditionalFeatures.Reboot"/>
            </summary>
            <param name="dataRateDomain">Data-rate domain type to be set on the module</param>
            <param name="problems">List of warnings and errors that occurred during setting the data-rate domain</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXAdditionalFeatures.SetDigitalIOInputThreshold(Hbm.Api.QuantumX.Enums.DigitalIoInputThreshold,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Sets the input threshold value for the digital I/O inputs.
            </summary>
            <param name="inputThreshold">The input threshold.</param>
            <param name="problems">List of warnings and errors that occurred during setting the threshold value.</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXAdditionalFeatures.GetDigitalIOInputThreshold">
            <summary>
            Gets the input threshold value for the digital I/O inputs.
            </summary>
            <returns>The input threshold.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXAdditionalFeatures.Reboot">
            <summary>
            Reboots the device.
            </summary>
            <exception cref="T:Hbm.Api.Common.Exceptions.DeviceNotConnectedException">Thrown if this device is not connected.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.CommunicationFailedException">Thrown if a communication error with the device has occurred.</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXAdditionalFeatures.EnableLedBlinking(Hbm.Api.QuantumX.Enums.LedBlinking)">
            <summary>
            (obsolete) Enables the LED blinking of the current module's LED.
            </summary>
            <param name="ledBlinking">Color of the LED blinking (optional), default is orange blinking.</param>
            <exception cref="T:Hbm.Api.Common.Exceptions.DeviceNotConnectedException">Thrown if this device is not connected.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.CommunicationFailedException">Thrown if a communication error with the device has occurred.</exception>
            <remarks>Obsolete: Please use common method Hbm.Api.Common.Entities.Device.FlashLed(...) instead.</remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXAdditionalFeatures.EnableLedBlinking(Hbm.Api.Common.Entities.Connectors.Connector,Hbm.Api.QuantumX.Enums.LedBlinking)">
            <summary>
            (obsolete) Enables the LED blinking of the given connector's LED.
            </summary>
            <param name="connector">Connector whose LED blinking will be enabled</param>
            <param name="ledBlinking">Color of the LED blinking (optional), default is orange blinking.</param>
            <exception cref="T:Hbm.Api.Common.Exceptions.UnknownConnectorException">Thrown when the connector does not belong to this device.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.DeviceNotConnectedException">Thrown if this device is not connected.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.CommunicationFailedException">Thrown if a communication error with the device has occurred.</exception>
            <remarks>Obsolete: Please use common method Hbm.Api.Common.Entities.Device.FlashLed(...) instead.</remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXAdditionalFeatures.DisableLedBlinking">
            <summary>
            (obsolete) Disables the LED blinking of the current module.
            </summary>
            <exception cref="T:Hbm.Api.Common.Exceptions.DeviceNotConnectedException">Thrown if this device is not connected.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.CommunicationFailedException">Thrown if a communication error with the device has occurred.</exception>
            <remarks>Obsolete: Please use common method Hbm.Api.Common.Entities.Device.FlashLed(...) instead.</remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXAdditionalFeatures.DisableLedBlinking(Hbm.Api.Common.Entities.Connectors.Connector)">
            <summary>
            (obsolete) Disables the LED blinking of the given connector's LED.
            </summary>
            <param name="connector">Connector whose LED blinking will be disabled</param>
            <exception cref="T:Hbm.Api.Common.Exceptions.UnknownConnectorException">Thrown when the connector does not belong to this device.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.DeviceNotConnectedException">Thrown if this device is not connected.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.CommunicationFailedException">Thrown if a communication error with the device has occurred.</exception>
            <remarks>Obsolete: Please use common method Hbm.Api.Common.Entities.Device.FlashLed(...) instead.</remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXAdditionalFeatures.GetXmlView(Hbm.Api.QuantumX.Enums.XmlViewType)">
            <summary>
            Reads the content for the given xml view from the device
            </summary>
            <param name="view">View to be retrieved as xml</param>
            <returns>Xml content of the view as <c>string</c> or <c>String.Empty</c> if the device doesn't support the view.</returns>
            <exception cref="T:Hbm.Api.Common.Exceptions.DeviceNotConnectedException">Thrown if this device is not connected.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.CommunicationFailedException">Thrown if a communication error with the device has occurred.</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXAdditionalFeatures.AssignXmlView(System.String,Hbm.Api.QuantumX.Enums.XmlViewType,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Writes the xml Connector view to the current device
            </summary>
            <param name="xmlViewContent"><c>String</c>, containing the complete xml view content to be assigned</param>
            <param name="view">Type of the view to which the <paramref name="xmlViewContent"/> belongs</param>
            <param name="problems">The warnings and errors that occurred during the assignment process.</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXAdditionalFeatures.TryFindConnectorIndex(System.Int32,System.Int32@)">
            <summary>
            Finds the index of the connector with the given position on the current device.
            </summary>
            <param name="connectorPosition">Position of the connector on the module</param>
            <param name="connectorIndex">Index of the connector in the connector list of the current device</param>
            <returns><c>true</c> if the index is found, else <c>false</c></returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.QuantumXDevice">
            <summary>
            Represents a QuantumX device
            </summary>
            <remarks>
            ATTENTION: All public methods must be synchronized using <see cref="P:Hbm.Api.Common.Entities.Device.SyncLock"/>,
            to prevent multi threaded access of the same device.
            </remarks>
        </member>
        <member name="F:Hbm.Api.QuantumX.QuantumXDevice.CONNECTION_DEFAULT_PORT">
            <summary>
            Default TCP/IP port for connecting with QuantumX devices
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.#ctor">
            <inheritdoc />
            <summary>
            Creates new instance of the class
            and initializes the communication manager, the additional features and others.
            Use this constructor if the device can be found by the scan mechanism.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates new instance of the class
            and initializes the communication manager, the additional features and others.
            Use this constructor if the device must be connected without using the scan mechanism or if you want to connect to a device with a known IP address.
            </summary>
            <param name="ipAddress">IP address of the device</param>
            <param name="port">Port for connecting the device (optional). This parameter is not optional, if the device is connected to a CX27. If this parameter is not set, the default connection port is used. </param>
            <param name="streamingPort">Streaming port (optional, if scan is available). If this parameter is not set, it will be set during the device connect (retrieved by the scan result).
            If the scan mechanism is not available, then this parameter is not optional .
            (try to use the default <see cref="F:Hbm.Api.Common.Entities.ConnectionInfos.StreamingConnectionInfo.STREAMING_DEFAULT_PORT"/>, if is unknown)</param>
            <param name="httpPort">Http port, required for streaming (optional, if scan is available). If this parameter is not set, it will be set during the device connect (retrieved by the scan result).
            If the scan mechanism is not available, then this parameter is not optional.
            (try to use the default <see cref="F:Hbm.Api.Common.Entities.ConnectionInfos.StreamingConnectionInfo.HTTP_DEFAULT_PORT"/>, if is unknown)</param>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXDevice.FamilyName">
            <summary>
            Name of the family to which this device belongs
            </summary>
            <remarks>This MUST be exactly the same string as in property FamilyName in class <see cref="T:Hbm.Api.QuantumX.QuantumXDeviceFamily"/></remarks>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXDevice.IsFirmwareUpdateSupported">
            <summary>
            Gets or sets a value indicating whether this instance supports firmware update.
            </summary>
            <value>
              <c>true</c> if this instance supports firmware update; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXDevice.AdditionalFeatures">
            <summary>
            Additional features of the QuantumX device.
            </summary>
            <remarks>
            Additional features cover all public functions that are not
            predetermined by the abstract functions of the Device class.
            </remarks>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXDevice.IsAutomaticTedsMonitoringSupported">
            <summary>
            Gets a value indicating whether this instance supports automatic TEDS monitoring (always <c>true</c> for QuantumX).
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXDevice.HasAdditionalTedsFieldsSupport">
            <summary>
            Gets a value indicating whether the device family supports TEDS fields for calibration and serialnumber.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXDevice.IsReadingFbgSpectrumSupported">
            <summary>
            Geta a value indicating whether this instance supports reading spectrum.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXDevice.ModuleLabel">
            <summary>
            Module label of the system
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXDevice.Extension">
            <summary>
            Extension to the basic module type of the system
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXDevice.Selection">
            <summary>
            Specification if the basic module type of the system
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXDevice.Revision">
            <summary>
            Revision of the system
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXDevice.SpecialVersion">
            <summary>
            Special version of the system
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXDevice.SpecialFirmwareVersion">
            <summary>
            Special firmware version of the system
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXDevice.ModuleId">
            <summary>
            Module id of the system
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXDevice.SupportsCanBusTermination">
            <summary>
            Gets a value indicating whether the device supports CAN bus termination.
            </summary>
            <value>
              <c>true</c> if [supports CAN bus termination]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXDevice.SupportsChangingConnectorType">
            <summary>
            Gets a value indicating whether the device supports switching to and from CAN bus.
            </summary>
            <value>
              <c>true</c> if [supports switching to and from CAN bus]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:Hbm.Api.QuantumX.QuantumXDevice.SupportsTedsCalibrationFields">
            <summary>
            The supports teds calibration fields
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXDevice.FpgaVersion">
            <summary>
            FPGA version of the platform
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXDevice.HardwareIdentification">
            <summary>
            Hardware identification version of the platform
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXDevice.HardwareControllerVersion">
            <summary>
            Hardware controller version of the platform
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXDevice.HardwareControllerDate">
            <summary>
            Hardware controller date of the platform
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXDevice.HardwareControllerProgramVersion">
            <summary>
            Hardware controller program version of the platform
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXDevice.HardwareControllerProgramDate">
            <summary>
            Hardware controller program date of the platform
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXDevice.ComManager">
            <summary>
            Gets access to the <see cref="T:Hbm.Api.QuantumX.Core.CommunicationManager"/> for the additional features of the device
            </summary>
            <remarks>
            Use this Property only for additional features! The access must be synchronized because of multi threading.
            </remarks>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXDevice.NetAdapters">
            <summary>
            Network adapters of the device. For internal use only.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXDevice.Uuid">
            <summary>
            UUID of the connected device. The uuid is available after connecting the device.
            For internal use only.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.AssignConnector(Hbm.Api.Common.Entities.Connectors.Connector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Assigns the settings of the given connector (including channels, sensor, signals etc.)
            to the physical connector of the device.
            The warnings and errors during the assignment process are collected in the list of problems.
            </summary>
            <param name="connector">The actual (modified) connector.</param>
            <param name="problems">The warnings and errors that occurred during the assignment process.</param>
            <exception cref="T:Hbm.Api.Common.Exceptions.UnknownConnectorException">Thrown when the connector does not belong to this device.</exception>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.AssignChannel(Hbm.Api.Common.Entities.Channels.Channel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Assigns the settings of the given channel (including sensor, signals etc.)
            to the physical channel of the device.
            The warnings and errors during the assignment process are collected in the list of problems.
            </summary>
            <param name="channel">The actual (modified) channel.</param>
            <param name="problems">The warnings and errors that occurred during the assignment process.</param>
            <exception cref="T:Hbm.Api.Common.Exceptions.UnknownChannelException">Thrown when the channel does not belong to this device.</exception>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.AssignSignal(Hbm.Api.Common.Entities.Signals.Signal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Assigns the settings of the given signal to the physical signal of the device.
            The warnings and errors during the assignment process are collected in the list of problems.
            </summary>
            <param name="signal">The actual (modified) signal.</param>
            <param name="problems">The warnings and errors that occurred during the assignment process.</param>
            <exception cref="T:Hbm.Api.Common.Exceptions.UnknownSignalException">Thrown when the signal does not belong to this device.</exception>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.AssignSensor(Hbm.Api.Common.Entities.Channels.Channel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <inheritdoc />
            <summary>
                Assigns the sensor settings of the given channel to the physical channel of the device.
                The warnings and errors during the assignment process are collected in the list of problems.
            </summary>
            <param name="channel">The actual (modified) channel.</param>
            <param name="problems">The warnings and errors that occurred during the assignment process.</param>
            <exception cref="T:Hbm.Api.Common.Exceptions.UnknownChannelException">
                Thrown when the channel does not belong to this
                device.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Thrown when the connector of the channel does not implement
                <see cref="T:Hbm.Api.QuantumX.Connectors.IQuantumXConnector" />.
            </exception>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.AssignZero(Hbm.Api.Common.Entities.Channels.Channel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Assigns the zero settings of the given channel to the physical channel of the device.
            The warnings and errors during the assignment process are collected in the list of problems.
            </summary>
            <param name="channel">The actual (modified) channel.</param>
            <param name="problems">The warnings and errors that occurred during the assignment process.</param>
            <exception cref="T:Hbm.Api.Common.Exceptions.UnknownChannelException">Thrown when the channel does not belong to this device.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the connector of the channel does not implement <see cref="T:Hbm.Api.QuantumX.Connectors.IQuantumXConnector"/>.</exception>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.AssignAutoCalibrationMode(Hbm.Api.Common.Entities.Channels.Channel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Assigns the <see cref="T:Hbm.Api.Common.Enums.AutoCalibrationMode"/> of the given channel to the physical channel
            of the device.
            Warnings and errors during assign process are collected in list of problems.
            </summary>
            <param name="channel">Existing (modified) channel</param>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.AssignTimeSource(System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Assigns the <see cref="T:Hbm.Api.Common.Entities.TimeSources.TimeSource"/> to the device.
            Warnings and errors during assign process are collected in list of problems.
            </summary>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.SetTedsUsageMode(Hbm.Api.Common.Entities.Connectors.Connector,Hbm.Api.Common.Enums.TedsUsageMode,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Sets the TEDS usage mode and re-reads the connector settings.
            </summary>
            <param name="connector">The connector.</param>
            <param name="tedsUsageMode">The TEDS usage mode to be set.</param>
            <param name="problems">Output: The list of problems or empty if none occurred.</param>
            <exception cref="T:System.ArgumentException">Argument must be a QuantumXAnalogInConnector - connector</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.ReadTeds(Hbm.Api.Common.Entities.Connectors.Connector,System.String@,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <inheritdoc />
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.WriteTeds(Hbm.Api.Common.Entities.Connectors.Connector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@,Hbm.Api.SensorDB.Entities.Sensor,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.ActivateTeds(Hbm.Api.Common.Entities.Connectors.Connector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Activates the TEDS settings at the given connector and loads the new channel parameters.
            </summary>
            <param name="connector">Connecter, whose connected TEDS shall be activated.</param>
            <param name="problems">Empty or a list of warnings and errors that occurred during the activation process.</param>
            <returns><c>true</c>, if TEDS settings have been activated, otherwise <c>false</c>.</returns>
            <remarks>
            On success, the sensor object and some channel properties of the given connector will be replaced by an updated version according to TEDS settings.
            </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.GetTimeSourceQuality(System.Double@,System.String@)">
            <summary>
            Returns the offset (timespan between synchronization time source and time of device) in ms and a <see cref="T:Hbm.Api.Common.Entities.TimeSources.TimeSource"/> dependent
            string with further information about the quality of the synchronization.
            For <see cref="T:Hbm.Api.Common.Entities.TimeSources.NtpTimeSource"/> this string should include the standard parameters (comma seperated): "remote, refid, st, t, when, poll, reach, delay, offset, jitter"
            </summary>
            <param name="offsetInMs">Offset to time source in milliseconds, <see cref="F:System.Double.MaxValue"/> if offset can not be determined</param>
            <param name="quality">TimeSource type dependent information about the synchronization quality. </param>
            <exception cref="T:Hbm.Api.Common.Exceptions.DeviceNotConnectedException">Thrown if this device is not connected.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.CommunicationFailedException">Thrown if a communication error with the device has occurred.</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.GetSupportedSensorTypes(Hbm.Api.Common.Entities.Channels.Channel,System.Boolean)">
            <summary>
            Get a list of supported sensor types for a given channel
            </summary>
            <param name="channel">Channel, whose possible sensor types you want to get</param>
            <param name="isOfflineQuery">True, if possible sensor types should be returned without communication with the device (e.g. due to performance reasons)</param>
            <returns>List of possible sensor types</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.GetSupportedFilterFrequencies(Hbm.Api.Common.Entities.Filters.Filter,System.Boolean)">
            <summary>
            Get a list of supported filter frequencies for given filter
            </summary>
            <param name="filter">Filter, whose possible filter frequencies you want to get</param>
            <param name="isOfflineQuery">True, if possible filter frequencies should be returned without communication with the device (e.g. due to performance reasons)</param>
            <returns>List of possible filter frequencies</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.GetSupportedSampleRates(Hbm.Api.Common.Entities.Signals.Signal,System.Boolean)">
            <summary>
            Get a list of supported sample rates
            </summary>
            <param name="signal">Signal, whose possible sample rates you want to get</param>
            <param name="isOfflineQuery">True, if possible sample rates should be returned without communication with the device (e.g. due to performance reasons)</param>
            <returns>List of possible sample rates</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the <see cref="T:Hbm.Api.Common.Enums.DataRateDomainType"/> of the device is unknown</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.GetSupportedScalingTypes(Hbm.Api.Common.Entities.Channels.Channel,System.Boolean)">
            <summary>
            Get a list of supported scaling types for given channel
            </summary>
            <param name="channel">Channel, whose possible scaling types you want to get</param>
            <param name="isOfflineQuery">True, if possible scaling types should be returned without communication with the device (e.g. due to performance reasons)</param>
            <returns>List of possible scaling types</returns>
            <remarks>Possible scaling types may also depend on the current sensor of the channel!</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="channel"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.UnknownChannelException">Thrown, if channel does not belong to this device</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.GetSupportedFilters(Hbm.Api.Common.Entities.Signals.Signal,System.Boolean)">
            <summary>
            Get a list of supported filters for given signal
            </summary>
            <param name="signal">Signal, whose possible filters you want to get</param>
            <param name="isOfflineQuery">True, if possible filters should be returned without communication with the device (e.g. due to performance reasons)</param>
            <returns>List of possible filters</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="signal"/> is <c>null</c>.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.UnknownSignalException">Thrown, if signal does not belong to this device</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.GetSupportedJackType(Hbm.Api.Common.Entities.Signals.Signal,System.Boolean)">
            <summary>
            Gets the type of the supported jack for the given signal
            </summary>
            <param name="signal">The signal.</param>
            <param name="isOfflineQuery">True, if possible jack type should be returned without communication with the device (e.g. due to performance reasons)</param>
            <returns>
            Name of the jack type
            </returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.ReadSingleMeasurementValue(System.Collections.Generic.List{Hbm.Api.Common.Entities.Signals.Signal})">
            <summary>
            Obtains a single measurement value for each given <see cref="T:Hbm.Api.Common.Entities.Signals.Signal"/> without initializing a complete DAQ session.
            Filter settings will be ignored.
            The measurement value is internally saved in <see cref="T:Hbm.Api.Common.Entities.Signals.Signal"/> and can be obtained from there by calling <see cref="M:Hbm.Api.Common.Entities.Signals.Signal.GetSingleMeasurementValue"/>.
            </summary>
            <remarks>If the device does not support time stamps for single measurement values, the current time of your
            PC will be used to generate a time stamp.</remarks>
            <param name="measurementSignals">Signals to get measurement values from</param>
            <exception cref="T:Hbm.Api.Common.Exceptions.DeviceNotConnectedException">Thrown if this device is not connected.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.CommunicationFailedException">Thrown if a communication error with the device has occurred.</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.ReadSingleMeasurementValueOfAllSignals">
            <summary>
            Obtains a single measurement value for all <see cref="T:Hbm.Api.Common.Entities.Signals.Signal"/>s of the device without initializing a complete DAQ session.
            Filter settings will be ignored.
            The measurement values are internally saved in <see cref="T:Hbm.Api.Common.Entities.Signals.Signal"/> and can be obtained from there by calling <see cref="M:Hbm.Api.Common.Entities.Signals.Signal.GetSingleMeasurementValue"/>.
            </summary>
            <remarks>If the device does not support time stamps for single measurement values, the current time of your
            PC will be used to generate a time stamp.</remarks>
            <exception cref="T:Hbm.Api.Common.Exceptions.DeviceNotConnectedException">Thrown if this device is not connected.</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.SetDigitalIO(Hbm.Api.Common.Entities.Signals.DigitalSignal,Hbm.Api.Common.Enums.DigitalValueType)">
            <summary>
            Sets the digital output signal according to the given value.
            A digital input signal cannot be set by the hardware.
            </summary>
            <param name="digitalSignal">Digital signal to adjust</param>
            <param name="value">Value to set</param>
            <exception cref="T:Hbm.Api.Common.Exceptions.DeviceNotConnectedException">Thrown if this device is not connected.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.UnknownSignalException">Thrown when the signal does not belong to this device.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the signal's connector is not an <see cref="T:Hbm.Api.QuantumX.Connectors.QuantumXDigitalConnector"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the connector of the signal doesn't have the direction <see cref="F:Hbm.Api.Common.Enums.DirectionType.Out"/>.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.CommunicationFailedException">Thrown if a communication error with the device has occurred.</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.SetAnalogOut(Hbm.Api.Common.Entities.Signals.AnalogOutSignal,System.Decimal)">
            <summary>
            Sets the analog out signal to the given value
            </summary>
            <param name="analogOutSignal">Analog out signal to adjust</param>
            <param name="value">Value to set</param>
            <exception cref="T:Hbm.Api.Common.Exceptions.DeviceNotConnectedException">Thrown if this device is not connected.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.UnknownSignalException">Thrown when the signal does not belong to this device.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the signal's connector is not an <see cref="T:Hbm.Api.QuantumX.Connectors.QuantumXAnalogOutConnector"/>.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.CommunicationFailedException">Thrown if a communication error with the device has occurred.</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.SetInputSignalReference(Hbm.Api.Common.Entities.Channels.IInputSignalReference,Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Signals.Signal,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Assigns the reference of an input signal to the given <paramref name="channel"/>.
            The reference consists of the input signal's device and the input signal itself.
            </summary>
            <param name="channel">(Output) channel, which will be set with the input signal reference.</param>
            <param name="inputSignalDevice">Device of the input signal.</param>
            <param name="inputSignal">The input signal.</param>
            <param name="problems">Warnings and errors that occurred during assign process.</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.RemoveInputSignalReference(Hbm.Api.Common.Entities.Channels.IInputSignalReference,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <inheritdoc/>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.ChangeIp(System.String,System.String,System.Boolean,System.String,System.UInt32,System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <inheritdoc />
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.SetDeviceName(System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Sets the module/device name of the physical device and in case of success updates the object model too (<see cref="P:Hbm.Api.Common.Entities.Device.Name"/>).
            </summary>
            <param name="newName">New name</param>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.SetChannelName(Hbm.Api.Common.Entities.Channels.Channel,System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <inheritdoc />
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.SetSignalName(Hbm.Api.Common.Entities.Signals.Signal,System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Assigns a signal name to the given <paramref name="signal"/>.
            </summary>
            <remarks>
            The implementation should call <see cref="M:Hbm.Api.Common.Messaging.MessageBroker.RaiseSignalNameChangedAsync(System.Object,Hbm.Api.Common.Messaging.SignalsEventArgs)"/>
            after a successful assignment of the signal name.
            </remarks>
            <param name="signal">Signal, which will be renamed</param>
            <param name="signalName">New name of the signal</param>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.SetUnit(Hbm.Api.Common.Entities.Channels.Channel,System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Assigns the unit of the given channel
            </summary>
            <param name="channel">Channel whose unit should be set</param>
            <param name="unit">Unit to assign</param>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.SetCanChannelActivation(System.Collections.Generic.List{Hbm.Api.Common.Entities.Channels.Channel},System.Boolean,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <inheritdoc />
            <summary>
                Activates or deactivates the provided list of channels. Only <see cref="T:Hbm.Api.Common.Entities.Channels.CanInChannel" /> and
                <see cref="T:Hbm.Api.Common.Entities.Channels.CanOutChannel" /> can be activated or deactivated.
            </summary>
            <param name="canChannels">CAN Channels that should be activated or deactivated.</param>
            <param name="activate"><c>True</c> to activate the provided channels, <c>false</c> otherwise.</param>
            <param name="problems">Warnings and errors that occurred during the activation/deactivation process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.SetCanBusParameters(Hbm.Api.Common.Entities.Connectors.CanConnector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Assigns all CAN Bus parameters of the given <see cref="T:Hbm.Api.Common.Entities.Connectors.CanConnector"/> (e.g. <see cref="P:Hbm.Api.Common.Entities.Connectors.CanConnector.BitRate"/>,
            <see cref="P:Hbm.Api.Common.Entities.Connectors.CanConnector.IsTerminated"/>, <see cref="P:Hbm.Api.Common.Entities.Connectors.CanConnector.SupplyVoltage"/>, etc. but NOT its channels.
            </summary>
            <param name="canConnector">Existing (modified) <see cref="T:Hbm.Api.Common.Entities.Connectors.CanConnector"/> whose properties should be assigned</param>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
            <remarks>If <see cref="P:Hbm.Api.Common.Entities.Device.IsCanBusSupplyVoltageSupported"/> is true, warnings concerning unfitting supply voltages of
            <see cref="P:Hbm.Api.Common.Entities.Connectors.CanConnector.SupplyVoltage"/> and <see cref="P:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor.ActiveSupplyVoltage"/> will also be generated.</remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.EnableRouting(System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Enables the routing functionality.
            </summary>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
            <remarks></remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.DisableRouting(System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Disables the routing funtionality.
            </summary>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
            <remarks></remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.ChangingConnectorType(Hbm.Api.QuantumX.Connectors.IQuantumXConnector,Hbm.Api.QuantumX.Enums.ConnectorType,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Changes a Connector's type.
            After changing the type of a connector you have to disconnect and connect to the device again to update the
            object model of the device accordingly.
            </summary>
            <param name="quantumXConnector">The IQuantumXConnector to change the type.</param>
            <param name="connectorType">The connector type to change to.</param>
            <param name="problems">The problems reported by the device while changing the connector type.</param>
            <returns><c>True</c> if no errors have been reported by the device, <c>False</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">quantumXConnector</exception>
            <remarks>Attention: After execution of this function you HAVE TO disconnect and connect the device again!</remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.SetShunt(Hbm.Api.Common.Entities.Connectors.Connector,Hbm.Api.Common.Enums.ShuntMode,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Sets the configuration of the shunt output of the given connector
            </summary>
            <param name="connector">Connector whose shunt output should be set</param>
            <param name="mode"><see cref="T:Hbm.Api.Common.Enums.ShuntMode"/> for given connector.</param>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.SetShunt(System.Collections.Generic.List{Hbm.Api.Common.Entities.Connectors.Connector},Hbm.Api.Common.Enums.ShuntMode,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Sets the configurations of the shunt outputs of the given connectors
            </summary>
            <param name="connectors">Connectors whose shunt outputs should be set</param>
            <param name="mode"><see cref="T:Hbm.Api.Common.Enums.ShuntMode"/> for given connectors.</param>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.SetDataRateDomain(Hbm.Api.Common.Enums.DataRateDomainType,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Sets the data rate domain.
            </summary>
            <param name="dataRateDomain">The data rate domain.</param>
            <param name="problems">The problems.</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.GetShunt(Hbm.Api.Common.Entities.Connectors.Connector)">
            <summary>
            Gets the <see cref="T:Hbm.Api.Common.Enums.ShuntMode"/> for the given connector
            </summary>
            <param name="connector">Connector from which to get its <see cref="T:Hbm.Api.Common.Enums.ShuntMode"/></param>
            <returns><see cref="T:Hbm.Api.Common.Enums.ShuntMode"/> of given connector</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.GetShunt(System.Collections.Generic.List{Hbm.Api.Common.Entities.Connectors.Connector})">
            <summary>
            Gets the <see cref="T:Hbm.Api.Common.Enums.ShuntMode"/> for the given connectors
            </summary>
            <param name="connectors">List of connectors from which to get their <see cref="T:Hbm.Api.Common.Enums.ShuntMode"/></param>
            <returns>List of <see cref="T:Hbm.Api.Common.Enums.ShuntMode"/> of given connectors</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.GetDeviceStatusList(System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@,Hbm.Api.Common.Enums.StatusType)">
            <inheritdoc />
            <summary>
                Gets the list of device statuses.
            </summary>
            <param name="problems">List of warnings and/or errors that occurred during the process or empty list.</param>
            <param name="statusTypesToGet">
                <see cref="T:Hbm.Api.Common.Enums.StatusType" /> with the demanded status types (default is all status
                information).
            </param>
            <returns>The list of device statuses.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.GetDeviceStatusList(Hbm.Api.Common.Entities.Connectors.Connector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Gets the list of device statuses for the given connector.
            </summary>
            <param name="connector">Connector to get the statuses for.</param>
            <param name="problems">List of warnings and/or errors that occurred during the process or empty list.</param>
            <returns>The list of device statuses for the given connector.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.GetDeviceStatusList(Hbm.Api.Common.Entities.Channels.Channel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Gets the list of device statuses for the given channel.
            </summary>
            <param name="channel">Channel to get the statuses for.</param>
            <param name="problems">List of warnings and/or errors that occurred during the process or empty list.</param>
            <returns>The list of device statuses for the given channel.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.GetDeviceErrorStatusList(System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Gets the list of device error statuses.
            </summary>
            <param name="problems">List of warnings and/or errors that occurred during the process or empty list.</param>
            <returns>The list of device error statuses.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.GetDeviceErrorStatusList(Hbm.Api.Common.Entities.Connectors.Connector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Gets the list of device error statuses for the given connector.
            </summary>
            <param name="connector">Connector to get the error statuses for.</param>
            <param name="problems">List of warnings and/or errors that occurred during the process or empty list.</param>
            <returns>The list of device error statuses for the given connector.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.GetDeviceErrorStatusList(Hbm.Api.Common.Entities.Channels.Channel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Gets the list of device error statuses for the given channel.
            </summary>
            <param name="channel">Channel to get the error statuses for.</param>
            <param name="problems">List of warnings and/or errors that occurred during the process or empty list.</param>
            <returns>The list of device error statuses for the given channel.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.FlashLed(Hbm.Api.Common.Enums.LedFlashMode,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Flashes the device LED in the given mode/color
            </summary>
            <param name="mode">Mode/color to use for flashing</param>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.FlashLed(Hbm.Api.Common.Entities.Connectors.Connector,Hbm.Api.Common.Enums.LedFlashMode,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Flashes the LED of the given connector in the given mode/color
            </summary>
            <param name="connector">Connector that should be flashing</param>
            <param name="mode">Mode/color to use for flashing</param>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.FlashLed(System.Collections.Generic.List{Hbm.Api.Common.Entities.Connectors.Connector},Hbm.Api.Common.Enums.LedFlashMode,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Flashes the LEDs of the given connectors in the given mode/color
            </summary>
            <param name="connectors">Connectors that should be flashing</param>
            <param name="mode">Mode/color to use for flashing</param>
            <param name="problems">Warnings and errors that occurred during assign process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.Reset(System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Resets the device to its factory default settings.
            Caution! After this function has been called, the device will be disconnected.
            This is necessary because the parameterization of the device changes by
            loading the factory defaults and the device therefore will be no longer consistent with the associated object model of the device.
            (When implementing this function, be sure to disconnect the device and to call <see cref="M:Hbm.Api.Common.Messaging.MessageBroker.RaiseDeviceDisconnectedAsync(System.Object,Hbm.Api.Common.Messaging.DeviceEventArgs)"/> to signal
            that the device has been disconnected.)
            </summary>
            <param name="problems">Warnings and errors that occurred during resetting the device</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
            <remarks >Notice that the device may be unreachable for a certain time and the device is disconnected after the execution of this function.</remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.GetAmplifierType(Hbm.Api.Common.Entities.Channels.Channel)">
            <summary>
            Gets the amplifier type of the channel.
            </summary>
            <param name="channel">The channel whose amplifier type should be returned.</param>
            <returns>Amplifier type for the given channel.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.GetAmplifierSerialNumber(Hbm.Api.Common.Entities.Channels.Channel)">
            <summary>
            Gets the amplifier serial number of the channel.
            </summary>
            <param name="channel">The channel whose amplifier serial number should be returned.</param>
            <returns>
            Amplifier serial number for the given channel.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.GetChannelHardwareInfo(Hbm.Api.Common.Entities.Channels.Channel)">
            <summary>
            Gets the hardware information (e.g. Model or ModuleLabel) of the channel.
            </summary>
            <param name="channel">The channel whose hardware info should be returned.</param>
            <returns>
            Hardware info for the given channel.
            </returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.IsFirmwareVersionSupported(System.String)">
            <summary>
            Determines whether the given firmware version is supported.
            </summary>
            <param name="firmwareVersion">The firmware version to check.</param>
            <returns>
            false, if given firmware version is not supported
            </returns>
            <remarks>
            The function returns also true, if the given firmware version is higher than the latest known one
            (at the time at which the API has been released).
            </remarks>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXDevice.IsElectricalSnapshotSupported">
            <summary>
            Gets a value indicating whether this instance supports the request for electrical values.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.PrepareDaq(System.Collections.Generic.List{Hbm.Api.Common.Entities.Signals.Signal})">
            <summary>
            Prepares a continuous measurement session.
            </summary>
            <param name="measurementSignals">The signals which will be used for the measurement.</param>
            <exception cref="T:Hbm.Api.Common.Exceptions.ParameterizationNotCompletedException"><paramref name="measurementSignals" /> contains a signal
            for which a parameterization is still running internally.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.DeviceNotConnectedException">Exception is thrown when the device is not connected.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.UnknownSignalException"><paramref name="measurementSignals" /> contains a signal that does not belong
            to this device.</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.GetSupportedCanBitRates">
            <summary>
            Gets the supported CAN bit rates.
            </summary>
            <returns>
            The List of supported CAN bit rates.
            </returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.GetCalibrationCertificateFileInfos(Hbm.Api.Common.Enums.ReleaseType,System.String,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <inheritdoc />
            <summary>
            Returns a list of calibration certificate file information according to the demanded release type.
            The calibration certificates will be created/downloaded to the given output directory.
            </summary>
            <param name="releaseType">Release type of the demanded calibration certificates.</param>
            <param name="outputDirectory">Directory to save/create the calibration certificates.</param>
            <param name="problems">Warnings and errors that occurred during getting the calibration certificates.</param>
            <returns>List of calibration certificate file information.</returns>
            <remarks>Please do not forget to delete the temporary created calibration certificates (downloaded from the device).</remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.SetFbgDetectionThreshold(Hbm.Api.Common.Entities.Connectors.FbgConnector,System.Double,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <inheritdoc />
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.SetFbgChannelActivation(System.Collections.Generic.List{Hbm.Api.Common.Entities.Channels.FbgChannel},System.Boolean,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <inheritdoc />
            <summary>
                Activates or deactivates the given list of channels. Only <see cref="T:Hbm.Api.Common.Entities.Channels.FbgChannel" />s can be activated or
                deactivated.
            </summary>
            <param name="fbgChannels">FBG channels to activate or deactivate.</param>
            <param name="activate"><c>True</c> to activate the provided channels, <c>false</c> otherwise.</param>
            <param name="problems">Warnings and errors occurred during activation/deactivation process.</param>
            <returns><c>true</c> if no error has occurred, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.SetFbgChannelDetectionRange(Hbm.Api.Common.Entities.Channels.FbgChannel,System.Double,System.Double,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <inheritdoc />
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.SupportsExtendedSampleRateMode">
            <summary>
            Determines whether the device supports the extended sample rate mode.
            </summary>
            <returns><c>true</c> when the extended sample-rate mode is supportet, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.UpdateCanConnectorsSettings">
            <summary>
            Reads all CAN connectors from device and updates it's settings.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.UpdateConnectorSettings(Hbm.Api.QuantumX.Connectors.IQuantumXConnector)">
            <summary>
            Updates the provided IQuantumXConnector settings from the device.
            </summary>
            <param name="quantumXConnector">The IQuantumXConnector.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.ValidateDeviceConnection">
            <summary>
                Checks if the device is marked as connected by checking the property <see cref="P:Hbm.Api.Common.Entities.Device.IsConnected" />.
            </summary>
            <remarks>
                ATTENTION: this method should be used within locks on <see cref="P:Hbm.Api.Common.Entities.Device.SyncLock" />)
            </remarks>
            <exception cref="T:Hbm.Api.Common.Exceptions.DeviceNotConnectedException">Thrown if this device is not connected.</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.GetAllStandardConnectors">
            <summary>
            Gets all standard connectors from the object model.
            </summary>
            <returns>The list of standard connectors.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.Connect(System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Connect to the underlying physical device.
            </summary>
            <param name="problems">List of warnings and errors that occurred during the connect process</param>
            <returns><c>true</c> if no error has occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.Reconnect(System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
            Reconnect to the underlying physical device.
            </summary>
            <param name="problems">List of warnings and errors that occurred during the reconnect process</param>
            <returns><c>true</c> if no error occurred, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.RefreshDeviceInfo(System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Refreshes relevant device properties like Name, SerialNo etc..
            Use this function if you want to get information about the device itself - without reading all connectors.
            </summary>
            <param name="problems">Warnings and errors that occurred during the refresh process</param>
            <returns>
              <c>true</c> if no error has occurred, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.MapConnectionInfo(Hbm.Api.Common.Entities.ConnectionInfos.ConnectionInfo)">
            <summary>
            Maps the given ConnectionInfo to a possible ConnectionInfo for the device.
            If this is not possible, the function returns null.
            Example: Given ConnectionInfo is EthernetConnectionInfo but the device supports
            StreamingConnectionInfo only:  The function maps the EthernetConnectionInfo onto
            a StreamingConnectionInfo and fills the missing parameters e.g. with default streaming parameters
            if possible. If this is not possible the function has to return null.
            </summary>
            <param name="connectionInfo">The ConnectionInfo to map onto a supported ConnectionInfo</param>
            <returns>Valid ConnectionInfo for the device or null if mapping is not possible</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.Disconnect">
            <summary>
            Disconnect from the underlying physical device.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.CheckForNameChanges(Hbm.Api.Common.Entities.Connectors.Connector,Hbm.Api.QuantumX.Channels.QuantumXAnalogInChannel,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Check if the teds activation changed the channels and signal names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.HandleChannelsChangesTriggeredByTedsActivation(System.Collections.Generic.Dictionary{Hbm.Api.Common.Entities.Connectors.Connector,Hbm.Api.Common.Entities.Channels.Channel},System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Handles the channels changes triggered by teds activation.
            </summary>
            <param name="channels">The channels.</param>
            <param name="problems">The problems.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.CheckForTedsChanges(Hbm.Api.Common.Entities.Connectors.Connector,Hbm.Api.Common.Entities.Channels.Channel,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{Hbm.Api.Common.Messaging.DataTransferObjects.ChannelSensorValueChange},System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Checks for teds changes.
            </summary>
            <param name="connector">The connector.</param>
            <param name="channel">The channel.</param>
            <param name="channelNameChange">The channel name change.</param>
            <param name="signalNamechange">The signal namechange.</param>
            <param name="oldSensorsOfAlldependentChannels">The old sensors of alldependent channels.</param>
            <param name="problems">The problems.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.GetPossibleDataAcquisitionModes">
            <summary>
            Gets the possible data acquisition modea according to the current synchronization settings of the device.
            When the device detects a hardware synchronization (typically established via a synchronization cable), the returned list
            will contain the mode <see cref="F:Hbm.Api.Common.Enums.DataAcquisitionMode.HardwareSynchronized"/>.
            If the device uses a time based synchronization (e.g. PTP or NTP), the returned list will contain
            the mode <see cref="F:Hbm.Api.Common.Enums.DataAcquisitionMode.TimestampSynchronized"/>.
            Since most devices are able to fulfill an unsynchronized measurement, the returned list will most likely contain the mode <see cref="F:Hbm.Api.Common.Enums.DataAcquisitionMode.Unsynchronized"/>.
            If the device is not connected, the list of possible data acquisition modes will be empty.
            </summary>
            <returns>List of possible <see cref="T:Hbm.Api.Common.Enums.DataAcquisitionMode"/> for this device according to its current synchronization settings.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.ReadSingleElectricalValue(Hbm.Api.Common.Entities.Signals.AnalogInSignal)">
            <inheritdoc />
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.ReadFbgSpectrum(Hbm.Api.Common.Enums.FbgSpectrumType,Hbm.Api.Common.Entities.Connectors.FbgConnector)">
            <inheritdoc />
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.AutoDetectFbgBands(Hbm.Api.Common.Entities.Connectors.FbgConnector,System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.SetFbgBandsDetectionResult(Hbm.Api.Common.Entities.Connectors.FbgConnector,Hbm.Api.Common.Entities.SpectrumInfos.FbgBandsDetectionResult,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <inheritdoc />
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.SupportsPacketRateChange">
            <summary>
            QuantumX support the changing of the packet rate.
            </summary>
            <returns><c>true</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.GetOverflowValue">
            <summary>
            Overflow value of the QuantumX device.
            All measurement values greater or equal of this value are marked as <see cref="F:Hbm.Api.Common.Enums.MeasurementValueState.Overflow"/>.
            </summary>
            <returns>Overflow value of the device</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.FillStreamingConnectionInfoByScan(System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
            <summary>
            Fills the existing <see cref="T:Hbm.Api.Common.Entities.ConnectionInfos.StreamingConnectionInfo"/> instance of the current device
            by doing a new scan for the current device. If the ports which are required for streaming are not yet set, the port numbers
            of the scanned device are taken instead.
            </summary>
            <param name="problems">List of problems. New problems may be appended to this list</param>
            <returns>The updated (or unchanged) <see cref="T:Hbm.Api.Common.Entities.ConnectionInfos.StreamingConnectionInfo"/> of the current device</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.IsValidPort(System.Int32)">
            <summary>
            Checks if the given port is valid.
            The port is valid, if the port number does not contain the initialization value 0
            and not <c>Hbm.Api.Common.Entities.ConnectionInfos.StreamingConnectionInfo.INVALID_PORT</c>.
            </summary>
            <param name="port">Port number to check</param>
            <returns><c>true</c> if the port is valid, else <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.SetAnalogOut(Hbm.Api.Common.Entities.Signals.AnalogOutSignal,System.Boolean,System.Decimal)">
            <summary>
            Sets the analog out signal to the given value (if <paramref name="activateValue"/> is <c>true</c>),
            or enables the default usage of the analog out signal (if <paramref name="activateValue"/> is <c>false</c>).
            </summary>
            <param name="analogOutSignal">Analog out signal to adjust</param>
            <param name="activateValue">if <c>true</c>, the given value will be set, else the normal usage will be enabled.</param>
            <param name="value">Value to set (only relevant, if <paramref name="activateValue"/> is <c>true</c></param>
            <exception cref="T:Hbm.Api.Common.Exceptions.DeviceNotConnectedException">Thrown if this device is not connected.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.UnknownSignalException">Thrown when the signal does not belong to this device.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the signal's connector is not an <see cref="T:Hbm.Api.QuantumX.Connectors.QuantumXAnalogOutConnector"/>.</exception>
            <exception cref="T:Hbm.Api.Common.Exceptions.CommunicationFailedException">Thrown if a communication error with the device has occurred.</exception>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.HandleDeviceNotConnectedException">
            <summary>
            Function that handles the device status in case of an <see cref="T:Hbm.Api.Common.Exceptions.DeviceNotConnectedException"/> that
            has been thrown by the communication manager.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.IsSameDevice(System.UInt64)">
            <summary>
            Checks if the current device matches the given uuid
            </summary>
            <param name="uuid">UUID to ceck</param>
            <returns><c>true</c> if UUIDs match, otherwise <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.ReadBackConnectors">
            <summary>
            Reads all connectors from device, compares them to currently available connectors in the device and filles up the object model to fully reflect the physical device structure
            by keeping already existing object instances at the same time.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.GetConnectorShuntStatus(System.Collections.Generic.List{Hbm.Api.Common.Entities.DeviceStatus},Hbm.Api.Common.Entities.Connectors.Connector)">
            <summary>
            Gets the shunt status for the given connector from the list.
            </summary>
            <param name="statuses">The statuses.</param>
            <param name="connector">The connector.</param>
            <returns>
            The shunt status from the list.
            </returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.UpdateCanFdProperties(Hbm.Api.QuantumX.Connectors.QuantumXCanConnector,Hbm.Api.QuantumX.Connectors.QuantumXCanConnector)">
            <summary>
            Updates the CAN-FD properties.
            </summary>
            <param name="sourceConnector">The source connector whose values will be used to update the target connector.</param>
            <param name="targetConnector">The connector that will be updated with the values of the source connector.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDevice.CheckAndAddCanBusSupplyProblem(Hbm.Api.SensorDB.Entities.Sensor,Hbm.Api.Common.Entities.Connectors.Connector,System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem})">
             <summary>
             Adds a problem if check for fitting supply voltages fails.
             If device supports supply for the can bus(<see cref="P:Hbm.Api.Common.Entities.Device.IsCanBusSupplyVoltageSupported"/>), this function
             checks if <see cref="P:Hbm.Api.Common.Entities.Connectors.CanConnector.SupplyVoltage"/> fits to <see cref="P:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor.ActiveSupplyVoltage"/>.
             If <see cref="P:Hbm.Api.SensorDB.Entities.Sensors.CanBusSensor.ActiveSupplyVoltage"/> is set to 0 we do not take the sensor into account.
            
             We have to generate this problem by ourselves because Quantum ignores it but we should give a hint to the user!
             </summary>
             <param name="sensor">Sensor to check if it fits to the current supply voltage of the CanConnector</param>
             <param name="connector">Connector to which the sensor is connected</param>
             <param name="problems">Problems to be extended if the supply voltage of the connector does not fit to the one of the sensor</param>
        </member>
        <member name="T:Hbm.Api.QuantumX.QuantumXDeviceFamily">
            <summary>
                Concrete device family implementation for QuantumX devices
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.QuantumXDeviceFamily.FAMILY_NAME">
            <summary>
                Name of the device family
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDeviceFamily.#ctor">
            <inheritdoc />
            <summary>
                Initializes a new instance of the <see cref="T:Hbm.Api.QuantumX.QuantumXDeviceFamily" /> class.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXDeviceFamily.FamilyName">
            <summary>
                Get name of the device family (ReadOnly)
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXDeviceFamily.IsScanSupported">
            <summary>
                Indicates if a device family supports a scan mechanism
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.QuantumXDeviceFamily.SkillReader">
            <summary>
                Path to assembly that contains the device specific derivation of SkillReader
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDeviceFamily.Find(System.Collections.Generic.List{Hbm.Api.Common.Entities.ConnectionInfos.ConnectionInfo},System.Collections.Generic.List{Hbm.Api.Common.Entities.Problems.Problem}@)">
            <summary>
                Finds devices according to given connetionInfos.
            </summary>
            <param name="connectionInfos">The connection infos.</param>
            <param name="problems">List of warnings and errors that occurred during the find process</param>
            <returns>
                List of all found devices
            </returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDeviceFamily.GetPossibleDataAcquisitionModes(System.Collections.Generic.List{Hbm.Api.Common.Entities.Device},Hbm.Api.Common.Entities.TimeSources.TimeSource@)">
            <summary>
                Gets the possible data acquisition modes by taking into account all given devices of the family.
                CommonTimeSource is set to the timesource that is used by all devices of the family (only relevant if
                <see cref="F:Hbm.Api.Common.Enums.DataAcquisitionMode.TimestampSynchronized" /> is supported by the given devices).
            </summary>
            <param name="devices">Devices that belong to the family and take part in the measurement</param>
            <param name="commonTimeSource">
                TimeSource that is supported by all devices (typically e.g. an
                <see cref="T:Hbm.Api.Common.Entities.TimeSources.NtpTimeSource" />)
            </param>
            <returns>Possible <see cref="T:Hbm.Api.Common.Enums.DataAcquisitionMode" />s according to the possibilities of the given devices.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDeviceFamily.PrepareDataAcquisition(Hbm.Api.Common.Enums.DataAcquisitionMode,System.Collections.Generic.List{Hbm.Api.Common.Entities.Device})">
            <summary>
                Function to do final device settings according to the given <see cref="T:Hbm.Api.Common.Enums.DataAcquisitionMode" />.
                Use this function to setup e.g. trigger master and trigger slave, choose certain time stamp settings etc. which is
                relevant for the given data
                acquisition mode. Since all devices of a certain device family, that take part in the measurement are also given to
                this function,
                there is the possibility to handle certain devices in different ways (e.g. trigger master gets other
                settings/preparations than the slaves etc.).
            </summary>
            <param name="dataAcquisitionMode"><see cref="T:Hbm.Api.Common.Enums.DataAcquisitionMode" /> that describes how to start the measurement</param>
            <param name="devicesToPrepare">Devices of the family that take part in the measurement</param>
            <remarks>
                Do not use <see cref="F:Hbm.Api.Common.Enums.DataAcquisitionMode.Auto" /> but one of the DataAcquisitionModes returned by the
                function <see cref="M:Hbm.Api.QuantumX.QuantumXDeviceFamily.GetPossibleDataAcquisitionModes(System.Collections.Generic.List{Hbm.Api.Common.Entities.Device},Hbm.Api.Common.Entities.TimeSources.TimeSource@)" />
            </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDeviceFamily.Scan">
            <summary>
                Scan network for QuantumX devices
            </summary>
            <returns>List of found QuantumX devices</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDeviceFamily.Init">
            <summary>
                Initialize QuantumX specific unmanaged code.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDeviceFamily.Exit">
            <summary>
                Clean up QuantumX specific unmanaged code.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.QuantumXDeviceFamily.SplitConnectionInfosForParallelAccess(System.Collections.Generic.List{Hbm.Api.Common.Entities.ConnectionInfos.ConnectionInfo})">
            <summary>
                Splits the connection infos into list whose members (IpAddress and Port) can be connected in parallel.
            </summary>
            <param name="connectionInfos">
                The connection infos to distribute into parallel connectable lists of Ethernet and
                Streaming connection infos
            </param>
            <returns>Parallel connectable lists of ConnectionInfos</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Signals.IQuantumXIsochronousSignal">
            <summary>
            Interface which must be implemented by all isochronous QuantumX signals.
            This interface is used to identify isochronous QuantumX signals.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.IQuantumXIsochronousSignal.IsIsochronous">
            <summary>
            Indicates, if isochronous data transmission (real time transmission for system wide broadcast) is enabled.
            </summary>
            <remarks>This property has been renamed compared to V1.0.0.0 to clarify its meaning and reflect terms used in GUIs.</remarks>
        </member>
        <member name="T:Hbm.Api.QuantumX.Signals.IQuantumXSignal">
            <summary>
            Interface which must be implemented by all QuantumX signals.
            This interface is used to identify QuantumX signals.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.IQuantumXSignal.Position">
            <summary>
            Position to which connector the signal belongs
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.IQuantumXSignal.SignalReference">
            <summary>
            Unique reference of this signal source which can be used as source for output or virtual signals (read only).
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Signals.QuantumXAnalogInSignal">
            <summary>
                Represents a QuantumX specific measurement signal delivered by a physical sensor
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Signals.QuantumXAnalogInSignal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hbm.Api.QuantumX.Signals.QuantumXAnalogInSignal"/> class.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Signals.QuantumXAnalogInSignal.#ctor(Hbm.Api.QuantumX.Signals.QuantumXSyncSignal)">
            <summary>
            Initializes a new instance of the <see cref="T:Hbm.Api.QuantumX.Signals.QuantumXAnalogInSignal"/> class.
            </summary>
            <param name="qxSyncSignal">The QuantumX synchronize signal carrying the properties to create the new QuantumXAnalogInSignal.</param>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXAnalogInSignal.Position">
            <summary>
                Position to which connector the signal belongs.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXAnalogInSignal.SignalReference">
            <summary>
                Unique reference of this signal source which can be used as source for output or virtual signals (read only).
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXAnalogInSignal.Description">
            <summary>
                Description of the signal (read only)
                e.g. "analog input: connector 2, signal 1".
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXAnalogInSignal.IsDaqAvailable">
            <summary>
                Indicates, if transmission for data acquisition is enabled (read only).
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXAnalogInSignal.IsIsochronous">
            <summary>
                Indicates, if isochronous data transmission (real time transmission for system wide broadcast) is enabled.
            </summary>
            <remarks>This property has been renamed compared to V1.0.0.0 to clarify its meaning and reflect terms used in GUIs.</remarks>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXAnalogInSignal.OriginOfName">
            <summary>
                Origin of the signal name (read only).
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Signals.QuantumXAnalogInSignal.GetUniqueID">
            <summary>
                Returns a unique string that identifies the signal among the device to which the signal belongs.
            </summary>
            <remarks>
                In case of a streamable signal, this method must return the information used by the streaming to identify the
                signal on the hardware module.
                This information should be retrieved during scan or connect. This method must not throw any Exceptions.
            </remarks>
            <returns>Unique signal identification on the device or <c>String.Empty</c>, if identifier is not set</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Signals.QuantumXAnalogOutSignal">
            <summary>
            Represents a QuantumX specific analog output signal. 
            </summary>
            <remarks>
            This kind of signal cannot be part of a measurement.
            </remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Signals.QuantumXAnalogOutSignal.#ctor">
            <summary>
            Creates a new instance of the class and initializes variables
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXAnalogOutSignal.Position">
            <summary>
            Position to which connector the signal belongs
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXAnalogOutSignal.SignalReference">
            <summary>
            Unique reference of this signal source (read only)
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Signals.QuantumXAnalogOutSignal.GetUniqueID">
            <summary>
            Returns a unique string that identifies the signal among the device to which the signal belongs.
            </summary>
            <remarks>In case of a streamable signal, this method must return the information used by the streaming to identify the signal on the hardware module.
            This information should be retrieved during scan or connect. This method must not throw any Exceptions.</remarks>
            <returns>Unique signal identification on the device or <c>String.Empty</c>, if identifier is not set</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Signals.QuantumXCanInSignal">
            <summary>
            Represents a QuantumX specific measurement signal delivered by a sensor via CAN bus. 
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXCanInSignal.Position">
            <summary>
            Position to which connector the signal belongs.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXCanInSignal.SignalReference">
            <summary>
            Unique reference of this signal source which can be used as source for output or virtual signals (read only).
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXCanInSignal.Description">
            <summary>
            Description of the signal (read only) 
            e.g. "analog input: connector 2, signal 1".
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXCanInSignal.IsDaqAvailable">
            <summary>
            Indicates, if transmission for data acquisition is enabled (read only).
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXCanInSignal.IsIsochronous">
            <summary>
            Indicates, if isochronous data transmission (real time transmission for system wide broadcast) is enabled.
            </summary>
            <remarks>This property has been renamed compared to V1.0.0.0 to clarify its meaning and reflect terms used in GUIs.</remarks>
        </member>
        <member name="M:Hbm.Api.QuantumX.Signals.QuantumXCanInSignal.GetUniqueID">
            <summary>
            Returns a unique string that identifies the signal among the device to which the signal belongs.
            </summary>
            <remarks>In case of a streamable signal, this method must return the information used by the streaming to identify the signal on the hardware module.
            This information should be retrieved during scan or connect. This method must not throw any Exceptions.</remarks>
            <returns>Unique signal identification on the device or <c>String.Empty</c>, if identifier is not set</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Signals.QuantumXCanRawSignal">
            <summary>
            Represents a QuantumX specific measurement signal delivered by a sensor via CAN bus (RAW signal).
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXCanRawSignal.Position">
            <summary>
            Position to which connector the signal belongs.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXCanRawSignal.SignalReference">
            <summary>
            Unique reference of this signal source which can be used as source for output or virtual signals (read only).
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Signals.QuantumXCanRawSignal.GetUniqueID">
            <summary>
            Returns a unique string that identifies the signal among the device to which the signal belongs.
            </summary>
            <remarks>In case of a streamable signal, this method must return the information used by the streaming to identify the signal on the hardware module.
            This information should be retrieved during scan or connect. This method must not throw any Exceptions.</remarks>
            <returns>Unique signal identification on the device or <c>String.Empty</c>, if identifier is not set</returns>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXCanRawSignal.IsIsochronous">
            <summary>
            Indicates, if isochronous data transmission (real time transmission for system wide broadcast) is enabled.
            </summary>
            <remarks>This property has been renamed compared to V1.0.0.0 to clarify its meaning and reflect terms used in GUIs.</remarks>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXCanRawSignal.IsDaqAvailable">
            <summary>
            Indicates, if transmission for data acquisition is enabled (read only).
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.Signals.QuantumXDigitalSignal">
            <summary>
            Represents a QuantumX specific digital input or output signal. 
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXDigitalSignal.Position">
            <summary>
            Position to which connector the signal belongs.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXDigitalSignal.SignalReference">
            <summary>
            Unique reference of this signal source (read only).
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXDigitalSignal.Description">
            <summary>
            Description of the signal (read only)
            e.g. "analog input: connector 2, signal 1".
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXDigitalSignal.IsDaqAvailable">
            <summary>
            Indicates, if transmission for data acquisition is enabled (read only).
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXDigitalSignal.IsIsochronous">
            <summary>
            Indicates, if isochronous data transmission (real time transmission for system wide broadcast) is enabled (read only).
            </summary>
            <remarks>This property has been renamed compared to V1.0.0.0 to clarify its meaning and reflect terms used in GUIs.</remarks>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXDigitalSignal.OriginOfName">
            <summary>
            Origin of the signal name (read only).
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Signals.QuantumXDigitalSignal.GetUniqueID">
            <summary>
            Returns a unique string that identifies the signal among the device to which the signal belongs.
            </summary>
            <remarks>In case of a streamable signal, this method must return the information used by the streaming to identify the signal on the hardware module.
            This information should be retrieved during scan or connect. This method must not throw any Exceptions.</remarks>
            <returns>Unique signal identification on the device or <c>String.Empty</c>, if identifier is not set</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Signals.QuantumXFbgSignal.#ctor(Hbm.Api.QuantumX.Signals.QuantumXSyncSignal)">
            <summary>
            Creates a <see cref="T:Hbm.Api.QuantumX.Signals.QuantumXFbgSignal"/> from an <see cref="!:QuantumxSyncSignal"/> 
            </summary>
            <param name="qxSyncSignal"> <see cref="!:QuantumxSyncSignal"/> to be used to create a <see cref="!:"/>QuantumXFbgSignal</param>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXFbgSignal.Position">
            <summary>
            Position to which connector the signal belongs.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXFbgSignal.SignalReference">
            <summary>
            Unique reference of this signal source which can be used as source for output or virtual signals (read only).
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXFbgSignal.Description">
            <summary>
            Description of the signal (read only) 
            e.g. "analog input: connector 2, signal 1".
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXFbgSignal.IsDaqAvailable">
            <summary>
            Indicates, if transmission for data acquisition is enabled (read only).
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXFbgSignal.IsIsochronous">
            <summary>
            Indicates, if isochronous data transmission (real time transmission for system wide broadcast) is enabled.
            </summary>
            <remarks>This property has been renamed compared to V1.0.0.0 to clarify its meaning and reflect terms used in GUIs.</remarks>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXFbgSignal.OriginOfName">
            <summary>
            Origin of the signal name (read only).
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Signals.QuantumXFbgSignal.GetUniqueID">
            <summary>
            Returns a unique string that identifies the signal among the device to which the signal belongs.
            </summary>
            <remarks>In case of a streamable signal, this method must return the information used by the streaming to identify the signal on the hardware module.
            This information should be retrieved during scan or connect. This method must not throw any Exceptions.</remarks>
            <returns>Unique signal identification on the device or <c>String.Empty</c>, if identifier is not set</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Signals.QuantumXSyncSignal">
            <summary>
            Represents a QuantumX specific measurement signal delivered by a physical sensor
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXSyncSignal.Position">
            <summary>
            Position to which connector the signal belongs.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXSyncSignal.SignalReference">
            <summary>
            Unique reference of this signal source which can be used as source for output or virtual signals (read only).
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXSyncSignal.Description">
            <summary>
            Description of the signal (read only) 
            e.g. "analog input: connector 2, signal 1".
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXSyncSignal.IsDaqAvailable">
            <summary>
            Indicates, if transmission for data acquisition is enabled (read only).
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXSyncSignal.IsIsochronous">
            <summary>
            Indicates, if isochronous data transmission (real time transmission for system wide broadcast) is enabled.
            </summary>
            <remarks>This property has been renamed compared to V1.0.0.0 to clarify its meaning and reflect terms used in GUIs.</remarks>
        </member>
        <member name="P:Hbm.Api.QuantumX.Signals.QuantumXSyncSignal.OriginOfName">
            <summary>
            Origin of the signal name (read only).
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Signals.QuantumXSyncSignal.GetUniqueID">
            <summary>
            Returns a unique string that identifies the signal among the device to which the signal belongs.
            </summary>
            <remarks>In case of a streamable signal, this method must return the information used by the streaming to identify the signal on the hardware module.
            This information should be retrieved during scan or connect. This method must not throw any Exceptions.</remarks>
            <returns>Unique signal identification on the device or <c>String.Empty</c>, if identifier is not set</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader">
            <summary>
            Class that realizes the ISkillReader interface
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.Domains">
            <summary>
            Gets or sets the domains that describes the possible settings of
            amplifiers of the QuantumX device family
            </summary>
            <value>
            The domains.
            </value>
        </member>
        <member name="P:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.MinimumFirmwareVersionSupported">
            <summary>
            Gets or sets the minimum firmware version supported.
            </summary>
            <value>
            The minimum firmware version supported.
            </value>
        </member>
        <member name="M:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.Hbm#Api#Common#Entities#ISkillReader#Init">
            <summary>
            Use this function to do any initialization tasks (e.g. reading file with device skill infos or connecting to a database,etc.)
            </summary>
            <returns>True, if initialization was successful </returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.Hbm#Api#Common#Entities#ISkillReader#GetSupportedSensorTypes(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Channels.Channel)">
            <summary>
            Gets the supported sensor types of the given channel
            </summary>
            <param name="device">Device from which to get the possible sensor types</param>
            <param name="channel">Channel from which to get the possible sensor types</param>
            <returns>List of possible sensor types</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.Hbm#Api#Common#Entities#ISkillReader#GetSupportedFilterFrequencies(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Signals.Signal)">
            <summary>
            Gets the supported filter frequencies for the filter type that is used by the given signal.
            We use signal instead of e.g. filter here, because we also need the channel to decide
            which filter frequencies are possible (e.g. for MGC). The channel is accessable via signal.
            </summary>
            <param name="device">Device from which to get the possible filter frequencies</param>
            <param name="signal">Signal from which to get the possible filter frequencies (depending on its filter)</param>
            <returns>List of possible filter frequencies</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.Hbm#Api#Common#Entities#ISkillReader#GetSupportedSampleRates(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Signals.Signal)">
            <summary>
            Gets the supported sample rates of the given signal
            </summary>
            <param name="device">Device from which to get the possible sample rates</param>
            <param name="signal">Signal from which to get the possible sample rates</param>
            <returns>List of possible sample rates</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.Hbm#Api#Common#Entities#ISkillReader#GetSupportedScalingTypes(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Channels.Channel)">
            <summary>
            Gets the supported scaling types of the given channel
            </summary>
            <param name="device">Device from which to get the possible scaling types</param>
            <param name="channel">Channel from which to get the possible scaling types</param>
            <returns>List of possible scaling types</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.Hbm#Api#Common#Entities#ISkillReader#GetSupportedFilters(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Signals.Signal)">
            <summary>
            Gets the supported filters of the given signal
            </summary>
            <param name="device">Device from which to get the possible filters</param>
            <param name="signal">Signal from which to get the possible filters</param>
            <returns>List of possible filters</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.Hbm#Api#Common#Entities#ISkillReader#GetSupportedPhysicalUnits(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Channels.Channel)">
            <summary>
            Gets the possible physical units for the sensor type that is used by the given channel.
            We use channel instead of e.g. sensor here, because we also need the channel to decide
            which physical units are possible (e.g. for MGC). The sensor is accessable via channel.
            </summary>
            <param name="device">Device from which to get the possible physical units</param>
            <param name="channel">Channel from which to get the possible units (depending on its sensor)</param>
            <returns>Possible physical units or an empty list if there are no restrictions</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.Hbm#Api#Common#Entities#ISkillReader#GetSupportedJackType(Hbm.Api.Common.Entities.Device,Hbm.Api.Common.Entities.Signals.Signal)">
            <summary>
            Gets the type of the jack.
            </summary>
            <param name="device">The device.</param>
            <param name="signal">The signal.</param>
            <returns>Name of the jack type</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.Hbm#Api#Common#Entities#ISkillReader#GetSupportedCanBitRates(Hbm.Api.Common.Entities.Device)">
            <summary>
            Gets the supported CAN bit rates.
            </summary>
            <param name="device">The device.</param>
            <returns>
            The list of supported CAN bit rates.
            </returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.Hbm#Api#Common#Entities#ISkillReader#SupportsChangingConnectorType(Hbm.Api.Common.Entities.Device)">
            <summary>
            Determines whether the specified device supports switching to and from CAN bus.
            </summary>
            <param name="device">The device.</param>
            <returns>
            Whether the specified device supports switching to and from CAN bus.
            </returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.GetSkillReaderConfigPath">
            <summary>
            Returns the full path and filename to the configuration file 
            </summary>
            <returns>Path and filename of configuration file</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.GetAmplifier(Hbm.Api.Common.Entities.Device)">
            <summary>
            Gets the amplifier object depending on the sample rate domain and the model of the given device
            </summary>
            <param name="device">The device.</param>
            <returns></returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.FilterTypes">
            <summary>
            Possible filter types 
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.FilterTypes.Bessel">
            <summary>
            Bessel filter
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.FilterTypes.Butterworth">
            <summary>
            Butterworth filter
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.FilterTypes.ButterworthFir">
            <summary>
            Butterworth FIR filter
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.FilterTypes.LinearPhase">
            <summary>
            Linear phase filter
            </summary>
        </member>
        <member name="F:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.FilterTypes.NoFilter">
            <summary>
            No filter
            </summary>
        </member>
        <member name="T:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.FilterInfo">
            <summary>
            Class that combines filter type and filter frequencies
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.FilterInfo.Filtertype">
            <summary>
            Filter type
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.FilterInfo.Frequencies">
            <summary>
            Frequencies for filter type
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.FilterInfo.#ctor(Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.FilterTypes,System.Collections.Generic.List{System.Decimal})">
            <summary>
            Constructor
            </summary>
            <param name="filterType">Filter type</param>
            <param name="frequencies">Frequencies for filter type</param>
        </member>
        <member name="T:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.Domain">
            <summary>
            Domain that holds a list of amplifiers according to the sample rate domain of a device
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.Domain.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.Domain"/> class.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.Domain.Type">
            <summary>
            Gets or sets the type (e.g. "Classic" or "Decimal")
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.Domain.Amplifiers">
            <summary>
            Gets or sets the amplifiers.
            </summary>
            <value>
            The amplifiers.
            </value>
        </member>
        <member name="T:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.Amplifier">
            <summary>
            Class that holds the possible settings for a certain amplifier type
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.Amplifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.Amplifier"/> class.
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.Amplifier.ModuleTypes">
            <summary>
            Gets or sets the types for which the defined possibilities are valid
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.Amplifier.JackType">
            <summary>
            Gets or sets the type of the jack.
            </summary>
            <value>
            The type of the jack (e.g. "SUBD15", "THERMO", etc.)
            </value>
        </member>
        <member name="P:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.Amplifier.PossibleSamplerates">
            <summary>
            Gets or sets the possible samplerates.
            </summary>
            <value>
            The possible samplerates.
            </value>
        </member>
        <member name="P:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.Amplifier.PossibleFilters">
            <summary>
            Gets or sets the possible filters.
            </summary>
            <value>
            The possible filters.
            </value>
        </member>
        <member name="P:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.Amplifier.PossibleFiltersForSampleRates">
            <summary>
            Gets or sets the special sample rate filter pairs.
            </summary>
            <value>
            The special sample rate filter pairs.
            </value>
        </member>
        <member name="P:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.Amplifier.PossibleSensorTypes">
            <summary>
            Gets or sets the possible sensor types.
            </summary>
            <value>
            The possible sensor types.
            </value>
        </member>
        <member name="P:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.Amplifier.PossibleScalingTypes">
            <summary>
            Gets or sets the possible scaling types.
            </summary>
            <value>
            The possible scaling types.
            </value>
        </member>
        <member name="P:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.Amplifier.SupportedCanBitRates">
            <summary>
            Gets or sets the supported can bit rates.
            </summary>
            <value>
            The supported can bit rates.
            </value>
        </member>
        <member name="P:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.Amplifier.SupportsChangingConnectorType">
            <summary>
            Gets or sets the switching to and from CAN bus support.
            </summary>
            <value>
            <c>true</c> if supports switching to and from CAN bus; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.PossibleFiltersForSampleRate">
            <summary>
            Class that holds all possible filters for a certain sample rate
            </summary>
        </member>
        <member name="P:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.PossibleFiltersForSampleRate.SampleRate">
            <summary>
            Gets or sets the sample rate.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:Hbm.Api.QuantumX.SkillReaders.QuantumXFileSkillReader.PossibleFiltersForSampleRate.PossibleFilters">
            <summary>
            Gets or sets the possible filters.
            </summary>
            <value>
            The possible filters.
            </value>
        </member>
        <member name="T:Hbm.Api.QuantumX.Statuses.QuantumXConnectorShuntStatus">
            <summary>
            Represents the shunt status information of one connector.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Statuses.QuantumXConnectorShuntStatus.#ctor(System.Int32,Hbm.Api.Common.Enums.ShuntMode,Hbm.Api.Common.Entities.Connectors.Connector)">
            <summary>
            Initializes a new instance of the <see cref="T:Hbm.Api.QuantumX.Statuses.QuantumXConnectorShuntStatus"/> class.
            </summary>
            <param name="originalID">The original identifier.</param>
            <param name="value">The value.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="P:Hbm.Api.QuantumX.Statuses.QuantumXConnectorShuntStatus.Value">
            <summary>
            Gets the device specific value of the status.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Statuses.QuantumXConnectorShuntStatus.IsEqual(Hbm.Api.Common.Entities.DeviceStatus)">
            <summary>Determines whether the specified status is equal to the current device status.</summary>
            <param name="status">The status.</param>
            <returns><c>true</c> if the specified status is equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Statuses.QuantumXChannelTestSignalActiveStatus">
            <summary>
            Represents the test signal status information of one channel.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Statuses.QuantumXChannelTestSignalActiveStatus.#ctor(System.Int32,Hbm.Api.QuantumX.Enums.QuantumXTestSignalActiveValueType,Hbm.Api.Common.Entities.Channels.Channel)">
            <summary>
            Initializes a new instance of the <see cref="T:Hbm.Api.QuantumX.Statuses.QuantumXChannelTestSignalActiveStatus"/> class.
            </summary>
            <param name="originalID">The original identifier.</param>
            <param name="value">The value.</param>
            <param name="channel">The channel.</param>
        </member>
        <member name="P:Hbm.Api.QuantumX.Statuses.QuantumXChannelTestSignalActiveStatus.Value">
            <summary>
            Gets the value of the status.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Statuses.QuantumXChannelTestSignalActiveStatus.IsEqual(Hbm.Api.Common.Entities.DeviceStatus)">
            <summary>Determines whether the specified status is equal to the current device status.</summary>
            <param name="status">The status.</param>
            <returns><c>true</c> if the specified status is equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Utils.Helper">
            <summary>
                Helper class for the QuantumX devices.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Utils.Helper.ComputeFbgMaxEngineeringRanges(Hbm.Api.Common.Entities.DetectionRange,Hbm.Api.SensorDB.Entities.Sensors.FbgSensor)">
            <summary>
                Computes and sets the FBG engineering ranges.
            </summary>
            <param name="detectionRange">The FBG sensor channel's detection range.</param>
            <param name="fbgSensor">The FBG sensor.</param>
        </member>
        <member name="M:Hbm.Api.QuantumX.Utils.Helper.ComputeFbgMinEngineeringRanges(Hbm.Api.Common.Entities.DetectionRange,Hbm.Api.SensorDB.Entities.Sensors.FbgSensor)">
            <summary>
                Computes and sets the FBG min engineering range.
            </summary>
            <param name="detectionRange">The FBG sensor channel's detection range.</param>
            <param name="fbgSensor">The FBG sensor.</param>
        </member>
        <member name="T:Hbm.Api.QuantumX.Utils.UuidConverter">
            <summary>
            Helper class for converting a Uuid
            from and to its hexadecimal string representation.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Utils.UuidConverter.ToUInt64(System.String)">
            <summary>
            Converts a string value, containing a hexadecimal uuid, 
            into an <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="uuid">UUID as string</param>
            <returns>Converted UUID of type <see cref="T:System.UInt64"/></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Utils.UuidConverter.ToString(System.UInt64)">
            <summary>
            Converts a uuid into its hexadecimal string representation.
            </summary>
            <param name="uuid">UUID as <see cref="T:System.UInt64"/> </param>
            <returns>Hexadecimal string representation of the UUID</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Utils.XElementExtension">
            <summary>
            Extension methods for the .NET XElement class 
            to allow simpler access and conversion of xml data
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Utils.XElementExtension.GetAttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Gets the value of the xml attribute with name <paramref name="attributeName"/> 
            for the given xml element as <c>string</c>.
            </summary>
            <param name="xElement">Current <see cref="T:System.Xml.Linq.XElement"/> which has the attribute</param>
            <param name="attributeName">Xml name of the attribute</param>
            <returns>Value of the attibute as <c>string</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Utils.XElementExtension.GetAttributeValue``1(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Gets the value of the xml attribute with name <paramref name="attributeName"/> 
            for the given xml element and converts the value into the type <typeparamref name="T"/>.
            An exception is thrown, if the conversion has failed.
            </summary>
            <typeparam name="T">Target type of the value</typeparam>
            <param name="xElement">Current <see cref="T:System.Xml.Linq.XElement"/>, which has the attribute</param>
            <param name="attributeName">Xml name of the attribute</param>
            <returns>Value of the xml attibute, converted to <typeparamref name="T"/></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Utils.XElementExtension.Value``1(System.Xml.Linq.XElement)">
            <summary>
            Gets the value of the given xml element
            and converts the value into the type <typeparamref name="T"/>.
            An exception is thrown, if the conversion has failed.
            </summary>
            <typeparam name="T">Target type of the value</typeparam>
            <param name="xElement">Current <see cref="T:System.Xml.Linq.XElement"/> containing the value</param>
            <returns>Value of the xml element, converted to <typeparamref name="T"/></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Utils.XElementExtension.GetName(System.Xml.Linq.XElement)">
            <summary>
            Gets the xml tag name of the given xml element.
            </summary>
            <param name="xElement">Current <see cref="T:System.Xml.Linq.XElement"/> to get the name from</param>
            <returns>Xml tag name of the given xml element</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Utils.XElementExtension.GetElementValue(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Gets the value of a child element (named <paramref name="subElementName"/>) of the current xml element as <c>string</c>.
            The child element must be a direct decendant of the current element.
            </summary>
            <param name="xElement">Current <see cref="T:System.Xml.Linq.XElement"/>, which has the child element</param>
            <param name="subElementName">Name of the child element, whose value is read</param>
            <returns>Value of the child xml element as <c>string</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Utils.XElementExtension.GetElementValue``1(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Gets the value of a child element (named <paramref name="subElementName"/>) of the current xml element 
            and converts the value into the type <typeparamref name="T"/>.
            The child element must be a direct decendant of the current element.
            </summary>
            <typeparam name="T">Target type of the value</typeparam>
            <param name="xElement">Current <see cref="T:System.Xml.Linq.XElement"/>, which has the child element</param>
            <param name="subElementName">Name of the child element, whose value is read</param>
            <returns>Value of the child xml element, converted to <typeparamref name="T"/></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Utils.XElementExtension.HasElement(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Checks if a child element (named <paramref name="subElementName"/>) exists 
            </summary>
            <param name="xElement">Current <see cref="T:System.Xml.Linq.XElement"/>, which has the child element</param>
            <param name="subElementName">Name of the child element, which will checked</param>
            <returns><c>true</c> if the child xml element exists, else <c>false</c></returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Utils.XElementExtension.GetElementByChoice(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName)">
            <summary>
            Gets the subelement of the current <paramref name="xElement"/> which equals the selected choice.
            </summary>
            <param name="xElement">Current <see cref="T:System.Xml.Linq.XElement"/>, which has the child element with a choice</param>
            <param name="selectionElementName">Name of the child element, which contains the choice attribute</param>
            <param name="choiceAttributeName">Name of the choice attribute</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/>, which equals the given choice</returns>
        </member>
        <member name="T:Hbm.Api.QuantumX.Utils.XmlStringEscaper">
            <summary>
            Helper class to convert a text to a XML compatible format and back again.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Utils.XmlStringEscaper.#cctor">
            <summary>
            Statically initializes the <see cref="T:Hbm.Api.QuantumX.Utils.XmlStringEscaper"/> class.
            </summary>
        </member>
        <member name="M:Hbm.Api.QuantumX.Utils.XmlStringEscaper.Escape(System.String)">
            <summary>
            Escapes the specified text for XML usage.
            </summary>
            <param name="text">The Text.</param>
            <returns>The XML escaped text.</returns>
        </member>
        <member name="M:Hbm.Api.QuantumX.Utils.XmlStringEscaper.Unescape(System.String)">
            <summary>
            Un-escapes the specified XML string.
            </summary>
            <param name="xmlString">The XML string.</param>
            <returns>The un-escaped XML string.</returns>
        </member>
    </members>
</doc>
